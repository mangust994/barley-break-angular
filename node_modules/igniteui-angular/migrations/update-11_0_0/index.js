"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const UpdateChanges_1 = require("../common/UpdateChanges");
const util_1 = require("../common/util");
const version = '11.0.0';
exports.default = () => (host, context) => {
    context.logger.info(`Applying migration for Ignite UI for Angular to version ${version}`);
    const update = new UpdateChanges_1.UpdateChanges(__dirname, host, context);
    const TAGS = ['igx-grid', 'igx-tree-grid', 'igx-hierarchical-grid'];
    const prop = ['[showToolbar]', 'showToolbar'];
    const warnMsg = `\n<!-- Auto migrated template content. Please, check your bindings! -->\n`;
    const changes = new Map();
    const applyChanges = () => {
        for (const [path, change] of changes.entries()) {
            let buffer = host.read(path).toString();
            change.sort((c, c1) => c.position - c1.position)
                .reverse()
                .forEach(c => buffer = c.apply(buffer));
            host.overwrite(path, buffer);
        }
    };
    const addChange = (path, change) => {
        if (changes.has(path)) {
            changes.get(path).push(change);
        }
        else {
            changes.set(path, [change]);
        }
    };
    const makeNgIf = (name, value) => name.startsWith('[') && value !== 'true';
    // Try to preserve the template context variable binding
    const getTemplateBinding = (node) => {
        const template = util_1.findElementNodes([node], ['ng-template'])
            .filter(tmpl => util_1.hasAttribute(tmpl, 'igxToolbarCustomContent'))[0];
        if (template) {
            return template.attrs.find(attr => attr.name.startsWith('let') && attr.value.startsWith('grid'))
                .name.split('-')[1];
        }
        return 'childGrid';
    };
    const moveTemplateIfAny = (grid) => {
        const ngTemplates = util_1.findElementNodes([grid], ['ng-template']);
        const toolbarTemplate = ngTemplates.filter(template => util_1.hasAttribute(template, 'igxToolbarCustomContent'))[0];
        if (toolbarTemplate) {
            return `${warnMsg}\n${util_1.serializeNodes(toolbarTemplate.children).join('')}\n`;
        }
        return '';
    };
    // Row island migration
    for (const path of update.templateFiles) {
        util_1.findElementNodes(util_1.parseFile(host, path), 'igx-row-island')
            .filter(island => util_1.hasAttribute(island, prop))
            .map(island => util_1.getSourceOffset(island))
            .forEach(offset => {
            const { startTag, file, node } = offset;
            const binding = getTemplateBinding(node);
            const { name, value } = util_1.getAttribute(node, prop)[0];
            // eslint-disable-next-line max-len
            const text = `\n<igx-grid-toolbar [grid]="${binding}" *igxGridToolbar="let ${binding}"${makeNgIf(name, value) ? ` *ngIf="${value}"` : ''}>${moveTemplateIfAny(node)}</igx-grid-toolbar>\n`;
            addChange(file.url, new util_1.FileChange(startTag.end, text));
        });
    }
    applyChanges();
    changes.clear();
    // Clear row island templates
    for (const path of update.templateFiles) {
        util_1.findElementNodes(util_1.parseFile(host, path), 'igx-row-island')
            .filter(grid => util_1.hasAttribute(grid, prop))
            .map(grid => util_1.findElementNodes([grid], ['ng-template']))
            .reduce((prev, curr) => prev.concat(curr), [])
            .filter(template => util_1.hasAttribute(template, 'igxToolbarCustomContent'))
            .forEach(node => {
            const { startTag, endTag, file } = util_1.getSourceOffset(node);
            const replaceText = file.content.substring(startTag.start, endTag.end);
            addChange(file.url, new util_1.FileChange(startTag.start, '', replaceText, 'replace'));
        });
    }
    applyChanges();
    changes.clear();
    // General migration
    // Prepare the file changes
    for (const path of update.templateFiles) {
        util_1.findElementNodes(util_1.parseFile(host, path), TAGS)
            .filter(grid => util_1.hasAttribute(grid, prop))
            .map(node => util_1.getSourceOffset(node))
            .forEach(offset => {
            const { startTag, file, node } = offset;
            const { name, value } = util_1.getAttribute(node, prop)[0];
            // eslint-disable-next-line max-len
            const text = `\n<igx-grid-toolbar${makeNgIf(name, value) ? ` *ngIf="${value}"` : ''}>${moveTemplateIfAny(node)}</igx-grid-toolbar>\n`;
            addChange(file.url, new util_1.FileChange(startTag.end, text));
        });
    }
    applyChanges();
    changes.clear();
    // Remove toolbar templates after migration
    for (const path of update.templateFiles) {
        util_1.findElementNodes(util_1.parseFile(host, path), TAGS)
            .filter(grid => util_1.hasAttribute(grid, prop))
            .map(grid => util_1.findElementNodes([grid], ['ng-template']))
            .reduce((prev, curr) => prev.concat(curr), [])
            .filter(template => util_1.hasAttribute(template, 'igxToolbarCustomContent'))
            .forEach(node => {
            const { startTag, endTag, file } = util_1.getSourceOffset(node);
            const replaceText = file.content.substring(startTag.start, endTag.end);
            addChange(file.url, new util_1.FileChange(startTag.start, '', replaceText, 'replace'));
        });
    }
    applyChanges();
    // Remove the input properties
    update.applyChanges();
};
