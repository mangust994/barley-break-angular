import { Tree } from '@angular-devkit/schematics';
import * as ts from 'typescript/lib/tsserverlibrary';
export declare class ServerHost implements ts.server.ServerHost {
    private host;
    readonly args: string[];
    readonly newLine: string;
    readonly useCaseSensitiveFileNames: boolean;
    constructor(host: Tree);
    readFile(path: string, encoding?: string): string | undefined;
    getFileSize(path: string): number;
    watchFile(path: string, callback: ts.FileWatcherCallback, pollingInterval?: number): ts.FileWatcher;
    watchDirectory(path: string, callback: ts.DirectoryWatcherCallback, recursive?: boolean): ts.FileWatcher;
    resolvePath(path: string): string;
    fileExists(path: string): boolean;
    directoryExists(path: string): boolean;
    getExecutingFilePath(): string;
    getCurrentDirectory(): string;
    getDirectories(path: string): string[];
    readDirectory(path: string): string[];
    require(initialPath: string, moduleName: string): {
        module: any;
        error: any;
    } | {
        module: any;
        error: Error;
    };
    getModifiedTime(path: string): Date | undefined;
    realpath(path: string): string;
    createSHA256Hash(data: string): string;
    write(data: string): void;
    writeOutputIsTTY(): boolean;
    writeFile(path: string, data: string, writeByteOrderMark?: boolean): void;
    createDirectory(path: string): void;
    setModifiedTime(path: string, time: Date): void;
    deleteFile(path: string): void;
    createHash(data: string): string;
    getMemoryUsage(): number;
    exit(exitCode?: number): void;
    setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): any;
    clearTimeout(timeoutId: any): void;
    clearScreen(): void;
    base64decode(input: string): string;
    base64encode(input: string): string;
    setImmediate(callback: (...args: any[]) => void, ...args: any[]): any;
    clearImmediate(timeoutId: any): void;
}
