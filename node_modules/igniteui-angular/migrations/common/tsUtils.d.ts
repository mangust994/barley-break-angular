import * as ts from 'typescript';
import * as tss from 'typescript/lib/tsserverlibrary';
import { Tree } from '@angular-devkit/schematics';
import { MemberChange } from './schema';
export declare const IG_PACKAGE_NAME = "igniteui-angular";
export declare const NG_LANG_SERVICE_PACKAGE_NAME = "@angular/language-service";
export declare const NG_CORE_PACKAGE_NAME = "@angular/core";
export declare const CUSTOM_TS_PLUGIN_PATH = "./tsPlugin";
export declare const CUSTOM_TS_PLUGIN_NAME = "igx-ts-plugin";
/** Returns a source file */
export declare const getIdentifierPositions: (sourceText: string, name: string) => Array<{
    start: number;
    end: number;
}>;
/** Returns the positions of import from module string literals  */
export declare const getImportModulePositions: (sourceText: string, startsWith: string) => Array<{
    start: number;
    end: number;
}>;
export declare const getRenamePositions: (sourcePath: string, name: string, service: ts.LanguageService) => Array<{
    start: number;
    end: number;
}>;
export declare const findMatches: (content: string, change: MemberChange) => number[];
export declare const replaceMatch: (content: string, toReplace: string, replaceWith: string, index: number) => string;
/**
 * Create a TypeScript language service
 *
 * @param serviceHost A TypeScript language service host
 */
export declare const getLanguageService: (filePaths: string[], host: Tree, options?: ts.CompilerOptions) => ts.LanguageService;
/**
 * Create a project service singleton that holds all projects within a directory tree
 *
 * @param serverHost Used by the tss to navigate the directory tree
 */
export declare const createProjectService: (serverHost: tss.server.ServerHost) => tss.server.ProjectService;
/**
 * Get type information about a TypeScript identifier
 *
 * @param langServ TypeScript/Angular LanguageService
 * @param entryPath path to file
 * @param position Index of identifier
 */
export declare const getTypeDefinitionAtPosition: (langServ: tss.LanguageService, entryPath: string, position: number) => tss.DefinitionInfo | null;
export declare const isMemberIgniteUI: (change: MemberChange, langServ: tss.LanguageService, entryPath: string, matchPosition: number) => boolean;
