"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const package_handler_1 = require("../utils/package-handler");
const dependency_handler_1 = require("../utils/dependency-handler");
const add_normalize_1 = require("./add-normalize");
const util_1 = require("../utils/util");
const enableIESupport = (tree, context) => {
    var _a;
    const targetFile = '/.browserslistrc';
    let updateFile = false;
    let content = ((_a = tree.read(targetFile)) === null || _a === void 0 ? void 0 : _a.toString());
    while (content === null || content === void 0 ? void 0 : content.includes('not IE')) {
        content = content.replace('not IE', 'IE');
        updateFile = true;
    }
    if (updateFile) {
        tree.overwrite(targetFile, content);
    }
    else {
        context.logger.warn(`Either IE support is already enabled OR you may need to update ${targetFile} file manually.`);
    }
};
// Only required if AnimationBuilder is used (igniteui-angular does) & using IE/Edge or Safari
const updatePolyfillsForIESupport = (tree, targetFile, polyfillsData) => {
    // Target the web-animations-js commented import statement and uncomment it.
    const webAnimationsLine = '// import \'web-animations-js\';';
    const classlistLine = '// import \'classlist.js\';';
    polyfillsData = polyfillsData.replace(webAnimationsLine, webAnimationsLine.substring(3, webAnimationsLine.length));
    polyfillsData = polyfillsData.replace(classlistLine, classlistLine.substring(3, classlistLine.length));
    tree.overwrite(targetFile, polyfillsData);
};
const readInput = (options) => (tree, context) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const workspaceHost = util_1.createHost(tree);
    const { workspace } = yield core_1.workspaces.readWorkspace(tree.root.path, workspaceHost);
    if (options.polyfills) {
        const project = workspace.projects.get(workspace.extensions['defaultProject']);
        const polyfillsFilePath = dependency_handler_1.getConfigFile(project, 'polyfills', context);
        const browserslistrcFile = (tree.read('/.browserslistrc'));
        const animationsWarn = 'You may want to manually uncomment \'// import \'web-animations-js\' in polyfills.ts';
        // .browserslistrc --> If project targets angular cli version >= 10.0
        if (browserslistrcFile) {
            enableIESupport(tree, context);
        }
        else {
            context.logger.warn('.browserslistrc file not found. You may want to manually add it and enable IE support.');
        }
        if (polyfillsFilePath) {
            const polyfillsData = (_a = tree.read(polyfillsFilePath)) === null || _a === void 0 ? void 0 : _a.toString();
            if (polyfillsData) {
                updatePolyfillsForIESupport(tree, polyfillsFilePath, polyfillsData);
            }
            else {
                context.logger.warn('polyfills.ts file not found OR empty. ' + animationsWarn);
            }
        }
        else {
            context.logger.warn('polyfills.ts file path not found. ' + animationsWarn);
        }
    }
});
const addNormalize = (options) => (tree, context) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.resetCss) {
        const workspaceHost = util_1.createHost(tree);
        const { workspace } = yield core_1.workspaces.readWorkspace(tree.root.path, util_1.createHost(tree));
        const result = add_normalize_1.addResetCss(workspace, tree);
        yield core_1.workspaces.writeWorkspace(workspace, workspaceHost);
        if (!result) {
            context.logger.warn(`Could not complete adding reset styles. Those may need to be added manually.`);
        }
    }
});
exports.default = (options) => schematics_1.chain([
    readInput(options),
    addNormalize(options),
    dependency_handler_1.addDependencies(options),
    package_handler_1.installPackageJsonDependencies(options),
    dependency_handler_1.logSuccess(options)
]);
