{"version":3,"file":"chip.component.d.ts","sources":["chip.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, ElementRef, Renderer2, TemplateRef } from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxDragDirective, IDragBaseEventArgs, IDragStartEventArgs, IDropBaseEventArgs, IDropDroppedEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { IBaseEventArgs } from '../core/utils';\nexport interface IBaseChipEventArgs extends IBaseEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipComponent;\n}\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n/**\n * Chip is compact visual component that displays information in an obround.\n *\n * @igxModule IgxChipsModule\n *\n * @igxTheme igx-chip-theme\n *\n * @igxKeywords chip\n *\n * @igxGroup display\n *\n * @remarks\n * The Ignite UI Chip can be templated, deleted, and selected.\n * Multiple chips can be reordered and visually connected to each other.\n * Chips reside in a container called chips area which is responsible for managing the interactions between the chips.\n *\n * @example\n * ```html\n * <igx-chip class=\"chipStyle\" [id]=\"901\" [draggable]=\"true\" [removable]=\"true\" (remove)=\"chipRemoved($event)\">\n *    <igx-avatar class=\"chip-avatar-resized\" igxPrefix roundShape=\"true\"></igx-avatar>\n * </igx-chip>\n * ```\n */\nexport declare class IgxChipComponent extends DisplayDensityBase {\n    cdr: ChangeDetectorRef;\n    elementRef: ElementRef;\n    private renderer;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    id: string;\n    /**\n     * An @Input property that sets the value of `tabindex` attribute. If not provided it will use the element's tabindex if set.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [tabIndex]=\"1\"></igx-chip>\n     * ```\n     */\n    set tabIndex(value: number);\n    get tabIndex(): number;\n    /**\n     * An @Input property that stores data related to the chip.\n     *\n     * @example\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    data: any;\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    draggable: boolean;\n    /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    animateOnRelease: boolean;\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    hideBaseOnDrag: boolean;\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    removable: boolean;\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    removeIcon: TemplateRef<any>;\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    selectable: boolean;\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    selectIcon: TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    class: string;\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [(selected)]=\"model.isSelected\">\n     * ```\n     */\n    set selected(newValue: boolean);\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    get selected(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    selectedChange: EventEmitter<boolean>;\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    set color(newColor: any);\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    get color(): any;\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (moveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    moveStart: EventEmitter<IBaseChipEventArgs>;\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (moveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    moveEnd: EventEmitter<IBaseChipEventArgs>;\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (remove)=\"remove($event)\">\n     * ```\n     */\n    remove: EventEmitter<IBaseChipEventArgs>;\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (click)=\"chipClick($event)\">\n     * ```\n     */\n    chipClick: EventEmitter<IChipClickEventArgs>;\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (selectedChanging)=\"chipSelect($event)\">\n     * ```\n     */\n    selectedChanging: EventEmitter<IChipSelectEventArgs>;\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (selectedChanged)=\"chipSelectEnd($event)\">\n     * ```\n     */\n    selectedChanged: EventEmitter<IBaseChipEventArgs>;\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (keyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    keyDown: EventEmitter<IChipKeyDownEventArgs>;\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    dragEnter: EventEmitter<IChipEnterDragAreaEventArgs>;\n    /**\n     * @hidden\n     * @internal\n     */\n    get hostClass(): string;\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     *\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    dragDirective: IgxDragDirective;\n    /**\n     * @hidden\n     * @internal\n     */\n    chipArea: ElementRef;\n    /**\n     * @hidden\n     * @internal\n     */\n    selectContainer: ElementRef;\n    /**\n     * @hidden\n     * @internal\n     */\n    defaultRemoveIcon: TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    defaultSelectIcon: TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    get removeButtonTemplate(): TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    get selectIconTemplate(): TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    get ghostClass(): string;\n    /**\n     * @hidden\n     * @internal\n     */\n    hideBaseElement: boolean;\n    protected _tabIndex: any;\n    protected _selected: boolean;\n    protected _selectedItemClass: string;\n    protected _movedWhileRemoving: boolean;\n    constructor(cdr: ChangeDetectorRef, elementRef: ElementRef, renderer: Renderer2, _displayDensityOptions: IDisplayDensityOptions);\n    /**\n     * @hidden\n     * @internal\n     */\n    keyEvent(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    selectClass(condition: boolean): any;\n    onSelectTransitionDone(event: any): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipKeyDown(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onRemoveBtnKeyDown(event: KeyboardEvent): void;\n    onRemoveMouseDown(event: PointerEvent | MouseEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onRemoveClick(event: MouseEvent | TouchEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onRemoveTouchMove(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onRemoveTouchEnd(event: TouchEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipDragStart(event: IDragStartEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipDragEnd(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipMoveEnd(event: IDragBaseEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipGhostCreate(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipGhostDestroy(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipDragClicked(event: IDragBaseEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipDragEnterHandler(event: IDropBaseEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onChipDrop(event: IDropDroppedEventArgs): void;\n    protected changeSelection(newValue: boolean, srcEvent?: any): void;\n}\n"]}