{"version":3,"file":"card.component.d.ts","sources":["card.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, OnChanges, SimpleChanges } from '@angular/core';\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\nexport declare class IgxCardMediaDirective {\n    /** @hidden @internal */\n    cssClass: string;\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     *\n     * @example\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    width: string;\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     *\n     * @example\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    height: string;\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    role: string;\n}\n/**\n * IgxCardHeader is container for the card header\n */\nexport declare class IgxCardHeaderComponent {\n    /** @hidden @internal */\n    cssClass: string;\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     *\n     * @example\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    vertical: boolean;\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     *\n     * @example\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    role: string;\n}\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\nexport declare class IgxCardThumbnailDirective {\n}\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\nexport declare class IgxCardHeaderTitleDirective {\n    /** @hidden @internal */\n    cssClass: string;\n}\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\nexport declare class IgxCardHeaderSubtitleDirective {\n    /** @hidden @internal */\n    cssClass: string;\n}\n/**\n * IgxCardContent is container for the card content.\n */\nexport declare class IgxCardContentDirective {\n    /** @hidden @internal */\n    cssClass: string;\n}\n/**\n * IgxCardFooter is container for the card footer\n */\nexport declare class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     *\n     * @example\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    role: string;\n}\n/**\n * Card provides a way to display organized content in appealing way.\n *\n * @igxModule IgxCardModule\n *\n * @igxTheme igx-card-theme, igx-icon-theme, igx-button-theme\n *\n * @igxKeywords card, button, avatar, icon\n *\n * @igxGroup Layouts\n *\n * @remarks\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * @example\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\nexport declare const IgxCardType: {\n    ELEVATED: \"elevated\";\n    OUTLINED: \"outlined\";\n};\nexport declare type IgxCardType = (typeof IgxCardType)[keyof typeof IgxCardType];\nexport declare class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     *\n     * @example\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     */\n    id: string;\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     *\n     * @example\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    role: string;\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `elevated`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     *\n     * @example\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    type: IgxCardType | string;\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    get isOutlinedCard(): boolean;\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     *\n     * @example\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    horizontal: boolean;\n}\nexport declare const IgxCardActionsLayout: {\n    START: \"start\";\n    JUSTIFY: \"justify\";\n};\nexport declare type IgxCardActionsLayout = (typeof IgxCardActionsLayout)[keyof typeof IgxCardActionsLayout];\n/**\n * IgxCardActions is container for the card actions.\n */\nexport declare class IgxCardActionsComponent implements OnInit, OnChanges {\n    card: IgxCardComponent;\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     *\n     * @example\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    layout: IgxCardActionsLayout | string;\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    vertical: boolean;\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    get isJustifyLayout(): boolean;\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     *\n     * @example\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    reverse: boolean;\n    private isVerticalSet;\n    constructor(card: IgxCardComponent);\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit(): void;\n}\n/**\n * @hidden\n */\nexport declare class IgxCardModule {\n}\n"]}