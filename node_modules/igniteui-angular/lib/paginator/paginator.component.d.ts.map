{"version":3,"file":"paginator.component.d.ts","sources":["paginator.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';\nimport { OverlaySettings } from '../services/public_api';\nimport { IPaginatorResourceStrings } from '../core/i18n/paginator-resources';\nexport declare class IgxPaginatorComponent extends DisplayDensityBase {\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    /**\n     * An @Input property that sets if the pager in the paginator should be enabled.\n     * ```html\n     * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    pagerEnabled: boolean;\n    /**\n     * An @Input property that sets if the pager in the paginator should be hidden.\n     * ```html\n     * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    pagerHidden: boolean;\n    /**\n     * An @Input property that sets if the dropdown in the paginator should be enabled.\n     * ```html\n     * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    dropdownEnabled: boolean;\n    /**\n     * An @Input property that sets if the dropdown in the paginator should be hidden.\n     * ```html\n     * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    dropdownHidden: boolean;\n    /**\n     * @deprecated Use 'resourceStrings' instead.\n     * An @Input property, sets number of label of the select.\n     * The default is 'Items per page' localized string.\n     * ```html\n     * <igx-paginator label=\"My custom label\"></igx-paginator>\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    selectLabel: any;\n    /**\n     * @deprecated Use 'resourceStrings' instead.\n     * An @Input property, sets a preposition between the current page and total pages.\n     * The default is 'of' localized string.\n     * @memberof IgxPaginatorComponent\n     */\n    prepositionPage: any;\n    /**\n     * Emitted when `perPage` property value of the paginator is changed.\n     *\n     * @example\n     * ```html\n     * <igx-paginator (perPageChange)=\"onPerPageChange($event)\"></igx-paginator>\n     * ```\n     * ```typescript\n     * public onPerPageChange(perPage: number) {\n     *   this.perPage = perPage;\n     * }\n     * ```\n     */\n    perPageChange: EventEmitter<number>;\n    /**\n     * Emitted after the current page is changed.\n     *\n     * @example\n     * ```html\n     * <igx-paginator (pageChange)=\"onPageChange($event)\"></igx-paginator>\n     * ```\n     * ```typescript\n     * public onPageChange(page: number) {\n     *   this.currentPage = page;\n     * }\n     * ```\n     */\n    pageChange: EventEmitter<number>;\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    totalPages: number;\n    protected _page: number;\n    protected _totalRecords: number;\n    protected _selectOptions: any;\n    protected _perPage: number;\n    private _resourceStrings;\n    private _overlaySettings;\n    private defaultSelectValues;\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    get classCosy(): boolean;\n    get classCompact(): boolean;\n    get classComfortable(): boolean;\n    /**\n     * An @Input property, sets current page of the `IgxPaginatorComponent`.\n     * The default is 0.\n     * ```typescript\n     * let page = this.paginator.page;\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    get page(): number;\n    set page(value: number);\n    /**\n     * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n     * The default is 15.\n     * ```typescript\n     * let itemsPerPage = this.paginator.perPage;\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    get perPage(): number;\n    set perPage(value: number);\n    /**\n     * An @Input property that sets the total records.\n     * ```typescript\n     * let totalRecords = this.paginator.totalRecords;\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    get totalRecords(): number;\n    set totalRecords(value: number);\n    /**\n     * An @Input property that sets custom options in the select of the paginator\n     * ```typescript\n     * let options = this.paginator.selectOptions;\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    get selectOptions(): Array<number>;\n    set selectOptions(value: Array<number>);\n    /**\n     * An @Input property that sets custom OverlaySettings.\n     * ```html\n     * <igx-paginator [overlaySettings] = \"customOverlaySettings\"></igx-paginator>\n     * ```\n     */\n    get overlaySettings(): OverlaySettings;\n    set overlaySettings(value: OverlaySettings);\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    set resourceStrings(value: IPaginatorResourceStrings);\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): IPaginatorResourceStrings;\n    constructor(_displayDensityOptions: IDisplayDensityOptions);\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean;\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean;\n    /**\n     * Returns if the first pager buttons should be disabled\n     */\n    get isFirstPageDisabled(): boolean;\n    /**\n     * Returns if the last pager buttons should be disabled\n     */\n    get isLastPageDisabled(): boolean;\n    /**\n     * Sets DisplayDensity for the <select> inside the paginator\n     *\n     * @hidden\n     */\n    paginatorSelectDisplayDensity(): string;\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    nextPage(): void;\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n     *\n     * @memberof IgxPaginatorComponent\n     */\n    previousPage(): void;\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.paginator.paginate(1);\n     * ```\n     *\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    paginate(val: number): void;\n    private sortUniqueOptions;\n}\nexport declare class IgxPaginatorModule {\n}\n"]}