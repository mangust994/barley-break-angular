{"version":3,"file":"combo.component.d.ts","sources":["combo.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnInit, OnDestroy, TemplateRef, Injector } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IBaseEventArgs, IBaseCancelableBrowserEventArgs, IBaseCancelableEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconService } from '../icon/public_api';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { OverlaySettings } from '../services/public_api';\nimport { DisplayDensityBase, IDisplayDensityOptions } from '../core/density';\nimport { IgxComboBase } from './combo.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport { IgxInputGroupType } from '../input-group/public_api';\nexport declare enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL = 0,\n    /**\n     * Combo with valid state.\n     */\n    VALID = 1,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID = 2\n}\n/** The filtering criteria to be applied on data search */\nexport interface IComboFilteringOptions {\n    /** Defines filtering case-sensitivity */\n    caseSensitive: boolean;\n}\n/** Event emitted when an igx-combo's selection is changing */\nexport interface IComboSelectionChangeEventArgs extends IBaseCancelableEventArgs {\n    /** An array containing the values that are currently selected */\n    oldSelection: any[];\n    /** An array containing the values that will be selected after this event */\n    newSelection: any[];\n    /** An array containing the values that will be added to the selection (if any) */\n    added: any[];\n    /** An array containing the values that will be removed from the selection (if any) */\n    removed: any[];\n    /** The text that will be displayed in the combo text box */\n    displayText: string;\n    /** The user interaction that triggered the selection change */\n    event?: Event;\n}\n/** Event emitted when the igx-combo's search input changes */\nexport interface IComboSearchInputEventArgs extends IBaseCancelableEventArgs {\n    /** The text that has been typed into the search input */\n    searchText: string;\n}\nexport interface IComboItemAdditionEvent extends IBaseEventArgs {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\nexport declare class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit, OnDestroy, EditorProvider {\n    protected elementRef: ElementRef;\n    protected cdr: ChangeDetectorRef;\n    protected selection: IgxSelectionAPIService;\n    protected comboAPI: IgxComboAPIService;\n    private _iconService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    private _inputGroupType;\n    private _injector;\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n    overlaySettings: OverlaySettings;\n    /** @hidden @internal */\n    inputGroup: IgxInputGroupComponent;\n    /** @hidden @internal */\n    comboInput: IgxInputDirective;\n    /**\n     * @hidden @internal\n     */\n    dropdown: IgxComboDropDownComponent;\n    /**\n     * @hidden @internal\n     */\n    searchInput: ElementRef<HTMLInputElement>;\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean;\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    itemTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    headerTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    footerTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    headerItemTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    addItemTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--empty\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    emptyTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    toggleIconTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    clearIconTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    virtualScrollContainer: IgxForOfDirective<any>;\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    onSelectionChange: EventEmitter<IComboSelectionChangeEventArgs>;\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    onOpening: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    onOpened: EventEmitter<void>;\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    onClosing: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    onClosed: EventEmitter<void>;\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    onAddition: EventEmitter<IComboItemAdditionEvent>;\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    onSearchInput: EventEmitter<IComboSearchInputEventArgs>;\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    onDataPreLoad: EventEmitter<IForOfState>;\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n     */\n    id: string;\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    width: string;\n    /**\n     * @hidden @internal\n     */\n    cssClass: string;\n    /**\n     * @hidden @internal\n     */\n    role: string;\n    /**\n     * @hidden @internal\n     */\n    get ariaExpanded(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get hasPopUp(): string;\n    /**\n     * @hidden @internal\n     */\n    get ariaOwns(): string;\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    allowCustomValues: boolean;\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n     */\n    get itemsMaxHeight(): number;\n    set itemsMaxHeight(val: number);\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    itemsWidth: string;\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    get itemHeight(): number;\n    set itemHeight(val: number);\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    placeholder: any;\n    /**\n     * @hidden @internal\n     */\n    get inputEmpty(): boolean;\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    searchPlaceholder: string;\n    /**\n     * Defines whether the caseSensitive icon should be shown in the search input\n     *\n     * ```typescript\n     * // get\n     * let myComboShowSearchCaseIcon = this.combo.showSearchCaseIcon;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [showSearchCaseIcon]='true'></igx-combo>\n     * ```\n     */\n    showSearchCaseIcon: boolean;\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    get data(): any[];\n    set data(val: any[]);\n    /**\n     * Combo value data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    valueKey: string;\n    set displayKey(val: string);\n    /**\n     * Combo text data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey(): string;\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    set groupKey(val: string);\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    get groupKey(): string;\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     * <igx-combo [filterable]=\"false\">\n     * ```\n     */\n    filterable: boolean;\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     * <igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    ariaLabelledBy: string;\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     * <igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     * <igx-combo [type]=\"'line'\">\n     * ```\n     */\n    get type(): IgxInputGroupType;\n    set type(val: IgxInputGroupType);\n    /**\n     * An @Input property that controls whether the combo's search box\n     * should be focused after the `onOpened` event is called\n     * When `false`, the combo's list item container will be focused instead\n     */\n    autoFocusSearch: boolean;\n    protected dropdownContainer: ElementRef;\n    protected primitiveTemplate: TemplateRef<any>;\n    protected complexTemplate: TemplateRef<any>;\n    protected virtDir: IgxForOfDirective<any>;\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     */\n    get valid(): IgxComboState;\n    /**\n     * Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n     */\n    set valid(valid: IgxComboState);\n    /**\n     * @hidden @internal\n     */\n    get searchValue(): string;\n    set searchValue(val: string);\n    /**\n     * @hidden @internal\n     */\n    customValueFlag: boolean;\n    /**\n     * @hidden @internal\n     */\n    defaultFallbackGroup: string;\n    /**\n     * @hidden @internal\n     */\n    filteringOptions: IComboFilteringOptions;\n    /**\n     * @hidden @internal\n     */\n    filteringLogic: FilteringLogic;\n    /** @hidden @internal */\n    filterValue: string;\n    protected stringFilters: typeof IgxStringFilteringOperand;\n    protected booleanFilters: typeof IgxBooleanFilteringOperand;\n    protected _groupKey: string;\n    protected _displayKey: string;\n    protected _prevInputValue: string;\n    private _dataType;\n    private _searchValue;\n    private _type;\n    private ngControl;\n    private destroy$;\n    private _data;\n    private _filteredData;\n    private _itemHeight;\n    private _itemsMaxHeight;\n    private _remoteSelection;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    private _overlaySettings;\n    private _value;\n    private _valid;\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, selection: IgxSelectionAPIService, comboAPI: IgxComboAPIService, _iconService: IgxIconService, _displayDensityOptions: IDisplayDensityOptions, _inputGroupType: IgxInputGroupType, _injector: Injector);\n    /**\n     * @hidden @internal\n     */\n    onArrowDown(event: Event): void;\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event): void;\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n     */\n    get virtualizationState(): IForOfState;\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState);\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n     */\n    get totalItemCount(): number;\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number);\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string;\n    /**\n     * @hidden @internal\n     */\n    get filteredData(): any[];\n    /**\n     * @hidden @internal\n     */\n    set filteredData(val: any[]);\n    /**\n     * @hidden @internal\n     */\n    handleKeyUp(event: KeyboardEvent): void;\n    /**\n     * @hidden @internal\n     */\n    handleKeyDown(event: KeyboardEvent): void;\n    /**\n     * @hidden @internal\n     */\n    handleInputChange(event?: string): void;\n    /**\n     * @hidden @internal\n     */\n    get dataType(): string;\n    /**\n     * @hidden @internal\n     */\n    get isRemote(): boolean;\n    /**\n     * Returns if the specified itemID is selected\n     *\n     * @hidden\n     * @internal\n     */\n    isItemSelected(item: any): boolean;\n    /**\n     * Triggers change detection on the combo view\n     */\n    triggerCheck(): void;\n    /**\n     * @hidden @internal\n     */\n    isAddButtonVisible(): boolean;\n    /**\n     * @hidden @internal\n     */\n    handleSelectAll(evt: any): void;\n    /**\n     * @hidden @internal\n     */\n    addItemToCollection(): void;\n    /**\n     * @hidden @internal\n     */\n    focusSearchInput(opening?: boolean): void;\n    /**\n     * @hidden @internal\n     */\n    onBlur(): void;\n    /**\n     * @hidden @internal\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden @internal\n     */\n    writeValue(value: any[]): void;\n    /**\n     * @hidden @internal\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden @internal\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden @internal\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    getEditElement(): HTMLElement;\n    /**\n     * @hidden @internal\n     */\n    get template(): TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    get context(): any;\n    /**\n     * @hidden @internal\n     */\n    handleClearItems(event: Event): void;\n    /**\n     * A method that opens/closes the combo.\n     *\n     * ```html\n     * <button (click)=\"combo.toggle()\">Toggle Combo</button>\n     * <igx-combo #combo></igx-combo>\n     * ```\n     */\n    toggle(): void;\n    /**\n     * A method that opens the combo.\n     *\n     * ```html\n     * <button (click)=\"combo.open()\">Open Combo</button>\n     * <igx-combo #combo></igx-combo>\n     * ```\n     */\n    open(): void;\n    /**\n     * A method that closes the combo.\n     *\n     * ```html\n     * <button (click)=\"combo.close()\">Close Combo</button>\n     * <igx-combo #combo></igx-combo>\n     * ```\n     */\n    close(): void;\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n     */\n    get collapsed(): boolean;\n    /**\n     * Get current selection state\n     *\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    selectedItems(): any[];\n    /**\n     * Select defined items\n     *\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event): void;\n    /**\n     * Deselect defined items\n     *\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    deselectItems(items: Array<any>, event?: Event): void;\n    /**\n     * Select all (filtered) items\n     *\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    selectAllItems(ignoreFilter?: boolean, event?: Event): void;\n    /**\n     * Deselect all (filtered) items\n     *\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    deselectAllItems(ignoreFilter?: boolean, event?: Event): void;\n    /**\n     * Selects/Deselects a single item\n     *\n     * @param itemID the itemID of the specific item\n     * @param select If the item should be selected (true) or deselected (false)\n     *\n     * Without specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = null;\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem(items[0], true);\n     * ```\n     * With specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = 'field';\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * ```\n     */\n    setSelectedItem(itemID: any, select?: boolean, event?: Event): void;\n    /**\n     * Event handlers\n     *\n     * @hidden\n     * @internal\n     */\n    handleOpening(event: IBaseCancelableBrowserEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    handleOpened(): void;\n    /**\n     * @hidden @internal\n     */\n    handleClosing(event: IBaseCancelableBrowserEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    handleClosed(): void;\n    /**\n     * @hidden @internal\n     */\n    toggleCaseSensitive(): void;\n    protected setSelection(newSelection: Set<any>, event?: Event): void;\n    protected onStatusChanged: () => void;\n    protected manageRequiredAsterisk(): void;\n    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */\n    private registerRemoteEntries;\n    /**\n     * For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`\n     */\n    private getValueDisplayPairs;\n    private checkMatch;\n    /** Returns a string that should be populated in the combo's text box */\n    private concatDisplayText;\n    /**\n     * Constructs the combo display value\n     * If remote, caches the key displayText\n     * If not, just combine the object.displayKeys\n     */\n    private createDisplayText;\n    /** if there is a valueKey - map the keys to data items, else - just return the keys */\n    private convertKeysToItems;\n}\n/**\n * @hidden\n */\nexport declare class IgxComboModule {\n}\n"]}