{"version":3,"file":"dialog.component.d.ts","sources":["dialog.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit, AfterContentInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, PositionSettings } from '../services/public_api';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\nexport declare class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private elementRef;\n    private navService;\n    private static NEXT_ID;\n    private static readonly DIALOG_CLASS;\n    toggleRef: IgxToggleDirective;\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\"\n     *  leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\">\n     * </igx-dialog>\n     * ```\n     */\n    id: string;\n    /**\n     * Controls whether the dialog should be shown as modal. Defaults to `true`\n     * ```html\n     * <igx-dialog [isModal]=\"false\" ></igx-dialog>\n     * ```\n     */\n    get isModal(): boolean;\n    set isModal(val: boolean);\n    /**\n     * Controls whether the dialog should close when `Esc` key is pressed. Defaults to `true`\n     * ```html\n     * <igx-dialog [closeOnEscape]=\"false\" ></igx-dialog>\n     * ```\n     */\n    get closeOnEscape(): boolean;\n    set closeOnEscape(val: boolean);\n    /**\n     * An @Input property controlling the `title` of the dialog.\n     * ```html\n     * <igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    title: string;\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     * ```html\n     * <igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    message: string;\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     * ```html\n     * <igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    leftButtonLabel: string;\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     * ```html\n     * <igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    leftButtonType: string;\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    leftButtonColor: string;\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    leftButtonBackgroundColor: string;\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    leftButtonRipple: string;\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     * ```html\n     * <igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    rightButtonLabel: string;\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     * ```html\n     * <igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    rightButtonType: string;\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    rightButtonColor: string;\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    rightButtonBackgroundColor: string;\n    /**\n     * An @Input property to set the right button `ripple`.\n     * ```html\n     * <igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    rightButtonRipple: string;\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     * ```html\n     * <igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     * rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     * </igx-dialog>\n     * ```\n     */\n    get closeOnOutsideSelect(): boolean;\n    set closeOnOutsideSelect(val: boolean);\n    /**\n     * Get the position and animation settings used by the dialog.\n     * ```typescript\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     * let currentPosition: PositionSettings = this.alert.positionSettings\n     * ```\n     */\n    get positionSettings(): PositionSettings;\n    /**\n     * Set the position and animation settings used by the dialog.\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     *  public newPositionSettings: PositionSettings = {\n     *      openAnimation: useAnimation(slideInTop, { params: { duration: '2000ms' } }),\n     *      closeAnimation: useAnimation(slideOutBottom, { params: { duration: '2000ms'} }),\n     *      horizontalDirection: HorizontalAlignment.Left,\n     *      verticalDirection: VerticalAlignment.Middle,\n     *      horizontalStartPoint: HorizontalAlignment.Left,\n     *      verticalStartPoint: VerticalAlignment.Middle,\n     *      minSize: { height: 100, width: 100 }\n     *  };\n     * this.alert.positionSettings = this.newPositionSettings;\n     * ```\n     */\n    set positionSettings(settings: PositionSettings);\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    tabindex: number;\n    /**\n     * An event that is emitted before the dialog is opened.\n     * ```html\n     * <igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     * </igx-dialog>\n     * ```\n     */\n    onOpen: EventEmitter<IDialogCancellableEventArgs>;\n    /**\n     * An event that is emitted after the dialog is opened.\n     * ```html\n     * <igx-dialog (onOpened)=\"onDialogOpenedHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     * </igx-dialog>\n     * ```\n     */\n    onOpened: EventEmitter<IDialogEventArgs>;\n    /**\n     * An event that is emitted before the dialog is closed.\n     * ```html\n     * <igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     * </igx-dialog>\n     * ```\n     */\n    onClose: EventEmitter<IDialogCancellableEventArgs>;\n    /**\n     * An event that is emitted after the dialog is closed.\n     * ```html\n     * <igx-dialog (onClosed)=\"onDialogClosedHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     * </igx-dialog>\n     * ```\n     */\n    onClosed: EventEmitter<IDialogEventArgs>;\n    /**\n     * An event that is emitted when the left button is clicked.\n     * ```html\n     * <igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     * </igx-dialog>\n     * ```\n     */\n    onLeftButtonSelect: EventEmitter<IDialogEventArgs>;\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     * <igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     * #dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     * rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     * </igx-dialog>\n     * ```\n     */\n    onRightButtonSelect: EventEmitter<IDialogEventArgs>;\n    /**\n     * @hidden\n     */\n    isOpenChange: EventEmitter<boolean>;\n    /**\n     * @hidden\n     */\n    get element(): any;\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     * ```typescript\n     * @ViewChild(\"MyDialog\")\n     * public dialog: IgxDialogComponent;\n     * ngAfterViewInit() {\n     *     let dialogState = this.dialog.state;\n     * }\n     * ```\n     */\n    get state(): string;\n    /**\n     * State of the dialog.\n     *\n     * ```typescript\n     * // get\n     * let dialogIsOpen = this.dialog.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-dialog [isOpen]='false'></igx-dialog>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-dialog [(isOpen)]='model.isOpen'></igx-dialog>\n     * ```\n     */\n    get isOpen(): boolean;\n    set isOpen(value: boolean);\n    get isCollapsed(): boolean;\n    /**\n     * Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     * ```typescript\n     * @ViewChild(\"MyDialog\")\n     * public dialog: IgxDialogComponent;\n     * ngAfterViewInit() {\n     *     let dialogRole = this.dialog.role;\n     * }\n     *  ```\n     */\n    get role(): \"dialog\" | \"alertdialog\" | \"alert\";\n    /**\n     * Returns the value of the title id.\n     * ```typescript\n     *  @ViewChild(\"MyDialog\")\n     * public dialog: IgxDialogComponent;\n     * ngAfterViewInit() {\n     *     let dialogTitle = this.dialog.titleId;\n     * }\n     * ```\n     */\n    get titleId(): string;\n    protected destroy$: Subject<boolean>;\n    private _positionSettings;\n    private _overlayDefaultSettings;\n    private _closeOnOutsideSelect;\n    private _closeOnEscape;\n    private _isModal;\n    private _titleId;\n    constructor(elementRef: ElementRef, navService: IgxNavigationService);\n    ngAfterContentInit(): void;\n    /**\n     * A method that opens the dialog.\n     *\n     * @memberOf {@link IgxDialogComponent}\n     * ```html\n     * <button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     * <igx-dialog #dialog></igx-dialog>\n     * ```\n     */\n    open(overlaySettings?: OverlaySettings): void;\n    /**\n     * A method that that closes the dialog.\n     *\n     *  @memberOf {@link IgxDialogComponent}\n     * ```html\n     * <button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     * <igx-dialog #dialog></igx-dialog>\n     * ```\n     */\n    close(): void;\n    /**\n     * A method that opens/closes the dialog.\n     *\n     * @memberOf {@link IgxDialogComponent}\n     * ```html\n     * <button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     * <igx-dialog #dialog></igx-dialog>\n     * ```\n     */\n    toggle(): void;\n    /**\n     * @hidden\n     */\n    onDialogSelected(event: any): void;\n    /**\n     * @hidden\n     */\n    onInternalLeftButtonSelect(event: any): void;\n    /**\n     * @hidden\n     */\n    onInternalRightButtonSelect(event: any): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    private emitCloseFromDialog;\n    private emitClosedFromDialog;\n    private emitOpenedFromDialog;\n}\nexport interface IDialogEventArgs extends IBaseEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\nexport interface IDialogCancellableEventArgs extends IDialogEventArgs, CancelableEventArgs {\n}\n/**\n * @hidden\n */\nexport declare class IgxDialogModule {\n}\n"]}