{"version":3,"file":"tabbar.component.d.ts","sources":["tabbar.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, QueryList, TemplateRef, OnDestroy } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\nexport interface ISelectTabEventArgs extends IBaseEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\nexport declare class IgxTabTemplateDirective {\n    template: TemplateRef<any>;\n    constructor(template: TemplateRef<any>);\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\nexport declare class IgxBottomNavComponent implements AfterViewInit, OnDestroy {\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    viewTabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    contentTabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    get tabs(): QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    panels: QueryList<IgxTabPanelComponent>;\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    onTabSelected: EventEmitter<ISelectTabEventArgs>;\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    onTabDeselected: EventEmitter<ISelectTabEventArgs>;\n    private readonly _currentBottomNavId;\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    id: string;\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    selectedIndex: number;\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    get itemStyle(): string;\n    /**\n     * @hidden\n     */\n    get hasContentTabs(): boolean;\n    /**\n     * @hidden\n     */\n    private readonly _itemStyle;\n    private _panelsChanges$;\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     *\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent;\n    /**\n     * @hidden\n     */\n    selectedPanelHandler(args: any): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    getTabId(index: number): string;\n    /**\n     * @hidden\n     */\n    getTabPanelId(index: number): string;\n    private setPanelsAttributes;\n    /**\n     * @hidden\n     */\n    private _deselectPanel;\n    private _deselectTab;\n}\nexport declare class IgxTabPanelComponent implements AfterContentInit {\n    private _tabBar;\n    private _element;\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    label: string;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    icon: string;\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    disabled: boolean;\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    role: string;\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    get styleClass(): boolean;\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    get isSelected(): boolean;\n    set isSelected(newValue: boolean);\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    get itemStyle(): string;\n    /**\n     * Returns the native element of the tab-panel component\n     * ```typescript\n     *  const mytabPanelElement: HTMLElement = tabPanel.nativeElement;\n     * ```\n     */\n    get nativeElement(): any;\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent;\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number;\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    get index(): number;\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any>;\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>);\n    /**\n     * @hidden\n     */\n    protected tabTemplate: IgxTabTemplateDirective;\n    /**\n     * @hidden\n     */\n    private _tabTemplate;\n    /**\n     * @hidden\n     */\n    private readonly _itemStyle;\n    /**\n     * @hidden\n     */\n    private _isSelected;\n    constructor(_tabBar: IgxBottomNavComponent, _element: ElementRef);\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     *\n     * @memberof IgxTabPanelComponent\n     */\n    select(): void;\n}\nexport declare class IgxTabComponent {\n    private _tabBar;\n    private _element;\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    role: string;\n    /**\n     * @hidden @internal\n     */\n    ariaLabel: string;\n    /**\n     * @hidden @internal\n     */\n    ariaDisabled: boolean;\n    /**\n     * @hidden @internal\n     */\n    ariaSelected: boolean;\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    relatedPanel: IgxTabPanelComponent;\n    /**\n     * @hidden @internal\n     * Set to true when the tab is automatically generated from the IgxBottomNavComponent when tab panels are defined.\n     */\n    autoGenerated: boolean;\n    /** @hidden */\n    protected defaultTabTemplate: TemplateRef<any>;\n    /** @hidden */\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n    /**\n     * @hidden\n     */\n    private _label;\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    get label(): string;\n    set label(newValue: string);\n    /**\n     * @hidden\n     */\n    private _icon;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    get icon(): string;\n    set icon(newValue: string);\n    /**\n     * @hidden\n     */\n    private _changesCount;\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number;\n    private _disabled;\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    get disabled(): boolean;\n    set disabled(newValue: boolean);\n    private _selected;\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    set isSelected(newValue: boolean);\n    get isSelected(): boolean;\n    get cssClassSelected(): boolean;\n    get cssClassDisabled(): boolean;\n    get cssClass(): boolean;\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    get index(): number;\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    get template(): TemplateRef<any>;\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    get context(): any;\n    constructor(_tabBar: IgxBottomNavComponent, _element: ElementRef);\n    /**\n     * @hidden\n     */\n    onClick(): void;\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     *\n     * @memberof IgxTabComponent\n     */\n    select(): void;\n    elementRef(): ElementRef;\n}\n/**\n * @hidden\n */\nexport declare class IgxBottomNavModule {\n}\n"]}