{"version":3,"file":"input-group.component.d.ts","sources":["input-group.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, QueryList, AfterContentInit, Renderer2 } from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\nimport { IgxInputGroupType } from './inputGroupType';\nimport { IInputResourceStrings } from '../core/i18n/input-resources';\ndeclare const IgxInputGroupTheme: {\n    Material: \"material\";\n    Fluent: \"fluent\";\n    Bootstrap: \"bootstrap\";\n    IndigoDesign: \"indigo-design\";\n};\n/**\n * Determines the Input Group theme.\n */\nexport declare type IgxInputGroupTheme = (typeof IgxInputGroupTheme)[keyof typeof IgxInputGroupTheme];\nexport declare class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase, AfterContentInit {\n    element: ElementRef<HTMLElement>;\n    private _inputGroupType;\n    private document;\n    private renderer;\n    /**\n     * Sets the resource strings.\n     * By default it uses EN resources.\n     */\n    set resourceStrings(value: IInputResourceStrings);\n    /**\n     * Returns the resource strings.\n     */\n    get resourceStrings(): IInputResourceStrings;\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     * ```typescript\n     *  @ViewChild(\"MyInputGroup\")\n     *  public inputGroup: IgxInputGroupComponent;\n     *  ngAfterViewInit(){\n     *  this.inputGroup.defaultClass = false;\n     * ```\n     * }\n     */\n    defaultClass: boolean;\n    /** @hidden */\n    hasPlaceholder: boolean;\n    /** @hidden */\n    isRequired: boolean;\n    /** @hidden */\n    isFocused: boolean;\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * Prevents automatically focusing the input when clicking on other elements in the input group (e.g. prefix or suffix).\n     *\n     * @remarks Automatic focus causes software keyboard to show on mobile devices.\n     *\n     * @example\n     * ```html\n     * <igx-input-group [suppressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    suppressInputAutofocus: boolean;\n    /** @hidden */\n    hasWarning: boolean;\n    /** @hidden */\n    protected hints: QueryList<IgxHintDirective>;\n    /** @hidden */\n    protected input: IgxInputDirective;\n    private _type;\n    private _filled;\n    private _variant;\n    private _resourceStrings;\n    /** @hidden */\n    get validClass(): boolean;\n    /** @hidden */\n    get invalidClass(): boolean;\n    /** @hidden */\n    get isFilled(): any;\n    /** @hidden */\n    get isDisplayDensityCosy(): boolean;\n    /** @hidden */\n    get isDisplayDensityComfortable(): boolean;\n    /** @hidden */\n    get isDisplayDensityCompact(): boolean;\n    /**\n     * An @Input property that sets how the input will be styled.\n     * Allowed values of type IgxInputGroupType.\n     * ```html\n     * <igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    set type(value: IgxInputGroupType);\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * The default is `line`.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     * }\n     * ```\n     */\n    get type(): IgxInputGroupType;\n    /**\n     * Sets the theme of the input.\n     * Allowed values of type IgxInputGroupTheme.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit() {\n     *  let inputTheme = 'fluent';\n     * }\n     */\n    set theme(variant: IgxInputGroupTheme);\n    /**\n     * Returns the theme of the input.\n     * The returned value is of tyep IgxInputGroupType.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit() {\n     *  let inputTheme = this.inputGroup.theme;\n     * }\n     */\n    get theme(): IgxInputGroupTheme;\n    constructor(element: ElementRef<HTMLElement>, _displayDensityOptions: IDisplayDensityOptions, _inputGroupType: IgxInputGroupType, document: any, renderer: Renderer2);\n    /** @hidden */\n    onClick(event: MouseEvent): void;\n    /** @hidden */\n    onPointerDown(event: PointerEvent): void;\n    /** @hidden @internal */\n    hintClickHandler(event: MouseEvent): void;\n    /** @hidden @internal */\n    ngAfterContentInit(): void;\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     * }\n     * ```\n     */\n    get hasHints(): boolean;\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let inputBorder = this.inputGroup.hasBorder;\n     * }\n     * ```\n     */\n    get hasBorder(): boolean;\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     * }\n     * ```\n     */\n    get isTypeLine(): boolean;\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     * }\n     * ```\n     */\n    get isTypeBox(): boolean;\n    /** @hidden @internal */\n    uploadButtonHandler(): void;\n    /** @hidden @internal */\n    clearValueHandler(): void;\n    /** @hidden @internal */\n    get isFileType(): boolean;\n    /** @hidden @internal */\n    get fileNames(): any;\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     * }\n     * ```\n     */\n    get isTypeBorder(): boolean;\n    /**\n     * Returns true if the `IgxInputGroupComponent` theme is Fluent.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeFluent = this.inputGroup.isTypeFluent;\n     * }\n     * ```\n     */\n    get isTypeFluent(): boolean;\n    /**\n     * Returns true if the `IgxInputGroupComponent` theme is Bootstrap.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeBootstrap = this.inputGroup.isTypeBootstrap;\n     * }\n     * ```\n     */\n    get isTypeBootstrap(): boolean;\n    /**\n     * Returns true if the `IgxInputGroupComponent` theme is Indigo.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeIndigo = this.inputGroup.isTypeIndigo;\n     * }\n     * ```\n     */\n    get isTypeIndigo(): boolean;\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     * }\n     * ```\n     */\n    get isTypeSearch(): boolean;\n    /** @hidden */\n    get filled(): boolean;\n    /** @hidden */\n    set filled(val: boolean);\n}\n/** @hidden */\nexport declare class IgxInputGroupModule {\n}\nexport {};\n"]}