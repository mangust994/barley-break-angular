{"version":3,"file":"select.component.d.ts","sources":["select.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { IDisplayDensityOptions } from '../core/density';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { CancelableEventArgs, IBaseCancelableBrowserEventArgs, IBaseCancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxDropDownItemBaseDirective } from '../drop-down/drop-down-item.base';\nimport { Navigate } from '../drop-down/drop-down.common';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { IgxInputDirective } from './../directives/input/input.directive';\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\nimport { IgxInputGroupType } from '../input-group/public_api';\n/** @hidden @internal */\nexport declare class IgxSelectToggleIconDirective {\n}\n/** @hidden @internal */\nexport declare class IgxSelectHeaderDirective {\n}\n/** @hidden @internal */\nexport declare class IgxSelectFooterDirective {\n}\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\nexport declare class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor, AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n    protected elementRef: ElementRef;\n    protected cdr: ChangeDetectorRef;\n    protected selection: IgxSelectionAPIService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    private _inputGroupType;\n    private _injector;\n    /** @hidden @internal */\n    inputGroup: IgxInputGroupComponent;\n    /** @hidden @internal */\n    input: IgxInputDirective;\n    /** @hidden @internal */\n    children: QueryList<IgxSelectItemComponent>;\n    /** @hidden @internal */\n    label: IgxLabelDirective;\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    placeholder: any;\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    overlaySettings: OverlaySettings;\n    /** @hidden @internal */\n    maxHeight: string;\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-select onOpening='handleOpening($event)'></igx-select>\n     * ```\n     */\n    onOpening: EventEmitter<IBaseCancelableEventArgs>;\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-select (onOpened)='handleOpened()'></igx-select>\n     * ```\n     */\n    onOpened: EventEmitter<void>;\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-select (onClosing)='handleClosing($event)'></igx-select>\n     * ```\n     */\n    onClosing: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-select (onClosed)='handleClosed()'></igx-select>\n     * ```\n     */\n    onClosed: EventEmitter<void>;\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    toggleIconTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectHeader>\n     *          <div class=\"select__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    headerTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectFooter>\n     *          <div class=\"select__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    footerTemplate: TemplateRef<any>;\n    private hintElement;\n    /** @hidden @internal */\n    width: string;\n    /** @hidden @internal do not use the drop-down container class */\n    cssClass: boolean;\n    /** @hidden @internal */\n    allowItemsFocus: boolean;\n    /** @hidden @internal */\n    height: string;\n    protected destroy$: Subject<boolean>;\n    private ngControl;\n    private _overlayDefaults;\n    private _value;\n    private _type;\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    get value(): any;\n    set value(v: any);\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The input-group default is `line`.\n     * ```html\n     * <igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    get type(): IgxInputGroupType;\n    set type(val: IgxInputGroupType);\n    /** @hidden @internal */\n    get selectionValue(): any;\n    /** @hidden @internal */\n    get selectedItem(): IgxSelectItemComponent;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, selection: IgxSelectionAPIService, _displayDensityOptions: IDisplayDensityOptions, _inputGroupType: IgxInputGroupType, _injector: Injector);\n    /** @hidden @internal */\n    writeValue: (value: any) => void;\n    /** @hidden @internal */\n    registerOnChange(fn: any): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: any): void;\n    /** @hidden @internal */\n    setDisabledState(isDisabled: boolean): void;\n    /** @hidden @internal */\n    getEditElement(): HTMLInputElement;\n    /** @hidden @internal */\n    selectItem(newSelection: IgxDropDownItemBaseDirective, event?: any): void;\n    /** @hidden @internal */\n    getFirstItemElement(): HTMLElement;\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    open(overlaySettings?: OverlaySettings): void;\n    inputGroupClick(event: MouseEvent, overlaySettings?: OverlaySettings): void;\n    /** @hidden @internal */\n    ngAfterContentInit(): void;\n    /**\n     * Event handlers\n     *\n     * @hidden @internal\n     */\n    handleOpening(event: CancelableEventArgs): void;\n    /** @hidden @internal */\n    handleOpened(): void;\n    /** @hidden @internal */\n    handleClosing(event: any): void;\n    /** @hidden @internal */\n    handleClosed(): void;\n    /** @hidden @internal */\n    onBlur(): void;\n    /** @hidden @internal */\n    onFocus(): void;\n    /**\n     * @hidden @internal\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden @internal\n     * Prevent input blur - closing the items container on Header/Footer Template click.\n     */\n    mousedownHandler(event: any): void;\n    protected onStatusChanged(): void;\n    protected navigate(direction: Navigate, currentIndex?: number): void;\n    protected manageRequiredAsterisk(): void;\n    private setSelection;\n}\n"]}