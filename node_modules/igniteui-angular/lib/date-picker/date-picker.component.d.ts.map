{"version":3,"file":"date-picker.component.d.ts","sources":["date-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnDestroy, ElementRef, TemplateRef, ChangeDetectorRef, NgModuleRef, OnInit, AfterViewInit, Injector, AfterViewChecked, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor, ValidationErrors } from '@angular/forms';\nimport { IgxCalendarComponent, IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective, WEEKDAYS } from '../calendar/public_api';\nimport { IgxInputDirective, IgxInputGroupComponent, IgxLabelDirective } from '../input-group/public_api';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, IgxOverlayService } from '../services/public_api';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { IBaseEventArgs, IBaseCancelableBrowserEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { InteractionMode } from '../core/enums';\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport declare const PredefinedFormatOptions: {\n    ShortDate: \"shortDate\";\n    MediumDate: \"mediumDate\";\n    LongDate: \"longDate\";\n    FullDate: \"fullDate\";\n};\nexport declare type PredefinedFormatOptions = (typeof PredefinedFormatOptions)[keyof typeof PredefinedFormatOptions];\n/**\n * Date Picker displays a popup calendar that lets users select a single date.\n *\n * @igxModule IgxDatePickerModule\n * @igxTheme igx-calendar-theme, igx-icon-theme\n * @igxGroup Scheduling\n * @igxKeywords  datepicker, calendar, schedule, date\n * @example\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\nexport declare class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {\n    private _overlayService;\n    element: ElementRef;\n    private _cdr;\n    private _moduleRef;\n    private _injector;\n    private _renderer;\n    /**\n     * Gets/Sets the `IgxDatePickerComponent` label.\n     *\n     * @remarks\n     * The default label is 'Date'.\n     * @example\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     * @deprecated Use igxLabel inside the date picker to change the label:\n     * ````html\n     * <igx-date-picker>\n     *      <label igxLabel>Custom label</label>\n     * </igx-date-picker>\n     * ````\n     * to set a custom label.\n     */\n    get label(): string;\n    set label(v: string);\n    get labelInternal(): string;\n    /** @hidden @internal */\n    get labelTemplate(): IgxLabelDirective;\n    /**\n     * Gets/Sets the `IgxDatePickerComponent` label visibility.\n     *\n     * @remarks\n     * By default the visibility is set to true.\n     * @example\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    labelVisibility: boolean;\n    /**\n     * Gets/Sets the locales.\n     *\n     * @remarks Default locale is en.\n     * @example\n     * ```html\n     * <igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     * ```\n     */\n    locale: 'en';\n    /**\n     * Gets/Sets the default template editor's tabindex.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker editorTabIndex=\"1\"></igx-date-picker>\n     * ```\n     */\n    editorTabIndex: number;\n    /**\n     * Gets/Sets on which day the week starts.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    weekStart: WEEKDAYS | number;\n    /**\n     * Gets the format options of the `IgxDatePickerComponent`.\n     *\n     * @example\n     * ```typescript\n     * let formatOptions = this.datePicker.formatOptions;\n     * ```\n     */\n    get formatOptions(): IFormatOptions;\n    /**\n     * Sets the format options of the `IgxDatePickerComponent`.\n     *\n     * @example\n     * ```typescript\n     * this.datePicker.formatOptions = {  day: \"numeric\",  month: \"long\", weekday: \"long\", year: \"numeric\"};\n     * ```\n     */\n    set formatOptions(formatOptions: IFormatOptions);\n    /**\n     * Gets/Sets whether the inactive dates will be hidden.\n     *\n     * @remarks\n     * Apllies to dates that are out of the current month.\n     * Default value is `false`.\n     * @example\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    hideOutsideDays: boolean;\n    /**\n     * Gets/Sets the number of month views displayed.\n     *\n     * @remarks\n     * Default value is `1`.\n     * @example\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    monthsViewNumber: number;\n    /**\n     * Show/hide week numbers\n     *\n     * @exmpale\n     * ```html\n     * <igx-date-picker [showWeekNumbers]=\"true\"></igx-date-picker>\n     * ``\n     */\n    showWeekNumbers: boolean;\n    /**\n     * Gets/Sets the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *\n     * @example\n     * ```typescript\n     * let format = this.datePicker.format;\n     * this.datePicker.format = 'yyyy-M-d';\n     * ```\n     */\n    get format(): string;\n    set format(format: string);\n    /**\n     * Gets/Sets the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *\n     *  @example\n     * ```typescript\n     * let mask = this.datePicker.mask;\n     * ```\n     */\n    mask: string;\n    /**\n     * Gets/Sets the format views of the `IgxDatePickerComponent`.\n     *\n     * @example\n     * ```typescript\n     * let formatViews = this.datePicker.formatViews;\n     *  this.datePicker.formatViews = {day:false, month: false, year:false};\n     * ```\n     */\n    get formatViews(): IFormatViews;\n    set formatViews(formatViews: IFormatViews);\n    /**\n     * Gets/Sets the disabled dates descriptors.\n     *\n     * @example\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];\n     * ```\n     */\n    get disabledDates(): DateRangeDescriptor[];\n    set disabledDates(value: DateRangeDescriptor[]);\n    /**\n     * Gets/Sets the special dates descriptors.\n     *\n     * @example\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];\n     * ```\n     */\n    get specialDates(): DateRangeDescriptor[];\n    set specialDates(value: DateRangeDescriptor[]);\n    /**\n     * Gets/Sets the modal overlay settings.\n     */\n    get modalOverlaySettings(): OverlaySettings;\n    set modalOverlaySettings(value: OverlaySettings);\n    /**\n     * Gets/Sets the drop-down overlay settings.\n     */\n    get dropDownOverlaySettings(): OverlaySettings;\n    set dropDownOverlaySettings(value: OverlaySettings);\n    /**\n     * Gets the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *\n     *  @example\n     * ```typescript\n     * let selectedDate = this.datePicker.displayData;\n     * ```\n     */\n    get displayData(): string;\n    /** @hidden @internal */\n    get transformedDate(): string;\n    /** @hidden @internal */\n    set transformedDate(value: string);\n    /**\n     * Gets the input group template.\n     *\n     * @example\n     * ```typescript\n     * let template = this.template();\n     * ```\n     */\n    get template(): TemplateRef<any>;\n    /**\n     * Gets the context passed to the input group template.\n     */\n    get context(): {\n        disabled: boolean;\n        disabledDates: DateRangeDescriptor[];\n        displayData: string;\n        format: string;\n        isSpinLoop: boolean;\n        labelVisibility: boolean;\n        locale: \"en\";\n        mask: string;\n        mode: string;\n        specialDates: DateRangeDescriptor[];\n        value: Date;\n        openDialog: () => void;\n    };\n    private get required();\n    /**\n     * Gets/Sets the selected date.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker [value]=\"date\"></igx-date-picker>\n     * ```\n     */\n    get value(): Date;\n    set value(date: Date);\n    /**\n     * Gets/Sets the value of `id` attribute.\n     *\n     * @remarks If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    id: string;\n    /**\n     * Gets/Sets a custom formatter function on the selected or passed date.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     * ```\n     */\n    formatter: (val: Date) => string;\n    /**\n     * Enables/Disables the `IgxDatePickerComponent`.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * Gets/Sets the orientation of the `IgxDatePickerComponent` header.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    vertical: boolean;\n    /**\n     * Gets/Sets the today button's label.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     * ```\n     */\n    todayButtonLabel: string;\n    /**\n     * *Gets/Sets the cancel button's label.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     * ```\n     */\n    cancelButtonLabel: string;\n    /**\n     * Gets/Sets the interaction mode - dialog or drop down.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     * ```\n     */\n    mode: InteractionMode;\n    /**\n     * Gets/Sets whether date should spin continuously or stop when min/max is reached.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     * ```\n     */\n    isSpinLoop: boolean;\n    /**\n     * Gets/Sets the container used for the popup element.\n     *\n     * @remarks\n     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     * @example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * Emitted when the `IgxDatePickerComponent` calendar is opened.\n     */\n    onOpened: EventEmitter<IgxDatePickerComponent>;\n    /**\n     * Emitted after the `IgxDatePickerComponent` is closed.\n     */\n    onClosed: EventEmitter<IgxDatePickerComponent>;\n    /**\n     * Emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    onClosing: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted when selection is made in the calendar.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker (onSelection)=\"selection($event)\"></igx-date-picker>\n     * ```\n     */\n    onSelection: EventEmitter<Date>;\n    /**\n     * Emitted when date picker value is changed.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n     * ```\n     */\n    valueChange: EventEmitter<Date>;\n    /**\n     * Emitted when the user types/spins to a disabled date in the date-picker editor.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n     * ```\n     */\n    onDisabledDate: EventEmitter<IDatePickerDisabledDateEventArgs>;\n    /**\n     * Emitted when the user types/spins invalid date in the date-picker editor.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n     * ```\n     */\n    onValidationFailed: EventEmitter<IDatePickerValidationFailedEventArgs>;\n    /** @hidden @internal */\n    _labelDirectiveUserTemplate: IgxLabelDirective;\n    /**\n     * @hidden\n     */\n    headerTemplate: IgxCalendarHeaderTemplateDirective;\n    /**\n     * @hidden\n     */\n    subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n    /**\n     * @hidden\n     */\n    datePickerActionsDirective: IgxDatePickerActionsDirective;\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n    protected editableDatePickerTemplate: TemplateRef<any>;\n    protected _inputGroup: IgxInputGroupComponent;\n    protected _inputGroupUserTemplate: IgxInputGroupComponent;\n    protected _inputUserTemplateElementRef: ElementRef;\n    protected _labelDirective: IgxLabelDirective;\n    /**\n     * @hidden\n     */\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n    private _inputElementRef;\n    private _inputDirective;\n    private _inputDirectiveUserTemplates;\n    /** @hidden @internal */\n    calendar: IgxCalendarComponent;\n    /** @hidden @internal */\n    hasHeader: boolean;\n    /** @hidden @internal */\n    collapsed: boolean;\n    /** @hidden @internal */\n    displayValuePipe: DatePickerDisplayValuePipe;\n    /** @hidden @internal */\n    inputValuePipe: DatePickerInputValuePipe;\n    /** @hidden @internal */\n    dateFormatParts: any[];\n    /** @hidden @internal */\n    rawDateString: string;\n    /** @hidden @internal */\n    inputMask: string;\n    /** @hidden @internal */\n    isEmpty: boolean;\n    /** @hidden @internal */\n    invalidDate: string;\n    private readonly spinDelta;\n    private readonly defaultLocale;\n    private _formatOptions;\n    private _formatViews;\n    private _destroy$;\n    private _statusChanges$;\n    private _templateInputBlur$;\n    private _componentID;\n    private _format;\n    private _value;\n    private _isInEditMode;\n    private _disabledDates;\n    private _specialDates;\n    private _modalOverlay;\n    private _dropDownOverlaySettings;\n    private _positionSettings;\n    private _defaultDropDownOverlaySettings;\n    private _modalOverlaySettings;\n    private _transformedDate;\n    private _onOpen;\n    private _onClose;\n    private _ngControl;\n    private _label;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    private _onValidatorChange;\n    constructor(_overlayService: IgxOverlayService, element: ElementRef, _cdr: ChangeDetectorRef, _moduleRef: NgModuleRef<any>, _injector: Injector, _renderer: Renderer2);\n    /**\n     * @hidden\n     */\n    onSpaceClick(event: KeyboardEvent): void;\n    /** @hidden @internal */\n    writeValue(value: Date): void;\n    /** @hidden @internal */\n    registerOnChange(fn: (_: Date) => void): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: () => void): void;\n    /** @hidden @internal */\n    setDisabledState(isDisabled: boolean): void;\n    /** @hidden @internal */\n    registerOnValidatorChange(fn: any): void;\n    /** @hidden @internal */\n    validate(): ValidationErrors | null;\n    /** @hidden */\n    getEditElement(): any;\n    /** @hidden @internal */\n    get inputGroupElement(): HTMLElement;\n    /** @hidden @internal */\n    get inputGroup(): IgxInputGroupComponent;\n    /** @hidden @internal */\n    get inputDirective(): IgxInputDirective;\n    /** @hidden @internal */\n    get labelDirective(): IgxLabelDirective;\n    /** @hidden @internal */\n    ngOnInit(): void;\n    /** @hidden @internal */\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    /** @hidden @internal */\n    ngOnDestroy(): void;\n    /**\n     * Selects today's date from calendar.\n     *\n     *  @remarks\n     * Changes the input field value, @calendar.viewDate and @calendar.value.\n     *  @example\n     * ```typescript\n     * this.datePicker.triggerTodaySelection();\n     * ```\n     */\n    triggerTodaySelection(): void;\n    /**\n     * Change the calendar selection.\n     *\n     * @remarks\n     * Calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     * @example\n     * ```typescript\n     * this.datePicker.selectDate(this.date);\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     */\n    selectDate(date: Date): void;\n    /**\n     * Deselects the calendar date.\n     *\n     * @example\n     * ```typescript\n     * this.datePicker.deselectDate();\n     * ```\n     */\n    deselectDate(): void;\n    /**\n     * Opens the date picker drop down or dialog.\n     *\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * @example\n     * ```typescript\n     * this.datePicker.openDialog(target);\n     * ```\n     */\n    openDialog(): void;\n    /**\n     * Close the calendar.\n     *\n     * @hidden @internal\n     */\n    closeCalendar(): void;\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden @internal\n     */\n    clear(): void;\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden @internal\n     */\n    handleSelection(date: Date): void;\n    /** @hidden @internal */\n    onOpenClick(event: MouseEvent): void;\n    /** @hidden @internal */\n    onBlur(event: any, calcDate?: boolean): void;\n    /** @hidden @internal */\n    onFocus(): void;\n    /** @hidden @internal */\n    onKeyDown(event: any): void;\n    /** @hidden @internal */\n    onWheel(event: any): void;\n    /** @hidden @internal */\n    onInput(event: any): void;\n    _updateValidityOnBlur(): void;\n    protected onStatusChanged(): void;\n    private attachTemplateBlur;\n    private emitValueChangeEvent;\n    private calculateDate;\n    private spinValue;\n    private _onOpening;\n    private _onOpened;\n    private _onClosed;\n    private _initializeCalendarContainer;\n    private _focusCalendarDate;\n    private _setLocaleToDate;\n    private _getCursorPosition;\n    private _setCursorPosition;\n    /**\n     * Apply custom user formatter upon date.\n     *\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker;\n    private _getDisplayDate;\n    private _getEditorDate;\n}\n/**\n * @hidden\n */\nexport declare class IgxDatePickerModule {\n}\n"]}