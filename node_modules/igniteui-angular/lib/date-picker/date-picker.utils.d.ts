import { DatePartInfo } from '../directives/date-time-editor/date-time-editor.common';
/**
 * This enum is used to keep the date validation result.
 *
 * @hidden
 */
export declare const enum DateState {
    Valid = "valid",
    Invalid = "invalid"
}
/** @hidden */
export declare abstract class DatePickerUtil {
    static readonly DEFAULT_INPUT_FORMAT = "MM/dd/yyyy";
    private static readonly SHORT_DATE_MASK;
    private static readonly SEPARATOR;
    private static readonly NUMBER_OF_MONTHS;
    private static readonly PROMPT_CHAR;
    private static readonly DEFAULT_LOCALE;
    /**
     *  TODO: (in issue #6483) Unit tests and docs for all public methods.
     */
    /**
     * Parse a Date value from masked string input based on determined date parts
     *
     * @param inputData masked value to parse
     * @param dateTimeParts Date parts array for the mask
     */
    static parseValueFromMask(inputData: string, dateTimeParts: DatePartInfo[], promptChar?: string): Date | null;
    /**
     * Parse the mask into date/time and literal parts
     */
    static parseDateTimeFormat(mask: string, locale?: string): DatePartInfo[];
    static getDefaultInputFormat(locale: string): string;
    static formatDate(value: number | Date, format: string, locale: string, timezone?: string): string;
    static getLocaleDateFormat(locale: string, displayFormat?: string): string;
    static isDateOrTimeChar(char: string): boolean;
    static spinDate(delta: number, newDate: Date, isSpinLoop: boolean): void;
    static spinMonth(delta: number, newDate: Date, isSpinLoop: boolean): void;
    static spinYear(delta: number, newDate: Date): void;
    static spinHours(delta: number, newDate: Date, isSpinLoop: boolean): void;
    static spinMinutes(delta: number, newDate: Date, isSpinLoop: boolean): void;
    static spinSeconds(delta: number, newDate: Date, isSpinLoop: boolean): void;
    static spinAmPm(newDate: Date, currentDate: Date, amPmFromMask: string): Date;
    /**
     * Determines whether the provided value is greater than the provided max value.
     *
     * @param includeTime set to false if you want to exclude time portion of the two dates
     * @param includeDate set to false if you want to exclude the date portion of the two dates
     * @returns true if provided value is greater than provided maxValue
     */
    static greaterThanMaxValue(value: Date, maxValue: Date, includeTime?: boolean, includeDate?: boolean): boolean;
    /**
     * Determines whether the provided value is less than the provided min value.
     *
     * @param includeTime set to false if you want to exclude time portion of the two dates
     * @param includeDate set to false if you want to exclude the date portion of the two dates
     * @returns true if provided value is less than provided minValue
     */
    static lessThanMinValue(value: Date, minValue: Date, includeTime?: boolean, includeDate?: boolean): boolean;
    /**
     * This method generates date parts structure based on editor mask and locale.
     *
     * @param maskValue: string
     * @param locale: string
     * @returns array containing information about date parts - type, position, format
     */
    static parseDateFormat(maskValue: string, locale?: string): any[];
    /**
     * This method generates input mask based on date parts.
     *
     * @param dateStruct array
     * @returns input mask
     */
    static getInputMask(dateStruct: any[]): string;
    /**
     * This method generates editor mask.
     *
     * @param dateStruct
     * @returns editor mask
     */
    static getMask(dateStruct: any[]): string;
    /**
     * This method parses an input string base on date parts and returns a date and its validation state.
     *
     * @param dateFormatParts
     * @param prevDateValue
     * @param inputValue
     * @returns object containing a date and its validation state
     */
    static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any;
    static maskToPromptChars(mask: string): string;
    /**
     * This method replaces prompt chars with empty string.
     *
     * @param value
     */
    static trimEmptyPlaceholders(value: string, promptChar?: string): string;
    /**
     * This method is used for spinning date parts.
     *
     * @param dateFormatParts
     * @param inputValue
     * @param position
     * @param delta
     * @param isSpinLoop
     * @return modified text input
     */
    static getModifiedDateInput(dateFormatParts: any[], inputValue: string, position: number, delta: number, isSpinLoop: boolean): string;
    /**
     * This method returns date input with prompt chars.
     *
     * @param dateFormatParts
     * @param date
     * @param inputValue
     * @returns date input including prompt chars
     */
    static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string;
    /**
     * This method checks if date input is done.
     *
     * @param dateFormatParts
     * @param input
     * @returns input completeness
     */
    static checkForCompleteDateInput(dateFormatParts: any[], input: string): string;
    static daysInMonth(fullYear: number, month: number): number;
    /**
     * Parse provided input to Date.
     *
     * @param value input to parse
     * @returns Date if parse succeed or null
     */
    static parseDate(value: any): Date | null;
    /**
     * Returns whether provided input is date
     *
     * @param value input to check
     * @returns true if provided input is date
     */
    static isDate(value: any): boolean;
    /**
     * Returns whether the input is valid date
     *
     * @param value input to check
     * @returns true if provided input is a valid date
     */
    static isValidDate(value: any): boolean;
    private static logMissingLocaleSettings;
    private static ensureLeadingZero;
    private static getCleanVal;
    private static determineDatePart;
    private static getYearFormatType;
    private static getMonthFormatType;
    private static getDayFormatType;
    private static getDefaultLocaleMask;
    private static isDateChar;
    private static getNumericFormatPrefix;
    private static getMinMaxValue;
    private static getDateValueFromInput;
    private static getDayValueFromInput;
    private static getMonthValueFromInput;
    private static getYearValueFromInput;
    private static getDateFormatPart;
    private static isFullInput;
    private static isFullYearInput;
    private static getDatePartOnPosition;
    private static getFullYearFromString;
    private static fillDatePartsPositions;
}
