{"version":3,"file":"drop-down.component.d.ts","sources":["drop-down.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, QueryList, OnChanges, OnDestroy, AfterViewInit, EventEmitter, SimpleChanges } from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IDropDownBase } from './drop-down.common';\nimport { IBaseCancelableBrowserEventArgs } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { OverlaySettings } from '../services/public_api';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IDisplayDensityOptions } from '../core/density';\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop-down)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\nexport declare class IgxDropDownComponent extends IgxDropDownBaseDirective implements IDropDownBase, OnChanges, AfterViewInit, OnDestroy {\n    protected elementRef: ElementRef;\n    protected cdr: ChangeDetectorRef;\n    protected selection: IgxSelectionAPIService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    /**\n     * @hidden\n     * @internal\n     */\n    children: QueryList<IgxDropDownItemBaseDirective>;\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    onOpening: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    onOpened: EventEmitter<void>;\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    onClosing: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    onClosed: EventEmitter<void>;\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    allowItemsFocus: boolean;\n    protected virtDir: IgxForOfDirective<any>;\n    protected toggleDirective: IgxToggleDirective;\n    protected scrollContainerRef: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    get focusedItem(): IgxDropDownItemBaseDirective;\n    set focusedItem(value: IgxDropDownItemBaseDirective);\n    get id(): string;\n    set id(value: string);\n    /** Id of the internal listbox of the drop down */\n    get listId(): string;\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    get selectedItem(): IgxDropDownItemBaseDirective;\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    get collapsed(): boolean;\n    /** @hidden @internal */\n    get scrollContainer(): HTMLElement;\n    protected get collectionLength(): number;\n    protected destroy$: Subject<boolean>;\n    protected _scrollPosition: number;\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, selection: IgxSelectionAPIService, _displayDensityOptions: IDisplayDensityOptions);\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    open(overlaySettings?: OverlaySettings): void;\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    close(): void;\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    toggle(overlaySettings?: OverlaySettings): void;\n    /**\n     * Select an item by index\n     *\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    setSelectedItem(index: number): void;\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     *\n     * @param newIndex number\n     */\n    navigateItem(index: number): void;\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition(): void;\n    /**\n     * @hidden @internal\n     */\n    onToggleOpening(e: IBaseCancelableBrowserEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    onToggleContentAppended(): void;\n    /**\n     * @hidden @internal\n     */\n    onToggleOpened(): void;\n    /**\n     * @hidden @internal\n     */\n    onToggleClosing(e: IBaseCancelableBrowserEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    onToggleClosed(): void;\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void;\n    /** @hidden @internal */\n    calculateScrollPosition(item: IgxDropDownItemBaseDirective): number;\n    /**\n     * @hidden @internal\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    /** Keydown Handler */\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n    /**\n     * Virtual scroll implementation\n     *\n     * @hidden @internal\n     */\n    navigateFirst(): void;\n    /**\n     * @hidden @internal\n     */\n    navigateLast(): void;\n    /**\n     * @hidden @internal\n     */\n    navigateNext(): void;\n    /**\n     * @hidden @internal\n     */\n    navigatePrev(): void;\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     *\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    selectItem(newSelection?: IgxDropDownItemBaseDirective, event?: Event): void;\n    /**\n     * Clears the selection of the dropdown\n     * ```typescript\n     * this.dropdown.clearSelection();\n     * ```\n     */\n    clearSelection(): void;\n    /**\n     * Checks whether the selection is valid\n     * `null` - the selection should be emptied\n     * Virtual? - the selection should at least have and `index` and `value` property\n     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header\n     */\n    protected isSelectionValid(selection: any): boolean;\n    protected scrollToItem(item: IgxDropDownItemBaseDirective): void;\n    protected focusItem(value: boolean): void;\n    protected updateItemFocus(): void;\n    protected skipHeader(direction: Navigate): void;\n    private isIndexOutOfBounds;\n}\n"]}