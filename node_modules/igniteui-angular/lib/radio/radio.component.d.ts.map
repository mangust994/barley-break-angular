{"version":3,"file":"radio.component.d.ts","sources":["radio.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\nexport interface IChangeRadioEventArgs extends IBaseEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\nexport declare const RadioLabelPosition: {\n    BEFORE: \"before\";\n    AFTER: \"after\";\n};\nexport declare type RadioLabelPosition = (typeof RadioLabelPosition)[keyof typeof RadioLabelPosition];\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\nexport declare class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    private cdr;\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     *\n     * @memberof IgxSwitchComponent\n     */\n    nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     *\n     * @memberof IgxSwitchComponent\n     */\n    nativeLabel: ElementRef;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     *\n     * @memberof IgxSwitchComponent\n     */\n    placeholderLabel: ElementRef;\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    id: string;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    labelId: string;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    labelPosition: RadioLabelPosition | string;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    tabindex: number;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    disableRipple: boolean;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    required: boolean;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    ariaLabelledBy: string;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    ariaLabel: string | null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     *\n     * @memberof IgxRadioComponent\n     */\n    readonly change: EventEmitter<IChangeRadioEventArgs>;\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    cssClass: string;\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    checked: boolean;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    disabled: boolean;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    focused: boolean;\n    /**\n     * @hidden\n     */\n    inputId: string;\n    /**\n     * @hidden\n     */\n    private _onTouchedCallback;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback;\n    constructor(cdr: ChangeDetectorRef);\n    /**\n     * @hidden\n     * @internal\n     */\n    onKeyUp(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    _clicked(event: MouseEvent): void;\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    select(): void;\n    /**\n     * Deselects the current radio button.\n     * ```typescript\n     * this.radio.deselect();\n     * ```\n     *\n     * @memberof IgxRadioComponent\n     */\n    deselect(): void;\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    writeValue(value: any): void;\n    /** @hidden */\n    getEditElement(): any;\n    /**\n     * @hidden\n     */\n    get labelClass(): string;\n    /**\n     * @hidden\n     */\n    onBlur(): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: (_: any) => void): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n"]}