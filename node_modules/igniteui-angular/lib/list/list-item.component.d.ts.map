{"version":3,"file":"list-item.component.d.ts","sources":["list-item.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer2 } from '@angular/core';\nimport { IgxListPanState, IListChild, IgxListBaseDirective } from './list.common';\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\nexport declare class IgxListItemComponent implements IListChild {\n    list: IgxListBaseDirective;\n    private elementRef;\n    private _renderer;\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    leftPanningTemplateElement: any;\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    rightPanningTemplateElement: any;\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    isHeader: boolean;\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    hidden: boolean;\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    ariaLabel: string;\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    touchAction: string;\n    /**\n     * @hidden\n     */\n    private _panState;\n    /**\n     * @hidden\n     */\n    private panOffset;\n    /**\n     * @hidden\n     */\n    private _index;\n    /**\n     * @hidden\n     */\n    private lastPanDir;\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get panState(): IgxListPanState;\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get index(): number;\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    set index(value: number);\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get element(): any;\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get contentElement(): any;\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    get context(): any;\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get width(): any;\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get maxLeft(): number;\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get maxRight(): any;\n    constructor(list: IgxListBaseDirective, elementRef: ElementRef, _renderer: Renderer2);\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get role(): \"separator\" | \"listitem\";\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get headerStyle(): boolean;\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get innerStyle(): boolean;\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     *\n     * @memberof IgxListItemComponent\n     */\n    get display(): string;\n    /**\n     * @hidden\n     */\n    clicked(evt: any): void;\n    /**\n     * @hidden\n     */\n    panStart(): void;\n    /**\n     * @hidden\n     */\n    panMove(ev: any): void;\n    /**\n     * @hidden\n     */\n    panEnd(): void;\n    /**\n     * @hidden\n     */\n    private showLeftPanTemplate;\n    /**\n     * @hidden\n     */\n    private showRightPanTemplate;\n    /**\n     * @hidden\n     */\n    private hideLeftAndRightPanTemplates;\n    /**\n     * @hidden\n     */\n    private setLeftAndRightTemplatesVisibility;\n    /**\n     * @hidden\n     */\n    private setContentElementLeft;\n    /**\n     * @hidden\n     */\n    private isTrue;\n}\n"]}