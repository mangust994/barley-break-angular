{"version":3,"file":"calendar.component.d.ts","sources":["calendar.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, AfterViewInit, QueryList, OnDestroy } from '@angular/core';\nimport { ICalendarDate } from './calendar';\nimport { IgxMonthPickerBaseDirective } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IViewChangingEventArgs } from './days-view/days-view.interface';\n/**\n * Calendar provides a way to display date information.\n *\n * @igxModule IgxCalendarModule\n *\n * @igxTheme igx-calendar-theme, igx-icon-theme\n *\n * @igxKeywords calendar, datepicker, schedule, date\n *\n * @igxGroup Scheduling\n *\n * @remarks\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * @example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\nexport declare class IgxCalendarComponent extends IgxMonthPickerBaseDirective implements AfterViewInit, OnDestroy {\n    /**\n     * Sets/gets the `id` of the calendar.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar id=\"my-first-calendar\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    id: string;\n    /**\n     * Sets/gets whether the calendar has header.\n     * Default value is `true`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [hasHeader]=\"false\"></igx-calendar>\n     * ```\n     */\n    hasHeader: boolean;\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     */\n    vertical: boolean;\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [monthsViewNumber]=\"2\"></igx-calendar>\n     * ```\n     */\n    get monthsViewNumber(): number;\n    set monthsViewNumber(val: number);\n    /**\n     * Show/hide week numbers\n     *\n     * @example\n     * ```html\n     * <igx-calendar [showWeekNumbers]=\"true\"></igx-calendar>\n     * ``\n     */\n    showWeekNumbers: boolean;\n    /**\n     * Apply the different states for the transitions of animateChange\n     *\n     * @hidden\n     * @internal\n     */\n    animationAction: any;\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    get styleVerticalClass(): boolean;\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    styleClass: boolean;\n    /**\n     * ViewChild that represents the months view.\n     *\n     * @hidden\n     * @internal\n     */\n    monthsView: IgxMonthsViewComponent;\n    /**\n     * Month button, that displays the months view.\n     *\n     * @hidden\n     * @internal\n     */\n    monthsBtns: QueryList<ElementRef>;\n    /**\n     * ViewChild that represents the decade view.\n     *\n     * @hidden\n     * @internal\n     */\n    dacadeView: IgxYearsViewComponent;\n    /**\n     * ViewChild that represents the days view.\n     *\n     * @hidden\n     * @internal\n     */\n    daysView: IgxDaysViewComponent;\n    /**\n     * ViewChildrenden representing all of the rendered days views.\n     *\n     * @hidden\n     * @internal\n     */\n    monthViews: QueryList<IgxDaysViewComponent>;\n    /**\n     * Button for previous month.\n     *\n     * @hidden\n     * @internal\n     */\n    prevMonthBtn: ElementRef;\n    /**\n     * Button for next month.\n     *\n     * @hidden\n     * @internal\n     */\n    nextMonthBtn: ElementRef;\n    /**\n     * Denote if the year view is active.\n     *\n     * @hidden\n     * @internal\n     */\n    get isYearView(): boolean;\n    /**\n     * Gets the header template.\n     *\n     * @example\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any;\n    /**\n     * Sets the header template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any);\n    /**\n     * Gets the subheader template.\n     *\n     * @example\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any;\n    /**\n     * Sets the subheader template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any);\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     *\n     * @example\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext(): {\n        $implicit: {\n            date: Date; /**\n             * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n             * or `igxCalendarSubHeaderYear` directive.\n             *\n             * @example\n             * ```typescript\n             * let context =  this.calendar.context;\n             * ```\n             */\n            full: string;\n            index: number;\n            monthView: () => void;\n            yearView: () => void;\n        };\n    };\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     *\n     * @example\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context(): {\n        $implicit: {\n            date: Date; /**\n             * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n             * or `igxCalendarSubHeaderYear` directive.\n             *\n             * @example\n             * ```typescript\n             * let context =  this.calendar.context;\n             * ```\n             */\n            full: string;\n            index: number;\n            monthView: () => void;\n            yearView: () => void;\n        };\n    };\n    /**\n     * Date displayed in header\n     *\n     * @hidden\n     * @internal\n     */\n    get headerDate(): Date;\n    /**\n     * @hidden\n     * @internal\n     */\n    private headerTemplateDirective;\n    /**\n     * @hidden\n     * @internal\n     */\n    private subheaderTemplateDirective;\n    /**\n     * @hidden\n     * @internal\n     */\n    activeDate: string;\n    /**\n     * Used to apply the active date when the calendar view is changed\n     *\n     * @hidden\n     * @internal\n     */\n    nextDate: Date;\n    /**\n     * Denote if the calendar view was changed with the keyboard\n     *\n     * @hidden\n     * @internal\n     */\n    isKeydownTrigger: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    callback: (next: any) => void;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthsViewNumber;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthViewsChanges$;\n    /**\n     * Keyboard navigation of the calendar\n     *\n     * @hidden\n     * @internal\n     */\n    onKeydownPageDown(event: KeyboardEvent): void;\n    /**\n     * Keyboard navigation of the calendar\n     *\n     * @hidden\n     * @internal\n     */\n    onKeydownShiftPageUp(event: KeyboardEvent): void;\n    /**\n     * Keyboard navigation of the calendar\n     *\n     * @hidden\n     * @internal\n     */\n    onKeydownHome(event: KeyboardEvent): void;\n    /**\n     * Keyboard navigation of the calendar\n     *\n     * @hidden\n     * @internal\n     */\n    onKeydownEnd(event: KeyboardEvent): void;\n    /**\n     * Stop continuous navigation on mouseup event\n     *\n     * @hidden\n     * @internal\n     */\n    onMouseUp(event: KeyboardEvent): void;\n    ngAfterViewInit(): void;\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     * @internal\n     */\n    formattedMonth(value: Date): string;\n    /**\n     * Change to previous month\n     *\n     * @hidden\n     * @internal\n     */\n    previousMonth(isKeydownTrigger?: boolean): void;\n    suppressBlur(): void;\n    /**\n     * Change to next month\n     *\n     * @hidden\n     * @internal\n     */\n    nextMonth(isKeydownTrigger?: boolean): void;\n    /**\n     * Continious navigation through the previous months\n     *\n     * @hidden\n     * @internal\n     */\n    startPrevMonthScroll: (isKeydownTrigger?: boolean) => void;\n    /**\n     * Continious navigation through the next months\n     *\n     * @hidden\n     * @internal\n     */\n    startNextMonthScroll: (isKeydownTrigger?: boolean) => void;\n    /**\n     * Stop continuous navigation\n     *\n     * @hidden\n     * @internal\n     */\n    stopMonthScroll: (event: any) => void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onActiveViewDecade(args: Date, activeViewIdx: number): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onActiveViewDecadeKB(event: any, args: Date, activeViewIdx: number): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    getFormattedDate(): {\n        weekday: string;\n        monthday: string;\n    };\n    /**\n     * Handles invoked on date selection\n     *\n     * @hidden\n     * @internal\n     */\n    childClicked(instance: ICalendarDate): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    viewChanging(args: IViewChangingEventArgs): void;\n    /**\n     * @hidden\n     * @intenal\n     */\n    changeMonth(event: Date): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onActiveViewYear(args: Date, activeViewIdx: number): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onActiveViewYearKB(args: Date, event: any, activeViewIdx: number): void;\n    /**\n     * Deselects date(s) (based on the selection type).\n     *\n     * @example\n     * ```typescript\n     *  this.calendar.deselectDate(new Date(`2018-06-12`));\n     * ````\n     */\n    deselectDate(value?: Date | Date[]): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    getViewDate(i: number): Date;\n    /**\n     * Getter for the context object inside the calendar templates.\n     *\n     * @hidden\n     * @internal\n     */\n    getContext(i: number): {\n        $implicit: {\n            date: Date; /**\n             * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n             * or `igxCalendarSubHeaderYear` directive.\n             *\n             * @example\n             * ```typescript\n             * let context =  this.calendar.context;\n             * ```\n             */\n            full: string;\n            index: number;\n            monthView: () => void;\n            yearView: () => void;\n        };\n    };\n    /**\n     * @hidden\n     * @internal\n     */\n    animationDone(event: any): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    viewRendered(event: any): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetActiveDate(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    getPrevMonth(date: any): Date;\n    /**\n     * @hidden\n     * @internal\n     */\n    getNextMonth(date: any, viewIndex: any): Date;\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     *\n     * @hidden\n     * @internal\n     */\n    private generateContext;\n    /**\n     * Helper method that sets references for prev/next months for each month in the view\n     *\n     * @hidden\n     * @internal\n     */\n    private setSiblingMonths;\n    /**\n     * Helper method returning previous/next day views\n     *\n     * @hidden\n     * @internal\n     */\n    private getMonthView;\n    /**\n     * Helper method that does deselection for all month views when selection is \"multi\"\n     * If not called, selection in other month views stays\n     *\n     * @hidden\n     * @internal\n     */\n    private deselectDateInMonthViews;\n    private focusMonth;\n}\n"]}