{"version":3,"file":"months-view.component.d.ts","sources":["months-view.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, QueryList, ElementRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\nexport declare class IgxMonthsViewComponent implements ControlValueAccessor {\n    el: ElementRef;\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     *\n     * @memberof IgxMonthsViewComponent\n     */\n    id: string;\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     *\n     * @memberof IgxMonthsViewComponent\n     */\n    set date(value: Date);\n    get date(): Date;\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    get monthFormat(): string;\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     *\n     * @memberof IgxMonthsViewComponent\n     */\n    set monthFormat(value: string);\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     *\n     * @memberof IgxMonthsViewComponent\n     */\n    get locale(): string;\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     *\n     * @memberof IgxMonthsViewComponent\n     */\n    set locale(value: string);\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    formatView: boolean;\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (selected)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     *\n     * @memberof IgxMonthsViewComponent\n     */\n    selected: EventEmitter<Date>;\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    styleClass: boolean;\n    /**\n     * @hidden\n     */\n    monthsRef: QueryList<IgxCalendarMonthDirective>;\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[];\n    /**\n     * @hidden\n     * @internal\n     */\n    activeMonth: any;\n    private _date;\n    /**\n     * @hidden\n     */\n    private _formatterMonth;\n    /**\n     * @hidden\n     */\n    private _locale;\n    /**\n     * @hidden\n     */\n    private _monthFormat;\n    /**\n     * @hidden\n     */\n    private _calendarModel;\n    /**\n     * @hidden\n     */\n    private _onTouchedCallback;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback;\n    constructor(el: ElementRef);\n    /**\n     * @hidden\n     */\n    onKeydownArrowUp(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    onKeydownArrowDown(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    onKeydownArrowRight(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    onKeydownArrowLeft(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    onKeydownHome(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    onKeydownEnd(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    onKeydownEnter(event: any): void;\n    resetActiveMonth(): void;\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    formattedMonth(value: Date): string;\n    /**\n     * @hidden\n     */\n    selectMonth(event: any): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: (v: Date) => void): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: Date): void;\n    /**\n     * @hidden\n     */\n    monthTracker(index: any, item: any): string;\n    /**\n     * @hidden\n     */\n    private initMonthFormatter;\n}\n"]}