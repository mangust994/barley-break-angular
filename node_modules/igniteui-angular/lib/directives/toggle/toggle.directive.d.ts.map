{"version":3,"file":"toggle.directive.d.ts","sources":["toggle.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings } from '../../services/public_api';\nimport { CancelableBrowserEventArgs, IBaseEventArgs } from '../../core/utils';\nexport interface ToggleViewEventArgs extends IBaseEventArgs {\n    /** Id of the toggle view */\n    id: string;\n    event?: Event;\n}\nexport interface ToggleViewCancelableEventArgs extends ToggleViewEventArgs, CancelableBrowserEventArgs {\n}\nexport declare class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    private elementRef;\n    private cdr;\n    protected overlayService: IgxOverlayService;\n    private navigationService;\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    onOpened: EventEmitter<ToggleViewEventArgs>;\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    onOpening: EventEmitter<ToggleViewCancelableEventArgs>;\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    onClosed: EventEmitter<ToggleViewEventArgs>;\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    onClosing: EventEmitter<ToggleViewCancelableEventArgs>;\n    /**\n     * Emits an event after the toggle element is appended to the overlay container.\n     *\n     * ```typescript\n     * onAppended() {\n     *  alert(\"Content appended!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onAppended)='onToggleAppended()'>\n     * </div>\n     * ```\n     */\n    onAppended: EventEmitter<ToggleViewEventArgs>;\n    /**\n     * @hidden\n     */\n    get collapsed(): boolean;\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    id: string;\n    /**\n     * @hidden\n     */\n    get element(): HTMLElement;\n    /**\n     * @hidden\n     */\n    get hiddenClass(): boolean;\n    /**\n     * @hidden\n     */\n    get defaultClass(): boolean;\n    protected _overlayId: string;\n    private _collapsed;\n    private destroy$;\n    private _overlaySubFilter;\n    private _overlayOpenedSub;\n    private _overlayClosingSub;\n    private _overlayClosedSub;\n    private _overlayAppendedSub;\n    /**\n     * @hidden\n     */\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, overlayService: IgxOverlayService, navigationService: IgxNavigationService);\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    open(overlaySettings?: OverlaySettings): void;\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    close(): void;\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    toggle(overlaySettings?: OverlaySettings): void;\n    /** @hidden @internal */\n    get isClosing(): false | import(\"@angular/animations\").AnimationPlayer;\n    /**\n     * Returns the id of the overlay the content is rendered in.\n     * ```typescript\n     * this.myToggle.overlayId;\n     * ```\n     */\n    get overlayId(): string;\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    reposition(): void;\n    /**\n     * Offsets the content along the corresponding axis by the provided amount\n     */\n    setOffset(deltaX: number, deltaY: number): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    private overlayClosed;\n    private unsubscribe;\n    private clearSubscription;\n}\nexport declare class IgxToggleActionDirective implements OnInit {\n    private element;\n    private navigationService;\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    overlaySettings: OverlaySettings;\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden\n     */\n    set target(target: any);\n    /**\n     * @hidden\n     */\n    get target(): any;\n    protected _overlayDefaults: OverlaySettings;\n    protected _target: IToggleView | string;\n    constructor(element: ElementRef, navigationService: IgxNavigationService);\n    /**\n     * @hidden\n     */\n    onClick(): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * Updates provided overlay settings\n     *\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings;\n}\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\nexport declare class IgxOverlayOutletDirective {\n    element: ElementRef;\n    constructor(element: ElementRef);\n    /** @hidden */\n    get nativeElement(): any;\n}\n/**\n * @hidden\n */\nexport declare class IgxToggleModule {\n}\n"]}