import { ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class IgxFocusDirective {
    private element;
    private comp?;
    private focusState;
    /**
     * Returns the state of the igxFocus.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * let isFocusOn = this.igxFocus.focused;
     * ```
     *
     * @memberof IgxFocusDirective
     */
    get focused(): boolean;
    /**
     * Sets the state of the igxFocus.
     * ```html
     * <igx-input-group >
     *  <input #focusContainer igxInput [igxFocus]="true"/>
     * </igx-input-group>
     * ```
     *
     * @memberof IgxFocusDirective
     */
    set focused(val: boolean);
    /**
     * Gets the native element of the igxFocus.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * let igxFocusNativeElement = this.igxFocus.nativeElement;
     * ```
     *
     * @memberof IgxFocusDirective
     */
    get nativeElement(): any;
    constructor(element: ElementRef, comp?: any[]);
    /**
     * Triggers the igxFocus state.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * this.igxFocus.trigger();
     * ```
     *
     * @memberof IgxFocusDirective
     */
    trigger(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFocusDirective, [null, { optional: true; self: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxFocusDirective, "[igxFocus]", ["igxFocus"], { "focused": "igxFocus"; }, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxFocusModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxFocusModule, [typeof IgxFocusDirective], never, [typeof IgxFocusDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxFocusModule>;
}

//# sourceMappingURL=focus.directive.d.ts.map