{"version":3,"file":"drag-drop.directive.d.ts","sources":["drag-drop.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2, ChangeDetectorRef, ViewContainerRef, AfterContentInit, TemplateRef, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IBaseEventArgs, PlatformUtil } from '../../core/utils';\nimport { IDropStrategy } from './drag-drop.strategy';\nexport declare enum DragDirection {\n    VERTICAL = 0,\n    HORIZONTAL = 1,\n    BOTH = 2\n}\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\nexport interface IDropBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\nexport interface IDropDroppedEventArgs extends IDropBaseEventArgs {\n    /** Specifies if the default drop logic related to the event should be canceled. */\n    cancel: boolean;\n}\nexport interface IDragBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\nexport interface IDragMoveEventArgs extends IDragStartEventArgs {\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element X movement. */\n    nextPageX: number;\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element Y movement. */\n    nextPageY: number;\n}\nexport interface IDragGhostBaseEventArgs extends IBaseEventArgs {\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** Instance to the ghost element that is created when dragging starts. */\n    ghostElement: any;\n    /** Set if the ghost creation/destruction should be canceled. */\n    cancel: boolean;\n}\nexport interface IDragCustomTransitionArgs {\n    duration?: number;\n    timingFunction?: string;\n    delay?: number;\n}\nexport declare class IgxDragLocation {\n    private _pageX;\n    private _pageY;\n    pageX: number;\n    pageY: number;\n    constructor(_pageX: any, _pageY: any);\n}\nexport declare class IgxDragHandleDirective {\n    element: ElementRef<any>;\n    baseClass: boolean;\n    constructor(element: ElementRef<any>);\n}\nexport declare class IgxDragIgnoreDirective {\n    element: ElementRef<any>;\n    baseClass: boolean;\n    constructor(element: ElementRef<any>);\n}\nexport declare class IgxDragDirective implements AfterContentInit, OnDestroy {\n    cdr: ChangeDetectorRef;\n    element: ElementRef;\n    viewContainer: ViewContainerRef;\n    zone: NgZone;\n    renderer: Renderer2;\n    protected platformUtil: PlatformUtil;\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    data: any;\n    /**\n     * An @Input property that indicates when the drag should start.\n     * By default the drag starts after the draggable element is moved by 5px.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    dragTolerance: number;\n    /**\n     * An @Input property that indicates the directions that the element can be dragged.\n     * By default it is set to both horizontal and vertical directions.\n     * ```html\n     * <div igxDrag [dragDirection]=\"dragDir\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDir = DragDirection.HORIZONTAL;\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    dragDirection: DragDirection;\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    dragChannel: number | string | number[] | string[];\n    /**\n     * An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.\n     * By default it is set to `true`.\n     * If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.\n     * ```html\n     * <div igxDrag [ghost]=\"false\">\n     *      <span>Drag Me!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    ghost: boolean;\n    /**\n     * Sets a custom class that will be added to the `ghostElement` element.\n     * ```html\n     * <div igxDrag [ghostClass]=\"'ghostElement'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    ghostClass: string;\n    /**\n     * An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.\n     * By default a clone of the base element the igxDrag is instanced is created.\n     * ```html\n     * <div igxDrag [ghostTemplate]=\"customGhost\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * <ng-template #customGhost>\n     *      <div class=\"customGhostStyle\">\n     *          <span>I am being dragged!</span>\n     *      </div>\n     * </ng-template>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    ghostTemplate: TemplateRef<any>;\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    ghostHost: any;\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    dragStart: EventEmitter<IDragStartEventArgs>;\n    /**\n     * Event triggered when the draggable element has been moved.\n     * ```html\n     * <div igxDrag  (dragMove)=\"onDragMove()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragMove(){\n     *      alert(\"The element has moved!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    dragMove: EventEmitter<IDragMoveEventArgs>;\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    dragEnd: EventEmitter<IDragBaseEventArgs>;\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag (dragClick)=\"onDragClick()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragClick(){\n     *      alert(\"The element has been clicked!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    dragClick: EventEmitter<IDragBaseEventArgs>;\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostCreate)=\"ghostCreated()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostCreated(){\n     *      alert(\"The ghost has been created!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    ghostCreate: EventEmitter<IDragGhostBaseEventArgs>;\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostDestroy)=\"ghostDestroyed()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostDestroyed(){\n     *      alert(\"The ghost has been destroyed!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    ghostDestroy: EventEmitter<IDragGhostBaseEventArgs>;\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag (transitioned)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    transitioned: EventEmitter<IDragBaseEventArgs>;\n    /**\n     * @hidden\n     */\n    dragHandles: QueryList<IgxDragHandleDirective>;\n    /**\n     * @hidden\n     */\n    dragIgnoredElems: QueryList<IgxDragIgnoreDirective>;\n    /**\n     * @hidden\n     */\n    baseClass: boolean;\n    /**\n     * @hidden\n     */\n    selectDisabled: boolean;\n    /**\n     * Gets the current location of the element relative to the page.\n     */\n    get location(): IgxDragLocation;\n    /**\n     * Gets the original location of the element before dragging started.\n     */\n    get originLocation(): IgxDragLocation;\n    /**\n     * @hidden\n     */\n    get pointerEventsEnabled(): boolean;\n    /**\n     * @hidden\n     */\n    get touchEventsEnabled(): boolean;\n    /**\n     * @hidden\n     */\n    get pageX(): number;\n    /**\n     * @hidden\n     */\n    get pageY(): number;\n    protected get baseLeft(): number;\n    protected get baseTop(): number;\n    protected get baseOriginLeft(): number;\n    protected get baseOriginTop(): number;\n    protected set ghostLeft(pageX: number);\n    protected get ghostLeft(): number;\n    protected set ghostTop(pageY: number);\n    protected get ghostTop(): number;\n    /**\n     * @hidden\n     */\n    defaultReturnDuration: string;\n    /**\n     * @hidden\n     */\n    ghostElement: any;\n    /**\n     * @hidden\n     */\n    animInProgress: boolean;\n    protected ghostContext: any;\n    protected _startX: number;\n    protected _startY: number;\n    protected _lastX: number;\n    protected _lastY: number;\n    protected _dragStarted: boolean;\n    /** Drag ghost related properties */\n    protected _defaultOffsetX: any;\n    protected _defaultOffsetY: any;\n    protected _offsetX: any;\n    protected _offsetY: any;\n    protected _ghostStartX: any;\n    protected _ghostStartY: any;\n    protected _ghostHostX: number;\n    protected _ghostHostY: number;\n    protected _pointerDownId: any;\n    protected _clicked: boolean;\n    protected _lastDropArea: any;\n    protected _destroy: Subject<boolean>;\n    protected _removeOnDestroy: boolean;\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetX]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    set ghostOffsetX(value: any);\n    get ghostOffsetX(): any;\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetY]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDragDirective\n     */\n    set ghostOffsetY(value: any);\n    get ghostOffsetY(): any;\n    constructor(cdr: ChangeDetectorRef, element: ElementRef, viewContainer: ViewContainerRef, zone: NgZone, renderer: Renderer2, platformUtil: PlatformUtil);\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * Sets desired location of the base element or ghost element if rended relative to the document.\n     *\n     * @param newLocation New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll.\n     */\n    setLocation(newLocation: IgxDragLocation): void;\n    /**\n     * Animates the base or ghost element depending on the `ghost` input to its initial location.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * If the base element has changed its DOM position its initial location will be changed accordingly.\n     *\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    transitionToOrigin(customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation): void;\n    /**\n     * Animates the base or ghost element to a specific target location or other element using transition.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location.\n     *\n     * @param target Target that the base or ghost will transition to. It can be either location in the page or another HTML element.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    transitionTo(target: IgxDragLocation | ElementRef, customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation): void;\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    onPointerDown(event: any): void;\n    /**\n     * @hidden\n     * Perform drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned it. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    onPointerMove(event: any): void;\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the ghostElement and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned to it. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    onPointerUp(event: any): void;\n    /**\n     * @hidden\n     * Execute this method whe the pointer capture has been lost.\n     * This means that during dragging the user has performed other action like right clicking and then clicking somewhere else.\n     * This method will ensure that the drag state is being reset in this case as if the user released the dragged element.\n     * @param event Event captured\n     */\n    onPointerLost(event: any): void;\n    /**\n     * @hidden\n     */\n    onTransitionEnd(event: any): void;\n    /**\n     * @hidden\n     * Create ghost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param pageX Latest pointer position on the X axis relative to the page.\n     * @param pageY Latest pointer position on the Y axis relative to the page.\n     * @param node The Node object to be cloned.\n     */\n    protected createGhost(pageX: any, pageY: any, node?: any): void;\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent: any): void;\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent: any): void;\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number): any;\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target: any, eventName: string, eventArgs: IgxDragCustomEventDetails): void;\n    protected getTransformX(elem: any): number;\n    protected getTransformY(elem: any): number;\n    /** Method setting transformation to the base draggable element. */\n    protected setTransformXY(x: number, y: number): void;\n    protected getWindowScrollTop(): number;\n    protected getWindowScrollLeft(): number;\n    protected ghostHostOffsetLeft(ghostHost: any): number;\n    protected ghostHostOffsetTop(ghostHost: any): number;\n}\nexport declare class IgxDropDirective implements OnInit, OnDestroy {\n    element: ElementRef;\n    private _renderer;\n    private _zone;\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     *\n     * @memberof IgxDropDirective\n     */\n    set data(v: any);\n    get data(): any;\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     *\n     * @memberof IgxDropDirective\n     */\n    dropChannel: number | string | number[] | string[];\n    /**\n     * An @Input property that specifies a drop strategy type that will be executed when an `IgxDrag` element is released inside\n     *  the current drop area. The provided strategies are:\n     *  - IgxDefaultDropStrategy - This is the default base strategy and it doesn't perform any actions.\n     *  - IgxAppendDropStrategy - Appends the dropped element to last position as a direct child to the `igxDrop`.\n     *  - IgxPrependDropStrategy - Prepends the dropped element to first position as a direct child to the `igxDrop`.\n     *  - IgxInsertDropStrategy - If the dropped element is released above a child element of the `igxDrop`, it will be inserted\n     *      at that position. Otherwise the dropped element will be appended if released outside any child of the `igxDrop`.\n     * ```html\n     * <div igxDrag>\n     *      <span>DragMe</span>\n     * </div>\n     * <div igxDrop [dropStrategy]=\"myDropStrategy\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * import { IgxAppendDropStrategy } from 'igniteui-angular';\n     *\n     * export class App {\n     *      public myDropStrategy = IgxAppendDropStrategy;\n     * }\n     * ```\n     *\n     * @memberof IgxDropDirective\n     */\n    set dropStrategy(classRef: any);\n    get dropStrategy(): any;\n    /**\n     * Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDropDirective\n     */\n    enter: EventEmitter<IDropBaseEventArgs>;\n    /**\n     * Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDropDirective\n     */\n    over: EventEmitter<IDropBaseEventArgs>;\n    /**\n     * Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (leave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable element has left the chip area!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDropDirective\n     */\n    leave: EventEmitter<IDropBaseEventArgs>;\n    /**\n     * Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (dropped)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable element has been dropped in the chip area!\");\n     * }\n     * ```\n     *\n     * @memberof IgxDropDirective\n     */\n    dropped: EventEmitter<IDropDroppedEventArgs>;\n    /**\n     * @hidden\n     */\n    droppable: boolean;\n    /**\n     * @hidden\n     */\n    dragover: boolean;\n    /**\n     * @hidden\n     */\n    protected _destroy: Subject<boolean>;\n    protected _dropStrategy: IDropStrategy;\n    private _data;\n    constructor(element: ElementRef, _renderer: Renderer2, _zone: NgZone);\n    /**\n     * @hidden\n     */\n    onDragDrop(event: any): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    onDragOver(event: any): void;\n    /**\n     * @hidden\n     */\n    onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>): void;\n    /**\n     * @hidden\n     */\n    onDragLeave(event: any): void;\n    protected getWindowScrollTop(): number;\n    protected getWindowScrollLeft(): number;\n    protected isDragLinked(drag: IgxDragDirective): boolean;\n    protected getInsertIndexAt(draggedDir: IgxDragDirective, elementsAtPoint: any[]): number;\n}\n/**\n * @hidden\n */\nexport declare class IgxDragDropModule {\n}\n"]}