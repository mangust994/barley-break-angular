{"version":3,"file":"radio-group.directive.d.ts","sources":["radio-group.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { QueryList, EventEmitter, AfterContentInit, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\n/**\n * Determines the Radio Group alignment\n */\nexport declare const RadioGroupAlignment: {\n    horizontal: \"horizontal\";\n    vertical: \"vertical\";\n};\nexport declare type RadioGroupAlignment = (typeof RadioGroupAlignment)[keyof typeof RadioGroupAlignment];\n/**\n * Radio group directive renders set of radio buttons.\n *\n * @igxModule IgxRadioModule\n *\n * @igxTheme igx-radio-theme\n *\n * @igxKeywords radiogroup, radio, button, input\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * @example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\nexport declare class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     *\n     * @example\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     */\n    radioButtons: QueryList<IgxRadioComponent>;\n    /**\n     * Sets/gets the `value` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     */\n    get value(): any;\n    set value(newValue: any);\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     */\n    get name(): string;\n    set name(newValue: string);\n    /**\n     * Sets/gets whether the radio group is required.\n     *\n     * @remarks\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     */\n    get required(): boolean;\n    set required(newValue: boolean);\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     *\n     * @example\n     *  ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     */\n    get disabled(): boolean;\n    set disabled(newValue: boolean);\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     *\n     * @remarks\n     * If not set, `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     */\n    get labelPosition(): RadioLabelPosition | string;\n    set labelPosition(newValue: RadioLabelPosition | string);\n    /**\n     * Sets/gets the selected child radio button.\n     *\n     * @example\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     */\n    get selected(): IgxRadioComponent | null;\n    set selected(selected: IgxRadioComponent | null);\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     *\n     * @remarks\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group (change)=\"handler($event)\"></igx-radio-group>\n     * ```\n     */\n    readonly change: EventEmitter<IChangeRadioEventArgs>;\n    /**\n     * The css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    cssClass: string;\n    /**\n     * Sets vertical alignment to the radio group, if `alignment` is set to `vertical`.\n     * By default the alignment is horizontal.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group alignment=\"vertical\"></igx-radio-group>\n     * ```\n     */\n    private vertical;\n    /**\n     * Returns the alignment of the `igx-radio-group`.\n     * ```typescript\n     * @ViewChild(\"MyRadioGroup\")\n     * public radioGroup: IgxRadioGroupDirective;\n     * ngAfterViewInit(){\n     *    let radioAlignment = this.radioGroup.alignment;\n     * }\n     * ```\n     */\n    get alignment(): RadioGroupAlignment;\n    /**\n     * Allows you to set the radio group alignment.\n     * Available options are `RadioGroupAlignment.horizontal` (default) and `RadioGroupAlignment.vertical`.\n     * ```typescript\n     * public alignment = RadioGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     * <igx-radio-group [alignment]=\"alignment\"></igx-radio-group>\n     * ```\n     */\n    set alignment(value: RadioGroupAlignment);\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onChangeCallback;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _name;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _value;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selected;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _isInitialized;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _labelPosition;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _disabled;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _required;\n    /**\n     * @hidden\n     * @internal\n     */\n    private destroy$;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @remarks\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     *\n     * @example\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a function called when the control value changes.\n     *\n     * @hidden\n     * @internal\n     */\n    registerOnChange(fn: (_: any) => void): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Registers a function called when the control is touched.\n     *\n     * @hidden\n     * @internal\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _initRadioButtons;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selectedRadioButtonChanged;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonNames;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selectRadioButton;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonLabelPosition;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonsRequired;\n}\n/**\n * @hidden\n */\nexport declare class IgxRadioModule {\n}\n"]}