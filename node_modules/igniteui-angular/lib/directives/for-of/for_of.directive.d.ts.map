{"version":3,"file":"for_of.directive.d.ts","sources":["for_of.directive.d.ts"],"names":[],"mappingssourcesContent":["import { NgForOfContext } from '@angular/common';\nimport { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, DoCheck, EmbeddedViewRef, EventEmitter, IterableChanges, IterableDiffer, IterableDiffers, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, AfterViewInit } from '@angular/core';\nimport { DisplayContainerComponent } from './display.container';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from './for_of.sync.service';\nimport { Subject } from 'rxjs';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { IBaseEventArgs, PlatformUtil } from '../../core/utils';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n/**\n *  @publicApi\n */\nexport declare class IgxForOfContext<T> {\n    $implicit: T;\n    index: number;\n    count: number;\n    constructor($implicit: T, index: number, count: number);\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean;\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean;\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean;\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean;\n}\nexport declare class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy, AfterViewInit {\n    private _viewContainer;\n    protected _template: TemplateRef<NgForOfContext<T>>;\n    protected _differs: IterableDiffers;\n    private resolver;\n    cdr: ChangeDetectorRef;\n    protected _zone: NgZone;\n    protected syncScrollService: IgxForOfScrollSyncService;\n    protected platformUtil: PlatformUtil;\n    protected document: any;\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    igxForOf: any[];\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    igxForSizePropName: any;\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    igxForScrollOrientation: string;\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    igxForScrollContainer: any;\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    igxForContainerSize: any;\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    igxForItemSize: any;\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    onChunkLoad: EventEmitter<IForOfState>;\n    /**\n     * @hidden @internal\n     * An event that is emitted when scrollbar visibility has changed.\n     */\n    onScrollbarVisibilityChanged: EventEmitter<any>;\n    /**\n     * An event that is emitted after the rendered content size of the igxForOf has been changed.\n     */\n    onContentSizeChange: EventEmitter<any>;\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    onDataChanged: EventEmitter<any>;\n    onBeforeViewDestroyed: EventEmitter<EmbeddedViewRef<any>>;\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    onChunkPreload: EventEmitter<IForOfState>;\n    /**\n     * @hidden\n     */\n    dc: ComponentRef<DisplayContainerComponent>;\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    state: IForOfState;\n    protected func: any;\n    protected _sizesCache: number[];\n    protected scrollComponent: VirtualHelperBaseDirective;\n    protected _differ: IterableDiffer<T> | null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache: any[];\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop: number;\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal: boolean;\n    protected _embeddedViews: Array<EmbeddedViewRef<any>>;\n    protected contentResizeNotify: Subject<unknown>;\n    protected contentObserver: ResizeObserver;\n    /** Height that is being virtualized. */\n    protected _virtHeight: number;\n    /**\n     * @hidden\n     */\n    protected destroy$: Subject<any>;\n    private _totalItemCount;\n    private _adjustToIndex;\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio;\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * Similar to the property totalItemCount, but this will allow setting the data count into the template.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data | async\" [igxForTotalItemCount]=\"count | async\"\n     *  [igxForContainerSize]=\"'500px'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    get igxForTotalItemCount(): number;\n    set igxForTotalItemCount(value: number);\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    get totalItemCount(): number;\n    set totalItemCount(val: number);\n    get displayContainer(): HTMLElement | undefined;\n    get virtualHelper(): any;\n    /**\n     * @hidden\n     */\n    get isRemote(): boolean;\n    /**\n     *\n     * Gets/Sets the scroll position.\n     * ```typescript\n     * const position = directive.scrollPosition;\n     * directive.scrollPosition = value;\n     * ```\n     */\n    get scrollPosition(): number;\n    set scrollPosition(val: number);\n    protected get sizesCache(): number[];\n    protected set sizesCache(value: number[]);\n    private get _isScrolledToBottom();\n    private get _isAtBottomIndex();\n    constructor(_viewContainer: ViewContainerRef, _template: TemplateRef<NgForOfContext<T>>, _differs: IterableDiffers, resolver: ComponentFactoryResolver, cdr: ChangeDetectorRef, _zone: NgZone, syncScrollService: IgxForOfScrollSyncService, platformUtil: PlatformUtil, document: any);\n    verticalScrollHandler(event: any): void;\n    isScrollable(): boolean;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     */\n    ngDoCheck(): void;\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     *\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    addScrollTop(addTop: number): boolean;\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     *\n     * @param index\n     */\n    scrollTo(index: any): void;\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    scrollNext(): void;\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    scrollPrev(): void;\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    scrollNextPage(): void;\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    scrollPrevPage(): void;\n    /**\n     * @hidden\n     */\n    getColumnScrollLeft(colIndex: any): number;\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    getItemCountInView(): number;\n    /**\n     * Returns a reference to the scrollbar DOM element.\n     * This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.\n     * ```typescript\n     * dir.getScroll();\n     * ```\n     */\n    getScroll(): any;\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    getSizeAt(index: number): number;\n    /**\n     * @hidden\n     * Function that is called to get the native scrollbar size that the browsers renders.\n     */\n    getScrollNativeSize(): number;\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    getScrollForIndex(index: number, bottom?: boolean): number;\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    recalcUpdateSizes(): void;\n    /**\n     * @hidden\n     * Reset scroll position.\n     * Needed in case scrollbar is hidden/detached but we still need to reset it.\n     */\n    resetScrollPosition(): void;\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners(): void;\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event: any): void;\n    protected updateSizes(): void;\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number;\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void;\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void;\n    /**\n     * @hidden\n     */\n    protected getContextIndex(input: any): number;\n    /**\n     * @hidden\n     * Function which updates the passed context of an embedded view with the provided index\n     * from the view container.\n     * Often, called while handling a scroll event.\n     */\n    protected updateTemplateContext(context: any, index?: number): void;\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void;\n    /**\n     * @hidden\n     * @internal\n     *\n     * Clears focus inside the virtualized container on small scroll swaps.\n     */\n    protected scrollFocus(node?: HTMLElement): void;\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event: any): void;\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    get igxForTrackBy(): TrackByFunction<T>;\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>);\n    /**\n     * @hidden\n     */\n    protected _applyChanges(): void;\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number;\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number;\n    /**\n     * @hidden\n     */\n    protected getElement(viewref: any, nodeName: any): any;\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number;\n    protected _updateSizeCache(): void;\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number;\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left: any, set: any): number;\n    protected _recalcScrollBarSize(): void;\n    protected _calcHeight(): number;\n    protected _recalcOnContainerChange(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem(): void;\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem(): void;\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange(): void;\n    protected _updateScrollOffset(): void;\n    protected _calcVirtualScrollTop(scrollTop: number): void;\n    private _updateVScrollOffset;\n    private _updateHScrollOffset;\n    private _getItemSize;\n    private _adjustScrollPositionAfterSizeChange;\n}\nexport declare const getTypeNameForDebugging: (type: any) => string;\nexport interface IForOfState extends IBaseEventArgs {\n    startIndex?: number;\n    chunkSize?: number;\n}\nexport interface IForOfDataChangingEventArgs extends IBaseEventArgs {\n    containerSize: number;\n}\nexport declare class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n    protected syncScrollService: IgxForOfScrollSyncService;\n    protected syncService: IgxForOfSyncService;\n    set igxGridForOf(value: any[]);\n    get igxGridForOf(): any[];\n    /**\n     * @hidden\n     * @internal\n     */\n    get sizesCache(): number[];\n    /**\n     * @hidden\n     * @internal\n     */\n    set sizesCache(value: number[]);\n    protected get itemsDimension(): any;\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    onDataChanging: EventEmitter<IForOfDataChangingEventArgs>;\n    constructor(_viewContainer: ViewContainerRef, _template: TemplateRef<NgForOfContext<T>>, _differs: IterableDiffers, resolver: ComponentFactoryResolver, cdr: ChangeDetectorRef, _zone: NgZone, _platformUtil: PlatformUtil, _document: any, syncScrollService: IgxForOfScrollSyncService, syncService: IgxForOfSyncService);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    assumeMaster(): void;\n    ngDoCheck(): void;\n    onScroll(event: any): void;\n    onHScroll(scrollAmount: any): void;\n    protected getItemSize(item: any): number;\n    protected initSizesCache(items: any[]): number;\n    protected _updateSizeCache(changes?: IterableChanges<T>): void;\n    protected handleCacheChanges(changes: IterableChanges<T>): number;\n    protected addLastElem(): void;\n    protected _updateViews(prevChunkSize: any): void;\n    protected _applyChanges(): void;\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number;\n}\n/**\n * @hidden\n */\nexport declare class IgxForOfModule {\n}\n"]}