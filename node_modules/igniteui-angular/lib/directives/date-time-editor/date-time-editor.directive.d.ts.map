{"version":3,"file":"date-time-editor.directive.d.ts","sources":["date-time-editor.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer2, EventEmitter, OnChanges, SimpleChanges, DoCheck } from '@angular/core';\nimport { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { IgxMaskDirective } from '../mask/mask.directive';\nimport { MaskParsingService } from '../mask/mask-parsing.service';\nimport { IgxDateTimeEditorEventArgs, DatePart } from './date-time-editor.common';\n/**\n * Date Time Editor provides a functionality to input, edit and format date and time.\n *\n * @igxModule IgxDateTimeEditorModule\n *\n * @igxParent IgxInputGroup\n *\n * @igxTheme igx-input-theme\n *\n * @igxKeywords date, time, editor\n *\n * @igxGroup Scheduling\n *\n * @remarks\n *\n * The Ignite UI Date Time Editor Directive makes it easy for developers to manipulate date/time user input.\n * It requires input in a specified or default input format which is visible in the input element as a placeholder.\n * It allows the input of only date (ex: 'dd/MM/yyyy'), only time (ex:'HH:mm tt') or both at once, if needed.\n * Supports display format that may differ from the input format.\n * Provides methods to increment and decrement any specific/targeted `DatePart`.\n *\n * @example\n * ```html\n * <igx-input-group>\n *   <input type=\"text\" igxInput [igxDateTimeEditor]=\"'dd/MM/yyyy'\" [displayFormat]=\"'shortDate'\" [(ngModel)]=\"date\"/>\n * </igx-input-group>\n * ```\n */\nexport declare class IgxDateTimeEditorDirective extends IgxMaskDirective implements OnChanges, DoCheck, Validator, ControlValueAccessor {\n    protected renderer: Renderer2;\n    protected elementRef: ElementRef;\n    protected maskParser: MaskParsingService;\n    private _document;\n    private _locale;\n    /**\n     * Locale settings used for value formatting.\n     *\n     * @remarks\n     * Uses Angular's `LOCALE_ID` by default. Affects both input mask and display format if those are not set.\n     * If a `locale` is set, it must be registered via `registerLocaleData`.\n     * Please refer to https://angular.io/guide/i18n#i18n-pipes.\n     * If it is not registered, `Intl` will be used for formatting.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor [locale]=\"'en'\">\n     * ```\n     */\n    locale: string;\n    /**\n     * Minimum value required for the editor to remain valid.\n     *\n     * @remarks\n     * If a `string` value is passed, it must be in the defined input format.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor [minValue]=\"minDate\">\n     * ```\n     */\n    get minValue(): string | Date;\n    set minValue(value: string | Date);\n    /**\n     * Maximum value required for the editor to remain valid.\n     *\n     * @remarks\n     * If a `string` value is passed in, it must be in the defined input format.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor [maxValue]=\"maxDate\">\n     * ```\n     */\n    get maxValue(): string | Date;\n    set maxValue(value: string | Date);\n    /**\n     * Specify if the currently spun date segment should loop over.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor [isSpinLoop]=\"false\">\n     * ```\n     */\n    isSpinLoop: boolean;\n    /**\n     * Set both pre-defined format options such as `shortDate` and `longDate`,\n     * as well as constructed format string using characters supported by `DatePipe`, e.g. `EE/MM/yyyy`.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor [displayFormat]=\"'shortDate'\">\n     * ```\n     */\n    displayFormat: string;\n    /**\n     * Expected user input format (and placeholder).\n     *\n     * @example\n     * ```html\n     * <input [igxDateTimeEditor]=\"'dd/MM/yyyy'\">\n     * ```\n     */\n    set inputFormat(value: string);\n    get inputFormat(): string;\n    /**\n     * Editor value.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor [value]=\"date\">\n     * ```\n     */\n    set value(value: Date);\n    get value(): Date;\n    /**\n     * Emitted when the editor's value has changed.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor (valueChange)=\"onValueChanged($event)\"/>\n     * ```\n     */\n    valueChange: EventEmitter<Date>;\n    /**\n     * Emitted when the editor is not within a specified range or when the editor's value is in an invalid state.\n     *\n     * @example\n     * ```html\n     * <input igxDateTimeEditor [minValue]=\"minDate\" [maxValue]=\"maxDate\" (validationFailed)=\"onValidationFailed($event)\"/>\n     * ```\n     */\n    validationFailed: EventEmitter<IgxDateTimeEditorEventArgs>;\n    private _value;\n    private _format;\n    private document;\n    private _isFocused;\n    private _inputFormat;\n    private _minValue;\n    private _maxValue;\n    private _oldValue;\n    private _inputDateParts;\n    private onTouchCallback;\n    private onChangeCallback;\n    private onValidatorChange;\n    private get emptyMask();\n    private get targetDatePart();\n    private get hasDateParts();\n    private get hasTimeParts();\n    constructor(renderer: Renderer2, elementRef: ElementRef, maskParser: MaskParsingService, _document: any, _locale: any);\n    /** @hidden @internal */\n    ngOnChanges(changes: SimpleChanges): void;\n    /** @hidden @internal */\n    ngDoCheck(): void;\n    /** Clear the input element value. */\n    clear(): void;\n    /**\n     * Increment specified DatePart.\n     *\n     * @param datePart The optional DatePart to increment. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').\n     */\n    increment(datePart?: DatePart): void;\n    /**\n     * Decrement specified DatePart.\n     *\n     * @param datePart The optional DatePart to decrement. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').\n     */\n    decrement(datePart?: DatePart): void;\n    /** @hidden @internal */\n    writeValue(value: any): void;\n    /** @hidden @internal */\n    validate(control: AbstractControl): ValidationErrors | null;\n    /** @hidden @internal */\n    registerOnValidatorChange?(fn: () => void): void;\n    /** @hidden @internal */\n    registerOnChange(fn: any): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: any): void;\n    /** @hidden @internal */\n    setDisabledState?(isDisabled: boolean): void;\n    /** @hidden @internal */\n    onInputChanged(): void;\n    /** @hidden @internal */\n    onKeyDown(event: KeyboardEvent): void;\n    /** @hidden @internal */\n    onFocus(): void;\n    /** @hidden @internal */\n    onBlur(value: string): void;\n    /** @hidden @internal */\n    updateMask(): void;\n    parseDate(val: string): Date | null;\n    private getMaskedValue;\n    private updateInputFormat;\n    private isDate;\n    private valueInRange;\n    private spinValue;\n    private updateValue;\n    private toTwelveHourFormat;\n    private getPartValue;\n    private prependValue;\n    private spin;\n    private inputIsComplete;\n    private isValidDate;\n    private moveCursor;\n    /**\n     * Move the cursor in a specific direction until it reaches a date/time separator.\n     * Then return its index.\n     *\n     * @param value The string it operates on.\n     * @param direction 0 is left, 1 is right. Default is 0.\n     */\n    private getNewPosition;\n}\nexport declare class IgxDateTimeEditorModule {\n}\n"]}