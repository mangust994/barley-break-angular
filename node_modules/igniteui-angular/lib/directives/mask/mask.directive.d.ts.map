{"version":3,"file":"mask.directive.d.ts","sources":["mask.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, PipeTransform, Renderer2, OnInit, AfterViewChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MaskParsingService, MaskOptions } from './mask-parsing.service';\nimport { IBaseEventArgs } from '../../core/utils';\nexport declare class IgxMaskDirective implements OnInit, AfterViewChecked, ControlValueAccessor {\n    protected elementRef: ElementRef;\n    protected maskParser: MaskParsingService;\n    protected renderer: Renderer2;\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     */\n    mask: string;\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     */\n    promptChar: string;\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     */\n    includeLiterals: boolean;\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     */\n    set placeholder(val: string);\n    get placeholder(): string;\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     */\n    displayValuePipe: PipeTransform;\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     */\n    focusedValuePipe: PipeTransform;\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    onValueChange: EventEmitter<IMaskEventArgs>;\n    /** @hidden */\n    get nativeElement(): HTMLInputElement;\n    /** @hidden @internal; */\n    protected get inputValue(): string;\n    /** @hidden @internal */\n    protected set inputValue(val: string);\n    /** @hidden */\n    protected get maskOptions(): MaskOptions;\n    /** @hidden */\n    protected get selectionStart(): number;\n    /** @hidden */\n    protected get selectionEnd(): number;\n    /** @hidden */\n    protected get start(): number;\n    /** @hidden */\n    protected get end(): number;\n    private _end;\n    private _start;\n    private _key;\n    private _oldText;\n    private _dataValue;\n    private _focused;\n    private _droppedData;\n    private _hasDropAction;\n    private _stopPropagation;\n    private _onTouchedCallback;\n    private _onChangeCallback;\n    constructor(elementRef: ElementRef, maskParser: MaskParsingService, renderer: Renderer2);\n    /** @hidden */\n    onKeyDown(event: any): void;\n    /** @hidden */\n    onInputChanged(): void;\n    /** @hidden */\n    onPaste(): void;\n    /** @hidden */\n    onFocus(): void;\n    /** @hidden */\n    onBlur(value: string): void;\n    /** @hidden */\n    onDragEnter(): void;\n    /** @hidden */\n    onDragLeave(): void;\n    /** @hidden */\n    onDrop(event: DragEvent): void;\n    /** @hidden */\n    ngOnInit(): void;\n    /**\n     * TODO: Remove after date/time picker integration refactor\n     *\n     * @hidden\n     */\n    ngAfterViewChecked(): void;\n    /** @hidden */\n    writeValue(value: string): void;\n    /** @hidden */\n    registerOnChange(fn: (_: any) => void): void;\n    /** @hidden */\n    registerOnTouched(fn: () => void): void;\n    /** @hidden */\n    protected showMask(value: string): void;\n    /** @hidden */\n    protected setSelectionRange(start: number, end?: number): void;\n    /** @hidden */\n    protected afterInput(): void;\n    private showDisplayValue;\n}\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n/** @hidden */\nexport declare class IgxMaskModule {\n}\n"]}