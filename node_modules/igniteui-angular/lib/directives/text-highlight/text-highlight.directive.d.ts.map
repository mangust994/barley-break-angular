{"version":3,"file":"text-highlight.directive.d.ts","sources":["text-highlight.directive.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { AfterViewInit, ElementRef, OnChanges, OnDestroy, Renderer2, SimpleChanges, AfterViewChecked } from '@angular/core';\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n    /**\n     * Additional, custom checks to perform prior an element highlighting.\n     */\n    metadata?: Map<string, any>;\n}\nexport declare class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private element;\n    renderer: Renderer2;\n    static highlightGroupsMap: Map<string, IActiveHighlightInfo>;\n    private static onActiveElementChanged;\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    cssClass: string;\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    activeCssClass: string;\n    /**\n     * @hidden\n     */\n    containerClass: string;\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    groupName: string;\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    get value(): any;\n    set value(value: any);\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    row: any;\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    column: any;\n    /**\n     * A map that contains all aditional conditions, that you need to activate a highlighted\n     * element. To activate the condition, you will have to add a new metadata key to\n     * the `metadata` property of the IActiveHighlightInfo interface.\n     *\n     * @example\n     * ```typescript\n     *  // Set a property, which would disable the highlight for a given element on a cetain condition\n     *  const metadata = new Map<string, any>();\n     *  metadata.set('highlightElement', false);\n     * ```\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [metadata]=\"metadata\">\n     * </div>\n     * ```\n     */\n    metadata: Map<string, any>;\n    /**\n     * @hidden\n     */\n    get lastSearchInfo(): ISearchInfo;\n    /**\n     * @hidden\n     */\n    parentElement: any;\n    private _container;\n    private destroy$;\n    private _value;\n    private _lastSearchInfo;\n    private _div;\n    private _observer;\n    private _nodeWasRemoved;\n    private _forceEvaluation;\n    private _activeElementIndex;\n    private _valueChanged;\n    private _defaultCssClass;\n    private _defaultActiveCssClass;\n    constructor(element: ElementRef, renderer: Renderer2);\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo): void;\n    /**\n     * Clears any existing highlight.\n     */\n    static clearActiveHighlight(groupName: any): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked(): void;\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number;\n    /**\n     * Clears any existing highlight.\n     */\n    clearHighlight(): void;\n    /**\n     * Activates the highlight if it is on the currently active row and column.\n     */\n    activateIfNecessary(): void;\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    observe(): void;\n    private activate;\n    private deactivate;\n    private clearChildElements;\n    private getHighlightedText;\n    private appendText;\n    private appendSpan;\n    private appendDiv;\n    private searchNeedsEvaluation;\n}\n/**\n * @hidden\n */\nexport declare class IgxTextHighlightModule {\n}\nexport {};\n"]}