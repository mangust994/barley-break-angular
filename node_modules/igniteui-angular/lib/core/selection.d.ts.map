{"version":3,"file":"selection.d.ts","sources":["selection.d.ts"],"names":[],"mappingssourcesContent":["/** @hidden */\nexport declare class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string, Set<any>>;\n    /**\n     * Get current component selection.\n     *\n     * @param componentID ID of the component.\n     */\n    get(componentID: string): Set<any>;\n    /**\n     * Set new component selection.\n     *\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    set(componentID: string, newSelection: Set<any>): void;\n    /**\n     * Clears selection for component.\n     *\n     * @param componentID ID of the component.\n     */\n    clear(componentID: string): void;\n    /**\n     * Get current component selection length.\n     *\n     * @param componentID ID of the component.\n     */\n    size(componentID: string): number;\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     *\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    add_item(componentID: string, itemID: any, sel?: Set<any>): Set<any>;\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     *\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any>;\n    /**\n     * Add item to the current component selection.\n     *\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    select_item(componentID: string, itemID: any, sel?: Set<any>): void;\n    /**\n     * Add items to the current component selection.\n     *\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    select_items(componentID: string, itemID: any[], clearSelection?: boolean): void;\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     *\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    delete_item(componentID: string, itemID: any, sel?: Set<any>): Set<any>;\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     *\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    delete_items(componentID: string, itemIDs: any[]): Set<any>;\n    /**\n     * Remove item from the current component selection.\n     *\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    deselect_item(componentID: string, itemID: any, sel?: Set<any>): void;\n    /**\n     * Remove items to the current component selection.\n     *\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    deselect_items(componentID: string, itemID: any[], clearSelection?: boolean): void;\n    /**\n     * Check if the item is selected in the component selection.\n     *\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    is_item_selected(componentID: string, itemID: any): boolean;\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     *\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    first_item(componentID: string): any;\n    /**\n     * Returns whether all items are selected.\n     *\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    are_all_selected(componentID: string, dataCount: number): boolean;\n    /**\n     * Returns whether any of the items is selected.\n     *\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    are_none_selected(componentID: string): boolean;\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     *\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    get_all_ids(data: any, primaryKey?: any): any;\n    /**\n     * Returns empty selection collection.\n     *\n     * @returns empty set.\n     */\n    get_empty(): Set<unknown>;\n}\n"]}