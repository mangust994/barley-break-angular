{"version":3,"file":"touch.d.ts","sources":["touch.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/// <reference types=\"hammerjs\" />\nimport { NgZone } from '@angular/core';\nimport { PlatformUtil } from './utils';\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n *\n * @hidden\n */\nexport declare class HammerGesturesManager {\n    private _zone;\n    private doc;\n    private platformUtil;\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions;\n    private platformBrowser;\n    private _hammerManagers;\n    constructor(_zone: NgZone, doc: any, platformUtil: PlatformUtil);\n    supports(eventName: string): boolean;\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    addEventListener(element: HTMLElement, eventName: string, eventHandler: (eventObj: any) => void, options?: HammerOptions): () => void;\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj: any) => void): () => void;\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     *\n     * @param target Target name\n     */\n    getGlobalEventTarget(target: string): EventTarget;\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    setManagerOption(element: EventTarget, event: string, options: any): void;\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    addManagerForElement(element: EventTarget, manager: HammerManager): void;\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    getManagerForElement(element: EventTarget): HammerManager;\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    removeManagerForElement(element: HTMLElement): void;\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    destroy(): void;\n}\n"]}