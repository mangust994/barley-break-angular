{"version":3,"file":"switch.component.d.ts","sources":["switch.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, Provider, ElementRef } from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor } from '@angular/forms';\nimport { IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\nexport declare const SwitchLabelPosition: {\n    BEFORE: \"before\";\n    AFTER: \"after\";\n};\nexport declare type SwitchLabelPosition = (typeof SwitchLabelPosition)[keyof typeof SwitchLabelPosition];\nexport interface IChangeSwitchEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n/**\n *\n * The Switch component is a binary choice selection component.\n *\n * @igxModule IgxSwitchModule\n *\n * @igxTheme igx-switch-theme, igx-tooltip-theme\n *\n * @igxKeywords switch, states, tooltip\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * @example\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\nexport declare class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns a reference to the native checkbox element.\n     *\n     * @example\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     */\n    nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     *\n     * @example\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     */\n    nativeLabel: ElementRef;\n    /**\n     * Returns reference to the label placeholder element.\n     *\n     * @example\n     * ```typescript\n     * let labelPlaceholder = this.switch.placeholderLabel;\n     * ```\n     */\n    placeholderLabel: ElementRef;\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     */\n    id: string;\n    /**\n     * Sets/gets the id of the `label` element of the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     */\n    labelId: string;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     *\n     * @example\n     * ```html\n     * <igx-switch [value]=\"switchValue\"></igx-switch>\n     * ```\n     */\n    value: string;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     *\n     * @example\n     * ```html\n     * <igx-switch name=\"Switch1\"></igx-switch>\n     * ```\n     */\n    name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     */\n    tabindex: number;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     */\n    labelPosition: SwitchLabelPosition | string;\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     */\n    disableRipple: boolean;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     */\n    required: boolean;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     */\n    ariaLabelledBy: string;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     */\n    ariaLabel: string | null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     */\n    readonly change: EventEmitter<IChangeSwitchEventArgs>;\n    /**\n     * Returns the class of the switch component.\n     *\n     * @example\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     */\n    cssClass: string;\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     *\n     * @example\n     * ```html\n     *  <igx-switch [checked]=\"true\"></igx-switch>\n     * ```\n     */\n    checked: boolean;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [disabled]=\"true\"><igx-switch>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     */\n    focused: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    inputId: string;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected _value: any;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onTouchedCallback;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onChangeCallback;\n    /**\n     * @hidden\n     * @internal\n     */\n    onKeyUp(event: KeyboardEvent): void;\n    /**\n     * Toggles the checked state of the switch.\n     *\n     * @example\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     */\n    toggle(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    _onSwitchChange(event: Event): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    _onSwitchClick(event: Event): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onLabelClick(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onBlur(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    getEditElement(): any;\n    /**\n     * @hidden\n     * @internal\n     */\n    get labelClass(): string;\n    /**\n     * @hidden\n     * @internal\n     */\n    registerOnChange(fn: (_: any) => void): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    registerOnTouched(fn: () => void): void;\n}\nexport declare const IGX_SWITCH_REQUIRED_VALIDATOR: Provider;\nexport declare class IgxSwitchRequiredDirective extends CheckboxRequiredValidator {\n}\n/**\n * @hidden\n */\nexport declare class IgxSwitchModule {\n}\n"]}