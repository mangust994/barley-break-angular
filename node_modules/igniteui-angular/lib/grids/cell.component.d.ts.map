{"version":3,"file":"cell.component.d.ts","sources":["cell.component.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"hammerjs\" />\nimport { ChangeDetectorRef, ElementRef, TemplateRef, NgZone, OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { PlatformUtil } from '../core/utils';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from './selection/selection.service';\nimport { HammerGesturesManager } from '../core/touch';\nimport { ColumnType } from './common/column.interface';\nimport { RowType } from './common/row.interface';\nimport { GridType } from './common/grid.interface';\nimport { ISearchInfo } from './grid/public_api';\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\nexport declare class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    protected selectionService: IgxGridSelectionService;\n    protected crudService: IgxGridCRUDService;\n    gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>;\n    cdr: ChangeDetectorRef;\n    private element;\n    protected zone: NgZone;\n    private touchManager;\n    protected platformUtil: PlatformUtil;\n    /**\n     * @hidden\n     * @internal\n     */\n    get isEmptyAddRowCell(): boolean;\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    column: ColumnType;\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    row: RowType;\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    rowData: any;\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    cellTemplate: TemplateRef<any>;\n    pinnedIndicator: TemplateRef<any>;\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    value: any;\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    formatter: (value: any) => any;\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any;\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any>;\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get pinnedIndicatorTemplate(): TemplateRef<any>;\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any;\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any;\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get rowIndex(): number;\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number;\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get visibleColumnIndex(): number;\n    set visibleColumnIndex(val: number);\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get cellID(): {\n        rowID: any;\n        columnID: number;\n        rowIndex: number;\n    };\n    get attrCellID(): string;\n    get title(): any;\n    get booleanClass(): any;\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement;\n    /**\n     * @hidden\n     * @internal\n     */\n    get cellSelectionMode(): string;\n    set cellSelectionMode(value: string);\n    /**\n     * @hidden\n     * @internal\n     */\n    set lastSearchInfo(value: ISearchInfo);\n    /**\n     * @hidden\n     * @internal\n     */\n    lastPinned: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    firstPinned: boolean;\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    editMode: boolean;\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    role: string;\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get readonly(): boolean;\n    get gridRowSpan(): number;\n    get gridColumnSpan(): number;\n    get rowEnd(): number;\n    get colEnd(): number;\n    get rowStart(): number;\n    get colStart(): number;\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    width: string;\n    /**\n     * @hidden\n     */\n    active: boolean;\n    get ariaSelected(): boolean;\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get selected(): boolean;\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean);\n    /**\n     * Gets whether the cell column is selected.\n     * ```typescript\n     * let isCellColumnSelected = this.cell.columnSelected;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get columnSelected(): boolean;\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    set editValue(value: any);\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    get editValue(): any;\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean;\n    /**\n     * @hidden\n     */\n    displayPinnedChip: boolean;\n    protected defaultCellTemplate: TemplateRef<any>;\n    protected defaultPinnedIndicator: TemplateRef<any>;\n    protected inlineEditorTemplate: TemplateRef<any>;\n    protected addRowCellTemplate: TemplateRef<any>;\n    protected set highlight(value: IgxTextHighlightDirective);\n    protected get highlight(): IgxTextHighlightDirective;\n    protected get selectionNode(): ISelectionNode;\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    highlightClass: string;\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    activeHighlightClass: string;\n    /** @hidden @internal */\n    get step(): number;\n    /** @hidden @internal */\n    get currencyCode(): string;\n    /** @hidden @internal */\n    get currencyCodeSymbol(): string;\n    /** @hidden @internal @deprecated */\n    focused: boolean;\n    protected compositionStartHandler: any;\n    protected compositionEndHandler: any;\n    protected _lastSearchInfo: ISearchInfo;\n    private _highlight;\n    private _cellSelection;\n    private _vIndex;\n    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, cdr: ChangeDetectorRef, element: ElementRef, zone: NgZone, touchManager: HammerGesturesManager, platformUtil: PlatformUtil);\n    /**\n     * @deprecated\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    isCellSelected(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    onDoubleClick: (event: MouseEvent | HammerInput) => void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onClick(event: MouseEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    onContextMenu(event: MouseEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus(event?: Event): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void;\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    update(val: any): void;\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown: (event: PointerEvent) => void;\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter: (event: PointerEvent) => void;\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup: (event: PointerEvent) => void;\n    /**\n     * @hidden\n     * @internal\n     */\n    activate(event: FocusEvent | KeyboardEvent): void;\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number;\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     *\n     * @memberof IgxGridCellComponent\n     */\n    clearHighlight(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    calculateSizeToFit(range: any): number;\n    /**\n     * @hidden\n     * @internal\n     */\n    get searchMetadata(): Map<string, any>;\n    private addPointerListeners;\n    private removePointerListeners;\n}\n"]}