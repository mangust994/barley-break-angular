import { PipeTransform } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { GridType } from './grid.interface';
import { IgxColumnComponent } from '../columns/column.component';
import { ColumnDisplayOrder } from './enums';
import { IgxColumnActionsComponent } from '../column-actions/column-actions.component';
/**
 * @hidden
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridCellStyleClassesPipe implements PipeTransform {
    transform(cssClasses: {
        [prop: string]: any;
    }, _: any, data: any, field: string, index: number, __: number): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridCellStyleClassesPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridCellStyleClassesPipe, "igxCellStyleClasses">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridCellStylesPipe implements PipeTransform {
    transform(styles: {
        [prop: string]: any;
    }, _: any, data: any, field: string, index: number, __: number): {
        [prop: string]: any;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridCellStylesPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridCellStylesPipe, "igxCellStyles">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridNotGroupedPipe implements PipeTransform {
    transform(value: any[]): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridNotGroupedPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridNotGroupedPipe, "igxNotGrouped">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridTopLevelColumns implements PipeTransform {
    transform(value: any[]): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridTopLevelColumns, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridTopLevelColumns, "igxTopLevel">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridFilterConditionPipe implements PipeTransform {
    transform(value: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridFilterConditionPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridFilterConditionPipe, "filterCondition">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridTransactionPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], id: string, pipeTrigger: number): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridTransactionPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridTransactionPipe, "gridTransaction">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridPaginatorOptionsPipe implements PipeTransform {
    transform(values: Array<number>): number[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridPaginatorOptionsPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridPaginatorOptionsPipe, "paginatorOptions">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxHasVisibleColumnsPipe implements PipeTransform {
    transform(values: any[], hasVisibleColumns: any): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxHasVisibleColumnsPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxHasVisibleColumnsPipe, "visibleColumns">;
}
/**
 * @hidden
 */
export declare class IgxGridRowPinningPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], id: string, isPinned: boolean, pipeTrigger: number): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridRowPinningPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridRowPinningPipe, "gridRowPinning">;
}
export declare class IgxColumnActionEnabledPipe implements PipeTransform {
    protected columnActions: IgxColumnActionsComponent;
    constructor(columnActions: IgxColumnActionsComponent);
    transform(collection: IgxColumnComponent[], actionFilter: (value: IgxColumnComponent, index: number, array: IgxColumnComponent[]) => boolean, pipeTrigger: number): IgxColumnComponent[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxColumnActionEnabledPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxColumnActionEnabledPipe, "columnActionEnabled">;
}
export declare class IgxFilterActionColumnsPipe implements PipeTransform {
    protected columnActions: IgxColumnActionsComponent;
    constructor(columnActions: IgxColumnActionsComponent);
    transform(collection: IgxColumnComponent[], filterCriteria: string, pipeTrigger: number): IgxColumnComponent[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilterActionColumnsPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxFilterActionColumnsPipe, "filterActionColumns">;
}
export declare class IgxSortActionColumnsPipe implements PipeTransform {
    transform(collection: IgxColumnComponent[], displayOrder: ColumnDisplayOrder, pipeTrigger: number): IgxColumnComponent[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSortActionColumnsPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxSortActionColumnsPipe, "sortActionColumns">;
}
export declare class IgxGridDataMapperPipe implements PipeTransform {
    transform(data: any[], field: string, _: number, val: any, isNestedPath: boolean): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridDataMapperPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridDataMapperPipe, "dataMapper">;
}
export declare class IgxStringReplacePipe implements PipeTransform {
    transform(value: string, search: string | RegExp, replacement: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxStringReplacePipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxStringReplacePipe, "igxStringReplace">;
}
export declare class IgxGridTransactionStatePipe implements PipeTransform {
    transform(row_id: any, field: string, rowEditable: boolean, transactions: any, _: any, __: any, ___: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridTransactionStatePipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridTransactionStatePipe, "transactionState">;
}
export declare class IgxColumnFormatterPipe implements PipeTransform {
    transform(value: any, formatter: (v: any) => any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxColumnFormatterPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxColumnFormatterPipe, "columnFormatter">;
}
export declare class IgxGridAddRowPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any, isPinned: boolean, pipeTrigger: number): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridAddRowPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridAddRowPipe, "gridAddRow">;
}

//# sourceMappingURL=pipes.d.ts.map