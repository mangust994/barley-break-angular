{"version":3,"file":"row.directive.d.ts","sources":["row.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, DoCheck, ElementRef, QueryList, EventEmitter, AfterViewInit, OnDestroy } from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from './selection/selection.service';\nimport { GridType } from './common/grid.interface';\nimport { Subject } from 'rxjs';\nexport declare class IgxRowDirective<T extends IgxGridBaseDirective & GridType> implements DoCheck, AfterViewInit, OnDestroy {\n    gridAPI: GridBaseAPIService<T>;\n    crudService: IgxGridCRUDService;\n    selectionService: IgxGridSelectionService;\n    element: ElementRef<HTMLElement>;\n    cdr: ChangeDetectorRef;\n    /**\n     * @hidden\n     */\n    onAnimationEnd: EventEmitter<IgxRowDirective<T>>;\n    /**\n     * @hidden\n     */\n    role: string;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    get rowData(): any;\n    set rowData(v: any);\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    index: number;\n    /**\n     * Sets whether this specific row has disabled functionality for editing and row selection.\n     * Default value is `false`.\n     * ```typescript\n     * this.grid.selectedRows[0].pinned = true;\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * Sets whether the row is pinned.\n     * Default value is `false`.\n     * ```typescript\n     * this.grid.selectedRows[0].pinned = true;\n     * ```\n     */\n    set pinned(value: boolean);\n    /**\n     * Gets whether the row is pinned.\n     * ```typescript\n     * let isPinned = row.pinned;\n     * ```\n     */\n    get pinned(): boolean;\n    get addRow(): any;\n    set addRow(v: any);\n    get rowHeight(): any;\n    get cellHeight(): any;\n    /**\n     * @hidden\n     */\n    gridID: string;\n    /**\n     * @hidden\n     */\n    _virtDirRow: QueryList<IgxGridForOfDirective<any>>;\n    get virtDirRow(): IgxGridForOfDirective<any>;\n    /**\n     * @hidden\n     */\n    checkboxElement: IgxCheckboxComponent;\n    protected _cells: QueryList<any>;\n    /**\n     * Gets the rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    get cells(): QueryList<any>;\n    set cells(cells: QueryList<any>);\n    get dataRowIndex(): number;\n    /**\n     * @hidden\n     */\n    get styleClasses(): string;\n    /**\n     * @hidden\n     */\n    get selected(): boolean;\n    set selected(value: boolean);\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[];\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number;\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    get isRoot(): boolean;\n    /**\n     * @hidden\n     */\n    get hasChildren(): boolean;\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    get showRowSelectors(): boolean;\n    /** @hidden */\n    get dirty(): boolean;\n    /**\n     * @hidden\n     */\n    get rowDraggable(): boolean;\n    /** @hidden */\n    get added(): boolean;\n    /** @hidden */\n    get deleted(): boolean;\n    /**\n     * @hidden\n     */\n    get dragging(): boolean;\n    get inEditMode(): boolean;\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T;\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    get rowID(): any;\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement(): HTMLElement;\n    /**\n     * @hidden\n     */\n    focused: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    defaultCssClass: string;\n    /**\n     * @hidden\n     */\n    animateAdd: boolean;\n    protected destroy$: Subject<any>;\n    protected _rowData: any;\n    protected _addRow: boolean;\n    constructor(gridAPI: GridBaseAPIService<T>, crudService: IgxGridCRUDService, selectionService: IgxGridSelectionService, element: ElementRef<HTMLElement>, cdr: ChangeDetectorRef);\n    /**\n     * @hidden\n     * @internal\n     */\n    onClick(event: MouseEvent): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    showActionStrip(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    onRowSelectorClick(event: any): void;\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    update(value: any): void;\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    delete(): void;\n    isCellActive(visibleColumnIndex: any): boolean;\n    /**\n     * Pins the specified row.\n     * This method emits `onRowPinning` event.\n     *\n     * ```typescript\n     * // pin the selected row from the grid\n     * this.grid.selectedRows[0].pin();\n     * ```\n     */\n    pin(): boolean;\n    /**\n     * Unpins the specified row.\n     * This method emits `onRowPinning` event.\n     *\n     * ```typescript\n     * // unpin the selected row from the grid\n     * this.grid.selectedRows[0].unpin();\n     * ```\n     */\n    unpin(): boolean;\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel(): string;\n    /**\n     * @hidden\n     */\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    shouldDisplayPinnedChip(visibleColumnIndex: number): boolean;\n    animationEndHandler(): void;\n    /**\n     * Spawns the add row UI for the specific row.\n     *\n     * @example\n     * ```typescript\n     * const row = this.grid1.getRowByIndex(1);\n     * row.beginAddRow();\n     * ```\n     */\n    beginAddRow(): void;\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string;\n    /**\n     * @hidden\n     */\n    get resolveDragIndicatorClasses(): string;\n}\n"]}