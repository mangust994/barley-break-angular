{"version":3,"file":"grid-base.directive.d.ts","sources":["grid-base.directive.d.ts"],"names":[],"mappingssourcesContent":["import { DatePipe, DecimalPipe, CurrencyPipe, PercentPipe } from '@angular/common';\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, IterableDiffers, NgZone, OnDestroy, OnInit, QueryList, TemplateRef, ViewContainerRef, InjectionToken, DoCheck } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport 'igniteui-trial-watermark';\nimport { Subject } from 'rxjs';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxOverlayService, OverlaySettings } from '../services/public_api';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { IPinningConfig } from './grid.common';\nimport { IgxGridToolbarComponent } from './toolbar/grid-toolbar.component';\nimport { IgxRowDirective } from './row.directive';\nimport { IgxGridHeaderComponent } from './headers/grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionService, State } from '../services/public_api';\nimport { IgxRowEditTabStopDirective } from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid/public_api';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/base/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './headers/grid-header-group.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow } from './selection/selection.service';\nimport { DragScrollDirection } from './selection/drag-select.directive';\nimport { ICachedViewLoadedEventArgs } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport { IgxGridColumnResizerComponent } from './resizing/resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/base/grid-filtering-row.component';\nimport { IgxColumnResizingService } from './resizing/resizing.service';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport { GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode, GridPagingMode } from './common/enums';\nimport { IGridCellEventArgs, IRowSelectionEventArgs, IPinColumnEventArgs, IGridEditEventArgs, IPageEventArgs, IRowDataEventArgs, IColumnResizeEventArgs, IColumnMovingStartEventArgs, IColumnMovingEventArgs, IColumnMovingEndEventArgs, IGridKeydownEventArgs, IRowDragStartEventArgs, IRowDragEndEventArgs, IGridClipboardEvent, IGridToolbarExportEventArgs, ISearchInfo, ICellPosition, IRowToggleEventArgs, IColumnSelectionEventArgs, IPinRowEventArgs, IGridScrollEventArgs, IGridEditDoneEventArgs, IActiveNodeChangeEventArgs, ISortingEventArgs, IFilteringEventArgs, IColumnVisibilityChangedEventArgs, IColumnVisibilityChangingEventArgs, IPinColumnCancellableEventArgs } from './common/events';\nimport { GridType } from './common/grid.interface';\nimport { DropPosition } from './moving/moving.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './selection/row-selectors';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IGridSortingStrategy } from '../data-operations/sorting-strategy';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxSnackbarComponent } from '../snackbar/snackbar.component';\nimport { IgxActionStripComponent } from '../action-strip/action-strip.component';\nexport declare const IgxGridTransaction: InjectionToken<string>;\nexport declare abstract class IgxGridBaseDirective extends DisplayDensityBase implements GridType, OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    selectionService: IgxGridSelectionService;\n    crudService: IgxGridCRUDService;\n    colResizingService: IgxColumnResizingService;\n    gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>;\n    protected _transactions: TransactionService<Transaction, State>;\n    private elementRef;\n    private zone;\n    document: any;\n    cdr: ChangeDetectorRef;\n    protected resolver: ComponentFactoryResolver;\n    protected differs: IterableDiffers;\n    protected viewRef: ViewContainerRef;\n    navigation: IgxGridNavigationService;\n    filteringService: IgxFilteringService;\n    protected overlayService: IgxOverlayService;\n    summaryService: IgxGridSummaryService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    private localeId;\n    /**\n     * Gets/Sets the display time for the row adding snackbar notification.\n     *\n     * @remarks\n     * By default it is 6000ms.\n     */\n    snackbarDisplayTime: number;\n    /**\n     * Gets/Sets whether to autogenerate the columns.\n     *\n     * @remarks\n     * The default value is false. When set to true, it will override all columns declared through code or in markup.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    autoGenerate: boolean;\n    /**\n     * Gets/Sets a custom template when empty.\n     *\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    emptyGridTemplate: TemplateRef<any>;\n    /**\n     * Gets/Sets a custom template for adding row UI when grid is empty.\n     *\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [addRowEmptyTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    addRowEmptyTemplate: TemplateRef<any>;\n    /**\n     * Gets/Sets a custom template when loading.\n     *\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    loadingGridTemplate: TemplateRef<any>;\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    clipboardOptions: {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: boolean;\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: boolean;\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: boolean;\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: string;\n    };\n    /**\n     * Emitted after filtering is performed.\n     *\n     * @remarks\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *              (filteringExpressionsTreeChange)=\"filteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     */\n    filteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    /**\n     * Emitted after advanced filtering is performed.\n     *\n     * @remarks\n     * Returns the advanced filtering expressions tree.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *           (advancedFilteringExpressionsTreeChange)=\"advancedFilteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     */\n    advancedFilteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    /**\n     * Emitted when grid is scrolled horizontally/vertically.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *              (onScroll)=\"onScroll($event)\"></igx-grid>\n     * ```\n     */\n    onScroll: EventEmitter<IGridScrollEventArgs>;\n    /**\n     * Emitted after the current page is changed.\n     *\n     * @example\n     * ```html\n     * <igx-grid (pageChange)=\"onPageChange($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onPageChange(page: number) {\n     *   this.currentPage = page;\n     * }\n     * ```\n     */\n    pageChange: EventEmitter<number>;\n    /**\n     * Emitted when `perPage` property value of the grid is changed.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid (perPageChange)=\"onPerPageChange($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onPerPageChange(perPage: number) {\n     *   this.perPage = perPage;\n     * }\n     * ```\n     */\n    perPageChange: EventEmitter<number>;\n    /**\n     * Gets/Sets a custom `ng-template` for the pagination UI of the grid.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n     */\n    paginationTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    class: string;\n    /**\n     * Gets/Sets the styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    evenRowCSS: string;\n    /**\n     * Gets/Sets the styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    oddRowCSS: string;\n    /**\n     * Gets/Sets the primary key.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    primaryKey: any;\n    /**\n     * Gets/Sets a unique values strategy used by the Excel Style Filtering\n     *\n     * @remarks\n     * Provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     */\n    uniqueColumnValuesStrategy: (column: IgxColumnComponent, filteringExpressionsTree: IFilteringExpressionsTree, done: (values: any[]) => void) => void;\n    /**\n     * @hidden @internal\n     */\n    excelStyleFilteringComponents: QueryList<IgxGridExcelStyleFilteringComponent>;\n    /**\n     * @hidden @internal\n     */\n    headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked.\n     *\n     * @remarks\n     * Returns the `IgxGridCellComponent`.\n     * @example\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onCellClick: EventEmitter<IGridCellEventArgs>;\n    /**\n     * Emitted when `IgxGridCellComponent` is selected.\n     *\n     * @remarks\n     *  Returns the `IgxGridCellComponent`.\n     * @example\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onSelection: EventEmitter<IGridCellEventArgs>;\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onRowSelectionChange: EventEmitter<IRowSelectionEventArgs>;\n    /**\n     *  Emitted when `IgxColumnComponent` is selected.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid (onColumnSelectionChange)=\"onColumnSelectionChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onColumnSelectionChange: EventEmitter<IColumnSelectionEventArgs>;\n    /**\n     * Emitted before `IgxColumnComponent` is pinned.\n     *\n     * @remarks\n     * The index at which to insert the column may be changed through the `insertAtIndex` property.\n     * @example\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n     */\n    onColumnPinning: EventEmitter<IPinColumnCancellableEventArgs>;\n    /**\n     * Emitted after `IgxColumnComponent` is pinned.\n     *\n     * @remarks\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * @example\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n     */\n    columnPinned: EventEmitter<IPinColumnEventArgs>;\n    /**\n     * Emitted when cell enters edit mode.\n     *\n     * @remarks\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEditEnter)=\"editStart($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    cellEditEnter: EventEmitter<IGridEditEventArgs>;\n    /**\n     * Emitted when cell exits edit mode.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEditExit)=\"editExit($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    cellEditExit: EventEmitter<IGridEditDoneEventArgs>;\n    /**\n     * Emitted when cell has been edited.\n     *\n     * @remarks\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEdit)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    cellEdit: EventEmitter<IGridEditEventArgs>;\n    /**\n     * Emitted after cell has been edited and editing has been committed.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEditDone)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    cellEditDone: EventEmitter<IGridEditDoneEventArgs>;\n    /**\n     * Emitted when a row enters edit mode.\n     *\n     * @remarks\n     * Emitted when [rowEditable]=\"true\".\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEditEnter)=\"editStart($event)\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    rowEditEnter: EventEmitter<IGridEditEventArgs>;\n    /**\n     * Emitted when exiting edit mode for a row.\n     *\n     * @remarks\n     * Emitted when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEdit)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    rowEdit: EventEmitter<IGridEditEventArgs>;\n    /**\n     * Emitted after exiting edit mode for a row and editing has been committed.\n     *\n     * @remarks\n     * Emitted when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEditDone)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    rowEditDone: EventEmitter<IGridEditDoneEventArgs>;\n    /**\n     * Emitted when row editing is canceled.\n     *\n     * @remarks\n     * Emits when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEditExit)=\"editExit($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    rowEditExit: EventEmitter<IGridEditDoneEventArgs>;\n    /**\n     * Emitted when a column is initialized.\n     *\n     * @remarks\n     * Returns the column object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onColumnInit: EventEmitter<IgxColumnComponent>;\n    /**\n     * Emitted before sorting expressions are applied.\n     *\n     * @remarks\n     * Returns an `ISortingEventArgs` object. `sortingExpressions` key holds the sorting expressions.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSorting)=\"sorting($event)\"></igx-grid>\n     * ```\n     */\n    sorting: EventEmitter<ISortingEventArgs>;\n    /**\n     * Emitted after sorting is completed.\n     *\n     * @remarks\n     * Returns the sorting expression.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     */\n    onSortingDone: EventEmitter<ISortingExpression | ISortingExpression[]>;\n    /**\n     * Emitted before filtering expressions are applied.\n     *\n     * @remarks\n     * Returns an `IFilteringEventArgs` object. `filteringExpressions` key holds the filtering expressions for the column.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (filtering)=\"filtering($event)\"></igx-grid>\n     * ```\n     */\n    filtering: EventEmitter<IFilteringEventArgs>;\n    /**\n     * Emitted after filtering is performed through the UI.\n     *\n     * @remarks\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n     */\n    onFilteringDone: EventEmitter<IFilteringExpressionsTree>;\n    /**\n     * Emitted after paging is performed.\n     *\n     * @remarks\n     * Returns an object consisting of the previous and next pages.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n     */\n    onPagingDone: EventEmitter<IPageEventArgs>;\n    /**\n     * Emitted when a row added through the API.\n     *\n     * @remarks\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onRowAdded: EventEmitter<IRowDataEventArgs>;\n    /**\n     * Emitted when a row is deleted through API.\n     *\n     * @remarks\n     * Returns an `IRowDataEventArgs` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onRowDeleted: EventEmitter<IRowDataEventArgs>;\n    /**\n     * Emitted after column is resized.\n     *\n     * @remarks\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onColumnResized: EventEmitter<IColumnResizeEventArgs>;\n    /**\n     * Emitted when a cell is right clicked.\n     *\n     * @remarks\n     * Returns the `IgxGridCellComponent` object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onContextMenu: EventEmitter<IGridCellEventArgs>;\n    /**\n     * Emitted when a cell is double clicked.\n     *\n     * @remarks\n     * Returns the `IgxGridCellComponent` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onDoubleClick: EventEmitter<IGridCellEventArgs>;\n    /**\n     * Emitted before column visibility is changed.\n     *\n     * @remarks\n     * Args: { column: any, newValue: boolean }\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (columnVisibilityChanging)=\"visibilityChanging($event)\"></igx-grid>\n     * ```\n     */\n    columnVisibilityChanging: EventEmitter<IColumnVisibilityChangingEventArgs>;\n    /**\n     * Emitted after column visibility is changed.\n     *\n     * @remarks\n     * Args: { column: IgxColumnComponent, newValue: boolean }\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n     */\n    onColumnVisibilityChanged: EventEmitter<IColumnVisibilityChangedEventArgs>;\n    /**\n     * Emitted when column moving starts.\n     *\n     * @remarks\n     * Returns the moved `IgxColumnComponent` object.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n     */\n    onColumnMovingStart: EventEmitter<IColumnMovingStartEventArgs>;\n    /**\n     * Emitted during the column moving operation.\n     *\n     * @remarks\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n     */\n    onColumnMoving: EventEmitter<IColumnMovingEventArgs>;\n    /**\n     * Emitted when column moving ends.\n     *\n     * @remarks\n     * Returns the source and target `IgxColumnComponent` objects.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n     */\n    onColumnMovingEnd: EventEmitter<IColumnMovingEndEventArgs>;\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     *\n     * @remarks\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * @example\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    onGridKeydown: EventEmitter<IGridKeydownEventArgs>;\n    /**\n     * Emitted when start dragging a row.\n     *\n     * @remarks\n     * Return the dragged row.\n     */\n    onRowDragStart: EventEmitter<IRowDragStartEventArgs>;\n    /**\n     * Emitted when dropping a row.\n     *\n     * @remarks\n     * Return the dropped row.\n     */\n    onRowDragEnd: EventEmitter<IRowDragEndEventArgs>;\n    /**\n     * Emitted when a copy operation is executed.\n     *\n     * @remarks\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseDirective#clipboardOptions}.\n     */\n    onGridCopy: EventEmitter<IGridClipboardEvent>;\n    /**\n     * @hidden @internal\n     */\n    expansionStatesChange: EventEmitter<Map<any, boolean>>;\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     *\n     * @example\n     * ```html\n     * <igx-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onRowToggle: EventEmitter<IRowToggleEventArgs>;\n    /**\n     * Emitted when the pinned state of a row is changed.\n     *\n     * @example\n     * ```html\n     * <igx-grid [data]=\"employeeData\" (onRowPinning)=\"rowPin($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onRowPinning: EventEmitter<IPinRowEventArgs>;\n    /**\n     * Emmited when the active node is changed.\n     *\n     * @example\n     * ```\n     * <igx-grid [data]=\"data\" [autoGenerate]=\"true\" (activeNodeChange)=\"activeNodeChange($event)\"></igx-grid>\n     * ```\n     */\n    activeNodeChange: EventEmitter<IActiveNodeChangeEventArgs>;\n    /**\n     * Emitted before sorting is performed.\n     *\n     * @remarks\n     * Returns the sorting expressions.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (sortingExpressionsChange)=\"sortingExprChange($event)\"></igx-grid>\n     * ```\n     */\n    sortingExpressionsChange: EventEmitter<ISortingExpression[]>;\n    /**\n     * Emitted when an export process is initiated by the user.\n     *\n     * @example\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n     */\n    onToolbarExporting: EventEmitter<IGridToolbarExportEventArgs>;\n    /**\n     * Emitted when making a range selection.\n     *\n     * @remarks\n     * Range selection can be made either through drag selection or through keyboard selection.\n     */\n    onRangeSelection: EventEmitter<GridSelectionRange>;\n    /** Emitted after the ngAfterViewInit hook. At this point the grid exists in the DOM */\n    rendered: EventEmitter<boolean>;\n    /**\n     * @hidden @internal\n     */\n    addRowSnackbar: IgxSnackbarComponent;\n    /**\n     * @hidden @internal\n     */\n    resizeLine: IgxGridColumnResizerComponent;\n    /**\n     * @hidden @internal\n     */\n    loadingOverlay: IgxToggleDirective;\n    /**\n     * @hidden @internal\n     */\n    loadingOutlet: IgxOverlayOutletDirective;\n    /**\n     * @hidden @internal\n     */\n    columnList: QueryList<IgxColumnComponent>;\n    actionStrip: IgxActionStripComponent;\n    /**\n     * @hidden @internal\n     */\n    excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n    /**\n     * A template reference for the template when the filtered grid is empty.\n     *\n     * @example\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     */\n    emptyFilteredGridTemplate: TemplateRef<any>;\n    /**\n     * A template reference for the template when the grid is empty.\n     *\n     * @example\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     */\n    emptyGridDefaultTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    loadingGridDefaultTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    parentVirtDir: IgxGridForOfDirective<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n    /**\n     * @hidden @internal\n     */\n    verticalScrollContainer: IgxGridForOfDirective<any>;\n    /**\n     * @hidden @internal\n     */\n    verticalScroll: IgxGridForOfDirective<any>;\n    /**\n     * @hidden @internal\n     */\n    scr: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    footer: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    headerContainer: IgxGridForOfDirective<any>;\n    /**\n     * @hidden @internal\n     */\n    headerSelectorContainer: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    headerDragContainer: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    headerGroupContainer: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    filteringRow: IgxGridFilteringRowComponent;\n    /**\n     * @hidden @internal\n     */\n    theadRow: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    tbody: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    pinContainer: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    tfoot: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    rowEditingOutletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden @internal\n     */\n    tmpOutlets: QueryList<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragIndicatorIconBase: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    rowEditCustom: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    rowEditText: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    rowEditActions: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering a row expand indicator.\n     */\n    rowExpandedIndicatorTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering a row collapse indicator.\n     */\n    rowCollapsedIndicatorTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering a header expand indicator.\n     */\n    headerExpandIndicatorTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering a header collapse indicator.\n     */\n    headerCollapseIndicatorTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering a row expand indicator.\n     */\n    excelStyleHeaderIconTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragIndicatorIconTemplates: QueryList<TemplateRef<any>>;\n    /**\n     * @hidden @internal\n     */\n    rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n    /**\n     * @hidden @internal\n     */\n    rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n    /**\n     * @hidden @internal\n     */\n    rowEditingOverlay: IgxToggleDirective;\n    /**\n     * @hidden @internal\n     */\n    tabindex: number;\n    /**\n     * @hidden @internal\n     */\n    hostRole: string;\n    /** @hidden @internal */\n    toolbar: QueryList<IgxGridToolbarComponent>;\n    /**\n     * @hidden @internal\n     */\n    protected _outletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden @internal\n     */\n    protected defaultExpandedTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    protected defaultESFHeaderIconTemplate: TemplateRef<any>;\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n    private _rowList;\n    private _pinnedRowList;\n    /**\n     * @hidden @internal\n     */\n    private defaultRowEditTemplate;\n    private _dataRowList;\n    /**\n     * Gets/Sets the resource strings.\n     *\n     * @remarks\n     * By default it uses EN resources.\n     */\n    set resourceStrings(value: IGridResourceStrings);\n    get resourceStrings(): IGridResourceStrings;\n    /**\n     * @hidden @internal\n     */\n    cancelAddMode: boolean;\n    /**\n     * Gets/Sets the filtering logic of the `IgxGridComponent`.\n     *\n     * @remarks\n     * The default is AND.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n     */\n    get filteringLogic(): FilteringLogic;\n    set filteringLogic(value: FilteringLogic);\n    /**\n     * Gets/Sets the filtering state.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n     * ```\n     * @remarks\n     * Supports two-way binding.\n     */\n    get filteringExpressionsTree(): IFilteringExpressionsTree;\n    set filteringExpressionsTree(value: IFilteringExpressionsTree);\n    /**\n     * Gets/Sets the advanced filtering state.\n     *\n     * @example\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * this.grid.advancedFilteringExpressionsTree = logic;\n     * ```\n     */\n    get advancedFilteringExpressionsTree(): IFilteringExpressionsTree;\n    set advancedFilteringExpressionsTree(value: IFilteringExpressionsTree);\n    /**\n     * Gets/Sets the locale.\n     *\n     * @remarks\n     * If not set, returns browser's language.\n     */\n    get locale(): string;\n    set locale(value: string);\n    get pagingMode(): GridPagingMode;\n    set pagingMode(val: GridPagingMode);\n    /**\n     * Gets/Sets whether the paging feature is enabled.\n     *\n     * @remarks\n     * The default state is disabled (false).\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n     */\n    get paging(): boolean;\n    set paging(value: boolean);\n    /**\n     * Gets/Sets the current page index.\n     *\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * Supports two-way binding.\n     */\n    get page(): number;\n    set page(val: number);\n    /**\n     * Gets/Sets the number of visible items per page.\n     *\n     * @remarks\n     * The default is 15.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get perPage(): number;\n    set perPage(val: number);\n    /**\n     * Gets/Sets whether the column hiding UI is enabled.\n     *\n     * @deprecated\n     *\n     * @remarks\n     * By default it is disabled (false). In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n     */\n    get columnHiding(): boolean;\n    set columnHiding(value: boolean);\n    /**\n     * Gets/Sets if the row selectors are hidden.\n     *\n     * @remarks\n     *  By default row selectors are shown\n     */\n    get hideRowSelectors(): boolean;\n    set hideRowSelectors(value: boolean);\n    /**\n     * Gets/Sets whether rows can be moved.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n     */\n    get rowDraggable(): boolean;\n    set rowDraggable(val: boolean);\n    /**\n     * @hidden\n     * @internal\n     */\n    rowDragging: boolean;\n    /**\n     * Gets the row ID that is being dragged.\n     *\n     * @remarks\n     * The row ID is either the primaryKey value or the data record instance.\n     */\n    dragRowID: any;\n    /**\n     * @hidden @interal\n     */\n    addRowParent: any;\n    /**\n     * Gets/Sets whether the rows are editable.\n     *\n     * @remarks\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n     */\n    get rowEditable(): boolean;\n    set rowEditable(val: boolean);\n    /**\n     * Gets/Sets the height.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get height(): string;\n    set height(value: string);\n    /**\n     * @hidden @internal\n     */\n    get hostWidth(): any;\n    /**\n     * Gets/Sets the width of the grid.\n     *\n     * @example\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n     */\n    get width(): string;\n    set width(value: string);\n    /**\n     * Gets the width of the header.\n     *\n     * @example\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n     */\n    get headerWidth(): number;\n    /**\n     * Gets/Sets the row height.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get rowHeight(): any;\n    set rowHeight(value: any);\n    /**\n     * Gets/Sets the default width of the columns.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get columnWidth(): string;\n    set columnWidth(value: string);\n    /**\n     * Get/Sets the message displayed when there are no records.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    set emptyGridMessage(value: string);\n    get emptyGridMessage(): string;\n    /**\n     * Gets/Sets whether the grid is going to show a loading indicator.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    set isLoading(value: boolean);\n    get isLoading(): boolean;\n    /**\n     * Gets/Sets whether the columns should be auto-generated once again after the initialization of the grid\n     *\n     * @remarks\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * @example\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     * ```\n     */\n    shouldGenerate: boolean;\n    /**\n     * Gets/Sets the message displayed when there are no records and the grid is filtered.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    set emptyFilteredGridMessage(value: string);\n    get emptyFilteredGridMessage(): string;\n    /**\n     * Gets/Sets the title to be displayed in the built-in column hiding UI.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n     */\n    get columnHidingTitle(): string;\n    set columnHidingTitle(v: string);\n    /** @hidden @internal */\n    get columnHidingTitleInternal(): string;\n    /**\n     * Gets/Sets the initial pinning configuration.\n     *\n     * @remarks\n     * Allows to apply pinning the columns to the start or the end.\n     * Note that pinning to both sides at a time is not allowed.\n     * @example\n     * ```html\n     * <igx-grid [pinning]=\"pinningConfig\"></igx-grid>\n     * ```\n     */\n    get pinning(): IPinningConfig;\n    set pinning(value: IPinningConfig);\n    /**\n     * Gets/Sets if the built-in column pinning UI should be shown in the toolbar.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get columnPinning(): boolean;\n    set columnPinning(value: boolean);\n    /**\n     * Gets/Sets the title to be displayed in the UI of the column pinning.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get columnPinningTitle(): string;\n    set columnPinningTitle(v: string);\n    /** @hidden @internal */\n    get columnPinningTitleInternal(): string;\n    /**\n     * Gets/Sets if the filtering is enabled.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get allowFiltering(): boolean;\n    set allowFiltering(value: boolean);\n    /**\n     * Gets/Sets a value indicating whether the advanced filtering is enabled.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get allowAdvancedFiltering(): boolean;\n    set allowAdvancedFiltering(value: boolean);\n    /**\n     * Gets/Sets the filter mode.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it's set to FilterMode.quickFilter.\n     */\n    get filterMode(): FilterMode;\n    set filterMode(value: FilterMode);\n    /**\n     * Gets/Sets the summary position.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it is bottom.\n     */\n    get summaryPosition(): GridSummaryPosition;\n    set summaryPosition(value: GridSummaryPosition);\n    /**\n     * Gets/Sets the summary calculation mode.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     */\n    get summaryCalculationMode(): GridSummaryCalculationMode;\n    set summaryCalculationMode(value: GridSummaryCalculationMode);\n    /**\n     * Controls whether the summary row is visible when groupBy/parent row is collapsed.\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showSummaryOnCollapse]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default showSummaryOnCollapse is set to 'false' which means that the summary row is not visible\n     * when the groupBy/parent row is collapsed.\n     */\n    get showSummaryOnCollapse(): boolean;\n    set showSummaryOnCollapse(value: boolean);\n    /**\n     * Gets/Sets the filtering strategy of the grid.\n     *\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n     * ```\n     */\n    get filterStrategy(): IFilteringStrategy;\n    set filterStrategy(classRef: IFilteringStrategy);\n    /**\n     * Gets/Sets the sorting strategy of the grid.\n     *\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [sortStrategy]=\"sortStrategy\"></igx-grid>\n     * ```\n     */\n    get sortStrategy(): IGridSortingStrategy;\n    set sortStrategy(value: IGridSortingStrategy);\n    /**\n     * Gets/Sets the current selection state.\n     *\n     * @remarks\n     * Represents the selected rows' IDs (primary key or rowData)\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" primaryKey=\"ID\" rowSelection=\"multiple\" [selectedRows]=\"[0, 1, 2]\"><igx-grid>\n     * ```\n     */\n    set selectedRows(rowIDs: any[]);\n    get selectedRows(): any[];\n    /**\n     * @hidden @internal\n     */\n    get excelStyleFilteringComponent(): IgxGridExcelStyleFilteringComponent;\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     *\n     * @example\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[];\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     *\n     * @example\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n     */\n    get headerCellList(): IgxGridHeaderComponent[];\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     *\n     * @example\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[];\n    /**\n     * @hidden @internal\n     */\n    get summariesRowList(): QueryList<any>;\n    /**\n     * A list of `IgxGridRowComponent`.\n     *\n     * @example\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n     */\n    get rowList(): QueryList<any>;\n    /**\n     * A list of currently rendered `IgxGridRowComponent`'s.\n     *\n     * @example\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n     */\n    get dataRowList(): QueryList<IgxRowDirective<IgxGridBaseDirective>>;\n    /**\n     * @hidden\n     * @internal\n     */\n    get headSelectorTemplate(): TemplateRef<IgxHeadSelectorDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    get isPinningToStart(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get isRowPinningToTop(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get rowSelectorTemplate(): TemplateRef<IgxRowSelectorDirective>;\n    /**\n     * @hidden @internal\n     */\n    get rowOutletDirective(): IgxOverlayOutletDirective;\n    /**\n     * @hidden @internal\n     */\n    get parentRowOutletDirective(): IgxOverlayOutletDirective;\n    /**\n     * @hidden @internal\n     */\n    get rowEditContainer(): TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     */\n    get dragIndicatorIconTemplate(): TemplateRef<any>;\n    set dragIndicatorIconTemplate(val: TemplateRef<any>);\n    /**\n     * @hidden @internal\n     */\n    get rowInEditMode(): IgxRowDirective<IgxGridBaseDirective & GridType>;\n    /**\n     * @hidden @internal\n     */\n    get firstEditableColumnIndex(): number;\n    /**\n     * @hidden @internal\n     */\n    get lastEditableColumnIndex(): number;\n    /**\n     * @hidden @internal\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    get rowEditTabs(): QueryList<IgxRowEditTabStopDirective>;\n    get activeDescendant(): string;\n    /**\n     * @hidden @internal\n     */\n    get hostClass(): string;\n    get bannerClass(): string;\n    /**\n     * @hidden @internal\n     */\n    get pipeTrigger(): number;\n    /**\n     * @hidden @internal\n     */\n    get filteringPipeTrigger(): number;\n    /**\n     * @hidden @internal\n     */\n    get summaryPipeTrigger(): number;\n    /**\n     * Gets/Sets the sorting state.\n     *\n     * @remarks\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n     * ```\n     */\n    get sortingExpressions(): ISortingExpression[];\n    set sortingExpressions(value: ISortingExpression[]);\n    /**\n     * @hidden @internal\n     */\n    get maxLevelHeaderDepth(): any;\n    /**\n     * Gets the number of hidden columns.\n     *\n     * @example\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount(): number;\n    /**\n     * Gets the number of pinned columns.\n     */\n    get pinnedColumnsCount(): number;\n    /**\n     * Gets/Sets the text to be displayed inside the toggle button.\n     *\n     * @deprecated\n     *\n     * @remarks\n     * Used for the built-in column hiding UI of the`IgxColumnComponent`.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n     */\n    get hiddenColumnsText(): string;\n    set hiddenColumnsText(value: string);\n    /**\n     * Gets/Sets the text to be displayed inside the toggle button.\n     *\n     * @deprecated\n     *\n     * @remarks\n     * Used for the built-in column pinning UI of the`IgxColumnComponent`.\n     * @example\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n     */\n    get pinnedColumnsText(): string;\n    set pinnedColumnsText(value: string);\n    /** @hidden @internal */\n    get pinnedColumnsTextInternal(): string;\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State>;\n    /**\n     * @hidden @internal\n     */\n    get currentRowState(): any;\n    /**\n     * @hidden @internal\n     */\n    get currencyPositionLeft(): boolean;\n    /**\n     * Gets/Sets whether the toolbar is shown.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n     */\n    get showToolbar(): boolean;\n    set showToolbar(newValue: boolean);\n    /**\n     * Gets/Sets the toolbar's title.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n     */\n    get toolbarTitle(): string;\n    set toolbarTitle(newValue: string);\n    /**\n     * Gets/Sets whether exporting to MS Excel is enabled or disabled.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n     */\n    get exportExcel(): boolean;\n    set exportExcel(newValue: boolean);\n    /**\n     * Gets/Sets whether the option for exporting to CSV is enabled or disabled.\n     *\n     * @deprecated\n     *\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    get exportCsv(): boolean;\n    set exportCsv(newValue: boolean);\n    /**\n     * Gets/Sets the textual content for the main export button.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    get exportText(): string;\n    set exportText(newValue: string);\n    /**\n     * Gets/Sets the textual content for the MS Excel export button.\n     *\n     * @deprecated\n     *\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    get exportExcelText(): string;\n    set exportExcelText(newValue: string);\n    /**\n     * Gets/Sets the textual content for the CSV export button.\n     *\n     * @deprecated\n     *\n     * @example\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n     */\n    get exportCsvText(): string;\n    set exportCsvText(newValue: string);\n    /**\n     * Gets/Sets cell selection mode.\n     *\n     * @remarks\n     * By default the cell selection mode is multiple\n     * @param selectionMode: GridSelectionMode\n     */\n    get cellSelection(): GridSelectionMode;\n    set cellSelection(selectionMode: GridSelectionMode);\n    /**\n     * Gets/Sets row selection mode\n     *\n     * @remarks\n     * By default the row selection mode is 'none'\n     * Note that in IgxGrid and IgxHierarchicalGrid 'multipleCascade' behaves like 'multiple'\n     */\n    get rowSelection(): GridSelectionMode;\n    set rowSelection(selectionMode: GridSelectionMode);\n    /**\n     * Gets/Sets column selection mode\n     *\n     * @remarks\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n     */\n    get columnSelection(): GridSelectionMode;\n    set columnSelection(selectionMode: GridSelectionMode);\n    /**\n     * @hidden @internal\n     */\n    rowEditMessage: any;\n    /**\n     * @hidden @internal\n     */\n    snackbarActionText: string;\n    /**\n     * @hidden @internal\n     */\n    snackbarLabel: string;\n    /**\n     * @hidden @internal\n     */\n    pagingState: any;\n    /**\n     * @hidden @internal\n     */\n    calcWidth: number;\n    /**\n     * @hidden @internal\n     */\n    calcHeight: number;\n    /**\n     * @hidden @internal\n     */\n    tfootHeight: number;\n    /**\n     * @hidden @internal\n     */\n    chipsGoupingExpressions: any[];\n    /**\n     * @hidden @internal\n     */\n    summariesHeight: number;\n    /**\n     * @hidden @internal\n     */\n    draggedColumn: IgxColumnComponent;\n    /**\n     * @hidden @internal\n     */\n    disableTransitions: boolean;\n    /**\n     * @hidden @internal\n     */\n    lastSearchInfo: ISearchInfo;\n    /**\n     * @hidden @internal\n     */\n    columnWidthSetByUser: boolean;\n    /**\n     * @hidden @internal\n     */\n    pinnedRecords: any[];\n    /**\n     * @hidden @internal\n     */\n    unpinnedRecords: any[];\n    rendered$: import(\"rxjs\").Observable<boolean>;\n    /** @hidden @internal */\n    resizeNotify: Subject<unknown>;\n    /**\n     * @hidden @internal\n     */\n    paginatorSettings: OverlaySettings;\n    /**\n     * @hidden\n     */\n    _filteredUnpinnedData: any;\n    _destroyed: boolean;\n    /**\n     * @hidden @internal\n     */\n    decimalPipe: DecimalPipe;\n    /**\n     * @hidden @internal\n     */\n    datePipe: DatePipe;\n    /**\n     * @hidden @internal\n     */\n    currencyPipe: CurrencyPipe;\n    /**\n     * @hidden @internal\n     */\n    percentPipe: PercentPipe;\n    /**\n     * @hidden @internal\n     */\n    _totalRecords: number;\n    /**\n     * @hidden @internal\n     */\n    columnsWithNoSetWidths: any;\n    /**\n     * @hidden\n     */\n    protected _perPage: number;\n    /**\n     * @hidden\n     */\n    protected _page: number;\n    /**\n     * @hidden\n     */\n    protected _paging: boolean;\n    /**\n     * @hidden\n     */\n    protected _pagingMode: GridPagingMode;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors: boolean;\n    /**\n     * @hidden\n     */\n    protected _rowDrag: boolean;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger: number;\n    /**\n     * @hidden\n     */\n    protected _filteringPipeTrigger: number;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger: number;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression>;\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth: any;\n    /**\n     * @hidden\n     */\n    protected _columnHiding: boolean;\n    /**\n     * @hidden\n     */\n    protected _columnPinning: boolean;\n    protected _pinnedRecordIDs: any[];\n    /**\n     * @hidden\n     */\n    protected destroy$: Subject<any>;\n    protected _filteredSortedPinnedData: any[];\n    protected _filteredSortedUnpinnedData: any[];\n    protected _filteredPinnedData: any[];\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns: any;\n    protected _allowFiltering: boolean;\n    protected _allowAdvancedFiltering: boolean;\n    protected _filterMode: FilterMode;\n    protected observer: ResizeObserver;\n    protected _defaultTargetRecordNumber: number;\n    protected _expansionStates: Map<any, boolean>;\n    protected _defaultExpandState: boolean;\n    protected _baseFontSize: number;\n    protected _headerFeaturesWidth: number;\n    protected _init: boolean;\n    protected _cdrRequestRepaint: boolean;\n    protected _userOutletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden @internal\n     */\n    get scrollSize(): number;\n    private _columnPinningTitle;\n    private _columnHidingTitle;\n    private _showToolbar;\n    private _exportExcel;\n    private _exportCsv;\n    private _toolbarTitle;\n    private _exportText;\n    private _exportExcelText;\n    private _exportCsvText;\n    private _rowEditable;\n    private _currentRowState;\n    private _filteredSortedData;\n    private _customDragIndicatorIconTemplate;\n    private _cdrRequests;\n    private _resourceStrings;\n    private _emptyGridMessage;\n    private _emptyFilteredGridMessage;\n    private _isLoading;\n    private _locale;\n    private overlayIDs;\n    private _filteringStrategy;\n    private _sortingStrategy;\n    private _pinning;\n    private _hostWidth;\n    private _advancedFilteringOverlayId;\n    private _advancedFilteringPositionSettings;\n    private _advancedFilteringOverlaySettings;\n    private columnListDiffer;\n    private rowListDiffer;\n    private _hiddenColumnsText;\n    private _pinnedColumnsText;\n    private _height;\n    private _width;\n    private _rowHeight;\n    private _horizontalForOfs;\n    private _multiRowLayoutRowSize;\n    private _totalWidth;\n    private _pinnedVisible;\n    private _unpinnedVisible;\n    private _pinnedWidth;\n    private _unpinnedWidth;\n    private _visibleColumns;\n    private _columnGroups;\n    private _autoGeneratedCols;\n    private _columnWidth;\n    private _summaryPosition;\n    private _summaryCalculationMode;\n    private _showSummaryOnCollapse;\n    private _cellSelectionMode;\n    private _rowSelectionMode;\n    private _selectRowOnClick;\n    private _columnSelectionMode;\n    private lastAddedRowIndex;\n    private _currencyPositionLeft;\n    private rowEditPositioningStrategy;\n    private rowEditSettings;\n    /**\n     * @hidden @internal\n     */\n    abstract id: string;\n    abstract data: any[];\n    abstract filteredData: any[];\n    /**\n     * Returns an array containing the filtered sorted data.\n     *\n     * @example\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     */\n    get filteredSortedData(): any[];\n    /**\n     * @hidden @internal\n     */\n    get rowChangesCount(): number;\n    /**\n     * @hidden @internal\n     */\n    get dataWithAddedInTransactionRows(): any[];\n    /**\n     * @hidden @internal\n     */\n    get dataLength(): number;\n    /**\n     * @hidden @internal\n     */\n    get template(): TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    private get hasZeroResultFilter();\n    /**\n     * @hidden @internal\n     */\n    private get hasNoData();\n    /**\n     * @hidden @internal\n     */\n    get shouldOverlayLoading(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get isMultiRowSelectionEnabled(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get isRowSelectable(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get isCellSelectable(): boolean;\n    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, colResizingService: IgxColumnResizingService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, _transactions: TransactionService<Transaction, State>, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef, navigation: IgxGridNavigationService, filteringService: IgxFilteringService, overlayService: IgxOverlayService, summaryService: IgxGridSummaryService, _displayDensityOptions: IDisplayDensityOptions, localeId: string);\n    /**\n     * @hidden\n     * @internal\n     */\n    hideActionStrip(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    get headerFeaturesWidth(): number;\n    /**\n     * @hidden\n     * @internal\n     */\n    isDetailRecord(rec: any): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    isGroupByRecord(rec: any): boolean;\n    /**\n     * @hidden @internal\n     */\n    isGhostRecord(record: any): boolean;\n    /**\n     * @hidden @internal\n     */\n    isAddRowRecord(record: any): boolean;\n    /**\n     * @hidden\n     * Returns the row index of a row that takes into account the full view data like pinning.\n     */\n    getDataViewIndex(rowIndex: any, pinned: any): any;\n    /**\n     * @hidden\n     * @internal\n     */\n    get hasDetails(): boolean;\n    /**\n     * Returns the state of the grid virtualization.\n     *\n     * @remarks\n     * Includes the start index and how many records are rendered.\n     * @example\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n     */\n    get virtualizationState(): import(\"../directives/for-of/for_of.directive\").IForOfState;\n    /**\n     * @hidden\n     */\n    set virtualizationState(state: import(\"../directives/for-of/for_of.directive\").IForOfState);\n    /**\n     * @hidden\n     * @internal\n     */\n    hideOverlays(): void;\n    /**\n     * Returns whether the record is pinned or not.\n     *\n     * @param rowIndex Index of the record in the `dataView` collection.\n     *\n     * @hidden\n     * @internal\n     */\n    isRecordPinnedByViewIndex(rowIndex: number): boolean;\n    /**\n     * Returns whether the record is pinned or not.\n     *\n     * @param rowIndex Index of the record in the `filteredSortedData` collection.\n     */\n    isRecordPinnedByIndex(rowIndex: number): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    isRecordPinned(rec: any): boolean;\n    /**\n     * @hidden\n     * @internal\n     * Returns the record index in order of pinning by the user. Does not consider sorting/filtering.\n     */\n    getInitialPinnedIndex(rec: any): number;\n    /**\n     * @hidden\n     * @internal\n     */\n    get hasPinnedRecords(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get pinnedRecordsCount(): number;\n    _setupServices(): void;\n    _setupListeners(): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetColumnsCaches(): void;\n    /**\n     * @hidden @internal\n     */\n    generateRowID(): string | number;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetForOfCache(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    setFilteredData(data: any, pinned: boolean): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetColumnCollections(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetCachedWidths(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetCaches(recalcFeatureWidth?: boolean): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    setFilteredSortedData(data: any, pinned: boolean): void;\n    /**\n     * @hidden @internal\n     */\n    resetHorizontalForOfs(): void;\n    /**\n     * @hidden @internal\n     */\n    _setupRowObservers(): void;\n    /**\n     * @hidden @internal\n     */\n    _zoneBegoneListeners(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden @internal\n     */\n    notifyChanges(repaint?: boolean): void;\n    /**\n     * @hidden @internal\n     */\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    getDragGhostCustomTemplate(): TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * Toggles the specified column's visibility.\n     *\n     * @example\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n     */\n    toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs): void;\n    /**\n     * Gets/Sets a list of key-value pairs [row ID, expansion state].\n     *\n     * @remarks\n     * Includes only states that differ from the default one.\n     * Supports two-way binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"data\" [(expansionStates)]=\"model.expansionStates\">\n     * </igx-grid>\n     * ```\n     */\n    get expansionStates(): Map<any, boolean>;\n    set expansionStates(value: Map<any, boolean>);\n    /**\n     * Expands all rows.\n     *\n     * @example\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n     */\n    expandAll(): void;\n    /**\n     * Collapses all rows.\n     *\n     * @example\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n     */\n    collapseAll(): void;\n    /**\n     * Expands the row by its id.\n     *\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.expandRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    expandRow(rowID: any): void;\n    /**\n     * Collapses the row by its id.\n     *\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.collapseRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    collapseRow(rowID: any): void;\n    /**\n     * Toggles the row by its id.\n     *\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.toggleRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    toggleRow(rowID: any): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    getDefaultExpandState(rec: any): boolean;\n    /**\n     * Gets the native element.\n     *\n     * @example\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n     */\n    get nativeElement(): any;\n    /**\n     * Gets/Sets the outlet used to attach the grid's overlays to.\n     *\n     * @remark\n     * If set, returns the outlet defined outside the grid. Otherwise returns the grid's internal outlet directive.\n     */\n    get outlet(): IgxOverlayOutletDirective;\n    set outlet(val: IgxOverlayOutletDirective);\n    /**\n     * Gets the default row height.\n     *\n     * @example\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n     */\n    get defaultRowHeight(): number;\n    /**\n     * @hidden @internal\n     */\n    get defaultSummaryHeight(): number;\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     *\n     * @remarks\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n     */\n    get defaultHeaderGroupMinWidth(): number;\n    /**\n     * @hidden @internal\n     */\n    paginatorClassName(): string;\n    /**\n     * Gets the current width of the container for the pinned `IgxColumnComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n     */\n    get pinnedWidth(): number;\n    /**\n     * Gets the current width of the container for the unpinned `IgxColumnComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n     */\n    get unpinnedWidth(): number;\n    /**\n     * @hidden @internal\n     */\n    get isHorizontalScrollHidden(): boolean;\n    /**\n     * @hidden @internal\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     */\n    featureColumnsWidth(expander?: ElementRef): number;\n    /**\n     * @hidden @internal\n     */\n    get summariesMargin(): number;\n    /**\n     * Gets an array of `IgxColumnComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n     */\n    get columns(): IgxColumnComponent[];\n    /**\n     * Gets an array of the pinned `IgxColumnComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n     */\n    get pinnedColumns(): IgxColumnComponent[];\n    /**\n     * Gets an array of the pinned `IgxRowComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const pinnedRow = this.grid.pinnedRows;\n     * ```\n     */\n    get pinnedRows(): IgxGridRowComponent[];\n    /**\n     * Gets an array of unpinned `IgxColumnComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n     */\n    get unpinnedColumns(): IgxColumnComponent[];\n    /**\n     * Gets the `width` to be set on `IgxGridHeaderGroupComponent`.\n     */\n    getHeaderGroupWidth(column: IgxColumnComponent): string;\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     *\n     * @example\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     */\n    getColumnByName(name: string): IgxColumnComponent;\n    getColumnByVisibleIndex(index: number): IgxColumnComponent;\n    /**\n     * Returns the `IgxRowDirective` by index.\n     *\n     * @example\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     */\n    getRowByIndex(index: number): IgxRowDirective<IgxGridBaseDirective & GridType>;\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     *\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * @example\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     */\n    getRowByKey(keyValue: any): IgxRowDirective<IgxGridBaseDirective & GridType>;\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n     */\n    get visibleColumns(): IgxColumnComponent[];\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     *\n     * @example\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     */\n    getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent;\n    getCellByColumnVisibleIndex(rowIndex: number, index: number): IgxGridCellComponent;\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     *\n     * @remarks\n     * Requires that the primaryKey property is set.\n     * @example\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     */\n    getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent;\n    /**\n     * Gets the total number of pages.\n     *\n     * @example\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n     */\n    get totalPages(): number;\n    /**\n     * Gets if the current page is the first page.\n     *\n     * @example\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean;\n    /**\n     * Goes to the next page, if the grid is not already at the last page.\n     *\n     * @example\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n     */\n    nextPage(): void;\n    /**\n     * Goes to the previous page, if the grid is not already at the first page.\n     *\n     * @example\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n     */\n    previousPage(): void;\n    /**\n     * Returns the total number of records.\n     *\n     * @remarks\n     * Only functions when paging is enabled.\n     * @example\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n     */\n    get totalRecords(): number;\n    set totalRecords(total: number);\n    /**\n     * Returns if the current page is the last page.\n     *\n     * @example\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean;\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     *\n     * @example\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n     */\n    get totalWidth(): number;\n    /**\n     * @hidden\n     * @internal\n     */\n    get showRowSelectors(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get showAddButton(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get showDragIcons(): boolean;\n    /**\n     * Places a column before or after the specified target column.\n     *\n     * @example\n     * ```typescript\n     * grid.moveColumn(column, target);\n     * ```\n     */\n    moveColumn(column: IgxColumnComponent, target: IgxColumnComponent, pos?: DropPosition): void;\n    /**\n     * Goes to the desired page index.\n     *\n     * @example\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     */\n    paginate(val: number): void;\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     *\n     * @example\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n     */\n    markForCheck(): void;\n    /**\n     * @hidden @internal\n     */\n    beginAddRowByIndex(rowID: any, index: number, asChild?: boolean, event?: Event): void;\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     *\n     * @example\n     * ```typescript\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     */\n    addRow(data: any): void;\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     *\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * @example\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     */\n    deleteRow(rowSelector: any): void;\n    /** @hidden */\n    deleteRowById(rowId: any): void;\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     *\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * @example\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     */\n    updateCell(value: any, rowSelector: any, column: string): void;\n    /**\n     * Updates the `IgxGridRowComponent`\n     *\n     * @remarks\n     * The row is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * @example\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     */\n    updateRow(value: any, rowSelector: any): void;\n    /**\n     * Returns the data that is contained in the row component.\n     *\n     * @remarks\n     * If the primary key is not specified the row selector match the row data.\n     * @example\n     * ```typescript\n     * const data = grid.getRowData(94741);\n     * ```\n     * @param rowSelector correspond to rowID\n     */\n    getRowData(rowSelector: any): any;\n    /**\n     * Sort a single `IgxColumnComponent`.\n     *\n     * @remarks\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * @example\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n     */\n    sort(expression: ISortingExpression | Array<ISortingExpression>): void;\n    /**\n     * Filters a single `IgxColumnComponent`.\n     *\n     * @example\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     */\n    filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree, ignoreCase?: boolean): void;\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     *\n     * @example\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     */\n    filterGlobal(value: any, condition: any, ignoreCase?: any): void;\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     *\n     * @remarks\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * @example\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * @example\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     */\n    enableSummaries(...rest: any[]): void;\n    /**\n     * Disable summaries for the specified column.\n     *\n     * @example\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     * @remarks\n     * Disable summaries for the listed columns.\n     * @example\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n     */\n    disableSummaries(...rest: any[]): void;\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`.\n     *\n     * @remarks\n     * Otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     */\n    clearFilter(name?: string): void;\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`.\n     *\n     * @remarks\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * @example\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     */\n    clearSort(name?: string): void;\n    /**\n     * @hidden @internal\n     */\n    refreshGridState(args?: any): void;\n    /**\n     * Pins a column by field name.\n     *\n     * @remarks\n     * Returns whether the operation is successful.\n     * @example\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     */\n    pinColumn(columnName: string | IgxColumnComponent, index?: any): boolean;\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     *\n     * @example\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     */\n    unpinColumn(columnName: string | IgxColumnComponent, index?: any): boolean;\n    /**\n     * Pin the row by its id.\n     *\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.pinRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     * @param index The index at which to insert the row in the pinned collection.\n     */\n    pinRow(rowID: any, index?: number): boolean;\n    /**\n     * Unpin the row by its id.\n     *\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.unpinRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    unpinRow(rowID: any): boolean;\n    get pinnedRowHeight(): any;\n    get totalHeight(): any;\n    /**\n     * Recalculates grid width/height dimensions.\n     *\n     * @remarks\n     * Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * @example\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n     */\n    reflow(): void;\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     *\n     * @remarks\n     * Returns how many times the grid contains the string.\n     * @example\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     */\n    findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number;\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     *\n     * @remarks\n     * Returns how many times the grid contains the string.\n     * @example\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     */\n    findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number;\n    /**\n     * Reapplies the existing search.\n     *\n     * @remarks\n     * Returns how many times the grid contains the last search.\n     * @example\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     */\n    refreshSearch(updateActiveInfo?: boolean, endEdit?: boolean): number;\n    /**\n     * Removes all the highlights in the cell.\n     *\n     * @example\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n     */\n    clearSearch(): void;\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     *\n     * @example\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n     */\n    get hasSortableColumns(): boolean;\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     *\n     * @example\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n     */\n    get hasEditableColumns(): boolean;\n    /**\n     * Returns if the `IgxGridComponent` has filterable columns.\n     *\n     * @example\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n     */\n    get hasFilterableColumns(): boolean;\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     *\n     * @example\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n     */\n    get hasSummarizedColumns(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get rootSummariesEnabled(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get hasVisibleColumns(): boolean;\n    set hasVisibleColumns(value: boolean);\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     *\n     * @example\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n     */\n    get hasMovableColumns(): boolean;\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     *\n     * @example\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n     */\n    get hasColumnGroups(): boolean;\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     *\n     * @example\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n     */\n    get hasColumnLayouts(): boolean;\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     *\n     * @example\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[];\n    /**\n     * @hidden @internal\n     */\n    get multiRowLayoutRowSize(): number;\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight(): number;\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get isPercentHeight(): boolean;\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number;\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    get renderedRowHeight(): number;\n    /**\n     * @hidden @internal\n     */\n    get outerWidth(): number;\n    /**\n     * @hidden @internal\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    getVisibleContentHeight(): any;\n    /**\n     * @hidden @internal\n     */\n    getPossibleColumnWidth(baseWidth?: number): string;\n    /**\n     * @hidden @internal\n     */\n    hasVerticalScroll(): boolean;\n    /**\n     * Gets calculated width of the pinned area.\n     *\n     * @example\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     */\n    getPinnedWidth(takeHidden?: boolean): number;\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr: any): any;\n    /**\n     * @hidden @internal\n     */\n    isColumnGrouped(fieldName: string): boolean;\n    /**\n     * @hidden @internal\n     */\n    onHeaderSelectorClick(event: any): void;\n    /**\n     * @hidden @internal\n     */\n    get headSelectorBaseAriaLabel(): \"Deselect all filtered\" | \"Select all filtered\" | \"Deselect all\" | \"Select all\";\n    /**\n     * @hidden\n     * @internal\n     */\n    get totalRowsCountAfterFilter(): number;\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped pinned row data, displayed in the grid.\n     *\n     * @example\n     * ```typescript\n     *      const pinnedDataView = this.grid.pinnedDataView;\n     * ```\n     */\n    get pinnedDataView(): any[];\n    /**\n     * Returns currently transformed paged/filtered/sorted/grouped unpinned row data, displayed in the grid.\n     *\n     * @example\n     * ```typescript\n     *      const pinnedDataView = this.grid.pinnedDataView;\n     * ```\n     */\n    get unpinnedDataView(): any[];\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped/pinned/unpinned row data, displayed in the grid.\n     *\n     * @example\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     */\n    get dataView(): any[];\n    /**\n     * Gets/Sets whether clicking over a row should select/deselect it\n     *\n     * @remarks\n     * By default it is set to true\n     * @param enabled: boolean\n     */\n    get selectRowOnClick(): boolean;\n    set selectRowOnClick(enabled: boolean);\n    /**\n     * Select specified rows by ID.\n     *\n     * @example\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     */\n    selectRows(rowIDs: any[], clearCurrentSelection?: boolean): void;\n    /**\n     * Deselect specified rows by ID.\n     *\n     * @example\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     */\n    deselectRows(rowIDs: any[]): void;\n    /**\n     * Selects all rows\n     *\n     * @remarks\n     * By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * @example\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n     */\n    selectAllRows(onlyFilterData?: boolean): void;\n    /**\n     * Deselects all rows\n     *\n     * @remarks\n     * By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will deselect all rows in the grid exept deleted rows.\n     * @example\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n     */\n    deselectAllRows(onlyFilterData?: boolean): void;\n    /**\n     * @hidden @internal\n     */\n    clearCellSelection(): void;\n    /**\n     * @hidden @internal\n     */\n    dragScroll(dir: DragScrollDirection): void;\n    /**\n     * @hidden @internal\n     */\n    isDefined(arg: any): boolean;\n    /**\n     * @hidden @internal\n     */\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void;\n    /**\n     * @hidden @internal\n     */\n    columnToVisibleIndex(field: string | number): number;\n    /**\n     * @hidden @internal\n     */\n    setSelection(range: GridSelectionRange): void;\n    /**\n     * @hidden @internal\n     */\n    getSelectedRanges(): GridSelectionRange[];\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     *\n     * @remarks\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedData(formatters?: boolean, headers?: boolean): any[];\n    /**\n     * Get current selected columns.\n     *\n     * @example\n     * Returns an array with selected columns\n     * ```typescript\n     * const selectedColumns = this.grid.selectedColumns();\n     * ```\n     */\n    selectedColumns(): IgxColumnComponent[];\n    /**\n     * Select specified columns.\n     *\n     * @example\n     * ```typescript\n     * this.grid.selectColumns(['ID','Name'], true);\n     * ```\n     * @param columns\n     * @param clearCurrentSelection if true clears the current selection\n     */\n    selectColumns(columns: string[] | IgxColumnComponent[], clearCurrentSelection?: boolean): void;\n    /**\n     * Deselect specified columns by filed.\n     *\n     * @example\n     * ```typescript\n     * this.grid.deselectColumns(['ID','Name']);\n     * ```\n     * @param columns\n     */\n    deselectColumns(columns: string[] | IgxColumnComponent[]): void;\n    /**\n     * Deselects all columns\n     *\n     * @example\n     * ```typescript\n     * this.grid.deselectAllColumns();\n     * ```\n     */\n    deselectAllColumns(): void;\n    /**\n     * Selects all columns\n     *\n     * @example\n     * ```typescript\n     * this.grid.deselectAllColumns();\n     * ```\n     */\n    selectAllColumns(): void;\n    /**\n     *\n     * Returns an array of the current columns selection in the form of `[{ column.field: cell.value }, ...]`.\n     *\n     * @remarks\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedColumnsData(formatters?: boolean, headers?: boolean): any[];\n    combineSelectedCellAndColumnData(columnData: any[], formatters?: boolean, headers?: boolean): any[];\n    /**\n     * @hidden @internal\n     */\n    preventContainerScroll: (evt: any) => void;\n    /**\n     * @hidden\n     * @internal\n     */\n    copyHandler(event: any): void;\n    /**\n     * @hidden @internal\n     */\n    prepareCopyData(event: any, data: any, keys?: any): string;\n    /**\n     * @hidden @internal\n     */\n    showSnackbarFor(index: number): void;\n    /**\n     * Navigates to a position in the grid based on provided `rowindex` and `visibleColumnIndex`.\n     *\n     * @remarks\n     * Also can execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * @example\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n     */\n    navigateTo(rowIndex: number, visibleColIndex?: number, cb?: (args: any) => void): void;\n    /**\n     * Returns `ICellPosition` which defines the next cell,\n     * according to the current position, that match specific criteria.\n     *\n     * @remarks\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * @example\n     * ```typescript\n     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n     * ```\n     */\n    getNextCell(currRowIndex: number, curVisibleColIndex: number, callback?: (IgxColumnComponent: any) => boolean): ICellPosition;\n    /**\n     * Returns `ICellPosition` which defines the previous cell,\n     * according to the current position, that match specific criteria.\n     *\n     * @remarks\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * @example\n     * ```typescript\n     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n     * ```\n     */\n    getPreviousCell(currRowIndex: number, curVisibleColIndex: number, callback?: (IgxColumnComponent: any) => boolean): ICellPosition;\n    /**\n     * @hidden @internal\n     */\n    trackColumnChanges(index: any, col: any): any;\n    /**\n     * @hidden\n     */\n    isExpandedGroup(_group: IGroupByRecord): boolean;\n    /**\n     * @hidden @internal\n     */\n    openRowOverlay(id: any): void;\n    /**\n     * @hidden @internal\n     */\n    closeRowEditingOverlay(): void;\n    /**\n     * @hidden @internal\n     */\n    toggleRowEditingOverlay(show: any): void;\n    /**\n     * @hidden @internal\n     */\n    repositionRowEditingOverlay(row: IgxRowDirective<IgxGridBaseDirective & GridType>): void;\n    /**\n     * @hidden @internal\n     */\n    cachedViewLoaded(args: ICachedViewLoadedEventArgs): void;\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    openAdvancedFilteringDialog(): void;\n    /**\n     * Closes the advanced filtering dialog.\n     *\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    closeAdvancedFilteringDialog(applyChanges: boolean): void;\n    getEmptyRecordObjectFor(rec: any): any;\n    /**\n     * @hidden @internal\n     */\n    hasHorizontalScroll(): boolean;\n    /**\n     * @hidden @internal\n     */\n    isSummaryRow(rowData: any): boolean;\n    /**\n     * @hidden @internal\n     */\n    endRowTransaction(commit: boolean, row: IgxRow, event?: Event): boolean;\n    /**\n     * Finishes the row transactions on the current row.\n     *\n     * @remarks\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     * @example\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    endEdit(commit?: boolean, event?: Event): boolean;\n    endAdd(commit?: boolean, event?: Event): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    endRowEdit(commit?: boolean, event?: Event): boolean;\n    /**\n     * @hidden @internal\n     */\n    triggerPipes(): void;\n    /**\n     * @hidden @internal\n     */\n    endAddRow(): void;\n    protected writeToData(rowIndex: number, value: any): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected _getParentRecordId(): any;\n    protected findRecordIndexInView(rec: any): number;\n    protected getUnpinnedIndexById(id: any): number;\n    protected _restoreVirtState(row: any): void;\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean;\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean;\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowDirective<IgxGridBaseDirective & GridType>): void;\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState(): void;\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth(): void;\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected getExtremumBasedColWidth(column: IgxColumnComponent): string;\n    protected resetNotifyChanges(): void;\n    protected resolveOutlet(): IgxOverlayOutletDirective;\n    /**\n     * Reorder columns in the main columnList and _columns collections.\n     *\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition): void;\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?: any): any[];\n    /**\n     * Reorders columns inside the passed column collection.\n     * When reordering column group collection, the collection is not flattened.\n     * In all other cases, the columns collection is flattened, this is why adittional calculations on the dropIndex are done.\n     *\n     * @hidden\n     */\n    protected _reorderColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition, columnCollection: any[], inGroup?: boolean): void;\n    /**\n     * Reorder column group collection.\n     *\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition): void;\n    protected setupColumns(): void;\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number): void;\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number;\n    /**\n     * @hidden @internal\n     */\n    protected onPinnedRowsChanged(change: QueryList<IgxGridRowComponent>): void;\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>): void;\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes(recalcFeatureWidth?: boolean): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow(): void;\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight(): void;\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getComputedHeight(elem: any): number;\n    /**\n     * @hidden\n     */\n    protected getFooterHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getTheadRowHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getPagingFooterHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number;\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number;\n    protected checkContainerSizeChange(): boolean;\n    protected _shouldAutoSize(renderedHeight: any): boolean;\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     */\n    protected getUnpinnedWidth(takeHidden?: boolean): number;\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any): void;\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean): void;\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions: any): void;\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec: any): \"string\" | \"number\" | \"boolean\" | \"date\";\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns(): void;\n    protected generateDataFields(data: any[]): string[];\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb?: (args: any) => void): void;\n    /**\n     * @hidden\n     */\n    protected reinitPinStates(): void;\n    protected extractDataFromSelection(source: any[], formatters?: boolean, headers?: boolean, columnData?: any[]): any[];\n    protected getSelectableColumnsAt(index: any): IgxColumnComponent[];\n    protected extractDataFromColumnsSelection(source: any[], formatters?: boolean, headers?: boolean): any[];\n    /**\n     * @hidden\n     */\n    protected initPinning(): void;\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection?: any[]): void;\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number): void;\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void;\n    private getColumnWidthSum;\n    /**\n     * Notiy changes, reset cache and populateVisibleIndexes.\n     *\n     * @hidden\n     */\n    private _columnsReordered;\n    private _applyWidthHostBinding;\n    private verticalScrollHandler;\n    private horizontalScrollHandler;\n    private executeCallback;\n    private getNavigationArguments;\n    private getNextDataRowIndex;\n    /**\n     * Returns the previous editable row index or -1 if no such row is found.\n     *\n     * @param currentIndex The index of the current editable record.\n     */\n    private findPrevEditableDataRowIndex;\n    /**\n     * Returns if the record at the specified data view index is a an editable data record.\n     * If record is group rec, summary rec, child rec, ghost rec. etc. it is not editable.\n     *\n     * @param dataViewIndex The index of that record in the data view.\n     */\n    private isEditableDataRecordAtIndex;\n    /**\n     * Returns if the record at the specified data view index is a ghost.\n     * If record is pinned but is not in pinned area then it is a ghost record.\n     *\n     * @param dataViewIndex The index of that record in the data view.\n     */\n    private isGhostRecordAtIndex;\n    private isValidPosition;\n    private find;\n    private rebuildMatchCache;\n    private configureRowEditingOverlay;\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler;\n}\n"]}