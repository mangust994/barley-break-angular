{"version":3,"file":"row-island.component.d.ts","sources":["row-island.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, DoCheck, ElementRef, EventEmitter, IterableDiffers, NgZone, OnChanges, OnDestroy, OnInit, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions } from '../../core/displayDensity';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxOverlayService } from '../../services/public_api';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridToolbarTemplateContext } from '../toolbar/common';\nimport { IgxActionStripComponent } from '../../action-strip/action-strip.component';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\nexport declare class IgxRowIslandComponent extends IgxHierarchicalGridBaseDirective implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    selectionService: IgxGridSelectionService;\n    colResizingService: IgxColumnResizingService;\n    protected transactionFactory: any;\n    document: any;\n    protected overlayService: IgxOverlayService;\n    summaryService: IgxGridSummaryService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    rowIslandAPI: IgxRowIslandAPIService;\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     *\n     * @memberof IgxRowIslandComponent\n     */\n    key: string;\n    /**\n     * @hidden\n     */\n    children: QueryList<IgxRowIslandComponent>;\n    /**\n     * @hidden\n     */\n    childColumns: QueryList<IgxColumnComponent>;\n    islandToolbarTemplate: TemplateRef<IgxGridToolbarTemplateContext>;\n    actionStrips: QueryList<IgxActionStripComponent>;\n    /**\n     * @hidden\n     */\n    onLayoutChange: EventEmitter<any>;\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     *\n     * @memberof IgxRowIslandComponent\n     */\n    onGridCreated: EventEmitter<IGridCreatedEventArgs>;\n    /**\n     * Emitted after a grid is being initialized for this row island.\n     * The emitting is done in `ngAfterViewInit`.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridInitialized)=\"gridInitialized($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     *\n     * @memberof IgxRowIslandComponent\n     */\n    onGridInitialized: EventEmitter<IGridCreatedEventArgs>;\n    /**\n     * @hidden\n     */\n    initialChanges: any[];\n    /**\n     * @hidden\n     */\n    rootGrid: any;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private ri_columnListDiffer;\n    private layout_id;\n    private isInit;\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     *\n     * @memberof IgxRowIslandComponent\n     */\n    set expandChildren(value: boolean);\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     *\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean;\n    /**\n     * @hidden\n     */\n    get id(): string;\n    /**\n     * @hidden\n     */\n    get parentId(): any;\n    /**\n     * @hidden\n     */\n    get level(): number;\n    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, colResizingService: IgxColumnResizingService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, transactionFactory: any, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef, navigation: IgxHierarchicalGridNavigationService, filteringService: IgxFilteringService, overlayService: IgxOverlayService, summaryService: IgxGridSummaryService, _displayDensityOptions: IDisplayDensityOptions, rowIslandAPI: IgxRowIslandAPIService, localeId: string);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    reflow(): void;\n    /**\n     * @hidden\n     */\n    calculateGridHeight(): void;\n    protected updateColumnList(): void;\n    protected updateChildren(): void;\n    private cleanGridState;\n}\n"]}