{"version":3,"file":"hierarchical-grid.component.d.ts","sources":["hierarchical-grid.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, AfterViewInit, DoCheck, ElementRef, OnDestroy, OnInit, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridToolbarTemplateContext } from '../toolbar/common';\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\nexport declare class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseDirective implements GridType, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n    /**\n     * @hidden @internal\n     */\n    role: string;\n    /**\n     * @hidden\n     */\n    childLayoutList: QueryList<IgxRowIslandComponent>;\n    /**\n     * @hidden\n     */\n    allLayoutList: QueryList<IgxRowIslandComponent>;\n    toolbarTemplate: TemplateRef<IgxGridToolbarTemplateContext>;\n    toolbarOutlet: ViewContainerRef;\n    /**\n     * @hidden\n     */\n    templateOutlets: QueryList<any>;\n    /**\n     * @hidden\n     */\n    hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n    protected childTemplate: TemplateRef<any>;\n    protected headerHierarchyExpander: ElementRef;\n    /**\n     * @hidden\n     */\n    childLayoutKeys: any[];\n    /**\n     * @hidden\n     */\n    highlightedRowID: any;\n    /**\n     * @hidden\n     */\n    updateOnRender: boolean;\n    /**\n     * @hidden\n     */\n    parent: any;\n    private _data;\n    private _filteredData;\n    private h_id;\n    private childGridTemplates;\n    private scrollTop;\n    private scrollLeft;\n    /**\n     * Gets/Sets the value of the `id` attribute.\n     *\n     * @remarks\n     * If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     */\n    get id(): string;\n    set id(value: string);\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     *\n     * @memberof IgxHierarchicalGridComponent\n     */\n    set data(value: any[]);\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     *\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get data(): any[];\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     *\n     * @memberof IgxHierarchicalGridComponent\n     */\n    set filteredData(value: any);\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     *\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get filteredData(): any;\n    /**\n     * Gets/Sets the total number of records in the data source.\n     *\n     * @remarks\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * @example\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * this.grid1.totalItemCount = 55;\n     * ```\n     */\n    set totalItemCount(count: number);\n    get totalItemCount(): number;\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     *\n     * @memberof IgxHierarchicalGridComponent\n     */\n    set expandChildren(value: boolean);\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     *\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean;\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     *\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get foreignKey(): any;\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren(): boolean;\n    /**\n     * @hidden\n     */\n    hideActionStrip(): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    get outletDirective(): import(\"../../../public_api\").IgxOverlayOutletDirective;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden @internal\n     */\n    dataLoading(event: any): void;\n    /** @hidden */\n    featureColumnsWidth(): number;\n    /**\n     * @hidden\n     */\n    onRowIslandChange(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    isRowHighlighted(rowData: any): boolean;\n    /**\n     * @hidden\n     */\n    isHierarchicalRecord(record: any): boolean;\n    /**\n     * @hidden\n     */\n    isChildGridRecord(record: any): boolean;\n    /**\n     * @hidden\n     */\n    trackChanges(index: any, rec: any): any;\n    /**\n     * @hidden\n     */\n    getContext(rowData: any, rowIndex: any, pinned: any): any;\n    /**\n     * @hidden\n     */\n    get rootGrid(): this;\n    /**\n     * @hidden\n     */\n    get iconTemplate(): TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    getDragGhostCustomTemplate(): TemplateRef<any>;\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    getVisibleContentHeight(): any;\n    /**\n     * @hidden\n     */\n    toggleAll(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    hasExpandedRecords(): boolean;\n    getDefaultExpandState(record: any): boolean;\n    /**\n     * @hidden\n     */\n    isExpanded(record: any): boolean;\n    /**\n     * @hidden\n     */\n    viewCreatedHandler(args: any): void;\n    /**\n     * @hidden\n     */\n    viewMovedHandler(args: any): void;\n    /**\n     * @hidden\n     */\n    updateScrollPosition(): void;\n    onContainerScroll(): void;\n    protected getChildGrids(inDeph?: boolean): any[];\n    protected generateDataFields(data: any[]): string[];\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb?: (args: any) => void): void;\n    protected setupColumns(): void;\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>): void;\n    protected _shouldAutoSize(renderedHeight: any): boolean;\n    private updateSizes;\n    private updateColumnList;\n    private _clearSeletionHighlights;\n    private hg_verticalScrollHandler;\n    private hg_horizontalScrollHandler;\n}\n"]}