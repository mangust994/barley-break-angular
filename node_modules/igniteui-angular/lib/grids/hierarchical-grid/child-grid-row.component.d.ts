import { ChangeDetectorRef, ElementRef, OnInit, AfterViewInit, ComponentFactoryResolver } from '@angular/core';
import { GridBaseAPIService } from '.././api.service';
import { IgxRowIslandComponent } from './row-island.component';
import * as ɵngcc0 from '@angular/core';
export declare class IgxChildGridRowComponent implements AfterViewInit, OnInit {
    gridAPI: GridBaseAPIService<any>;
    element: ElementRef;
    cdr: ChangeDetectorRef;
    layout: IgxRowIslandComponent;
    /**
     * @hidden
     */
    get parentHasScroll(): boolean;
    /**
     * @hidden
     */
    parentGridID: string;
    /**
     *  The data passed to the row component.
     *
     * ```typescript
     * // get the row data for the first selected row
     * let selectedRowData = this.grid.selectedRows[0].rowData;
     * ```
     */
    rowData: any;
    /**
     * The index of the row.
     *
     * ```typescript
     * // get the index of the second selected row
     * let selectedRowIndex = this.grid.selectedRows[1].index;
     * ```
     */
    index: number;
    hGrid: any;
    /**
     * Get a reference to the grid that contains the selected row.
     *
     * ```typescript
     * handleRowSelection(event) {
     *  // the grid on which the onRowSelectionChange event was triggered
     *  const grid = event.row.grid;
     * }
     * ```
     *
     * ```html
     *  <igx-grid
     *    [data]="data"
     *    (onRowSelectionChange)="handleRowSelection($event)">
     *  </igx-grid>
     * ```
     */
    get parentGrid(): any;
    get level(): number;
    /**
     * The native DOM element representing the row. Could be null in certain environments.
     *
     * ```typescript
     * // get the nativeElement of the second selected row
     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
     * ```
     */
    get nativeElement(): any;
    /**
     * Returns whether the row is expanded.
     * ```typescript
     * const RowExpanded = this.grid1.rowList.first.expanded;
     * ```
     */
    expanded: boolean;
    private resolver;
    constructor(gridAPI: GridBaseAPIService<any>, element: ElementRef, resolver: ComponentFactoryResolver, cdr: ChangeDetectorRef);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngAfterViewInit(): void;
    private setupEventEmitters;
    private _handleLayoutChanges;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxChildGridRowComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxChildGridRowComponent, "igx-child-grid-row", never, { "rowData": "rowData"; "layout": "layout"; "parentGridID": "parentGridID"; "index": "index"; }, {}, never, never>;
}

//# sourceMappingURL=child-grid-row.component.d.ts.map