{"version":3,"file":"hierarchical-grid-base.directive.d.ts","sources":["hierarchical-grid-base.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, NgZone, ChangeDetectorRef, IterableDiffers, ViewContainerRef, ComponentFactoryResolver, TemplateRef, EventEmitter } from '@angular/core';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions } from '../../core/displayDensity';\nimport { IgxOverlayService, IgxTransactionService, Transaction, TransactionService, State } from '../../services/public_api';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnGroupComponent } from '../columns/column-group.component';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nexport declare const hierarchicalTransactionServiceFactory: () => IgxTransactionService<Transaction, State>;\nexport declare const IgxHierarchicalTransactionServiceFactory: {\n    provide: import(\"@angular/core\").InjectionToken<string>;\n    useFactory: () => IgxTransactionService<Transaction, State>;\n};\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\nexport declare abstract class IgxHierarchicalGridBaseDirective extends IgxGridBaseDirective {\n    selectionService: IgxGridSelectionService;\n    colResizingService: IgxColumnResizingService;\n    protected transactionFactory: TransactionService<Transaction, State>;\n    document: any;\n    protected overlayService: IgxOverlayService;\n    summaryService: IgxGridSummaryService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    /**\n     * Gets/Sets the key indicating whether a row has children. If row has no children it does not render an expand indicator.\n     *\n     * @example\n     * ```html\n     * <igx-hierarchical-grid #grid [data]=\"localData\" [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-hierarchical-grid>\n     * ```\n     */\n    hasChildrenKey: string;\n    /**\n     * Gets/Sets whether the expand/collapse all button in the header should be rendered.\n     *\n     * @remark\n     * The default value is false.\n     * @example\n     * ```html\n     * <igx-hierarchical-grid #grid [data]=\"localData\" [showExpandAll]=\"true\">\n     * </igx-hierarchical-grid>\n     * ```\n     */\n    showExpandAll: boolean;\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     *\n     * @example\n     * ```typescript\n     *  <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" (onDataPreLoad)=\"handleEvent()\">\n     *  </igx-hierarchical-grid>\n     * ```\n     */\n    onDataPreLoad: EventEmitter<IForOfState>;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragIndicatorIconBase: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth(): any;\n    /**\n     * Gets the outlet used to attach the grid's overlays to.\n     *\n     * @remark\n     * If set, returns the outlet defined outside the grid. Otherwise returns the grid's internal outlet directive.\n     */\n    get outlet(): any;\n    /**\n     * Sets the outlet used to attach the grid's overlays to.\n     */\n    set outlet(val: any);\n    /**\n     * @hidden\n     */\n    hgridAPI: IgxHierarchicalGridAPIService;\n    /**\n     * @hidden\n     */\n    parentIsland: IgxRowIslandComponent;\n    /**\n     * @hidden\n     */\n    childRow: IgxChildGridRowComponent;\n    abstract rootGrid: any;\n    abstract expandChildren: boolean;\n    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, colResizingService: IgxColumnResizingService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, transactionFactory: TransactionService<Transaction, State>, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef, navigation: IgxHierarchicalGridNavigationService, filteringService: IgxFilteringService, overlayService: IgxOverlayService, summaryService: IgxGridSummaryService, _displayDensityOptions: IDisplayDensityOptions, localeId: string);\n    /**\n     * @hidden\n     */\n    createColumnsList(cols: Array<any>): void;\n    protected _createColumn(col: any): any;\n    protected _createColGroupComponent(col: IgxColumnGroupComponent): import(\"@angular/core\").ComponentRef<IgxColumnGroupComponent>;\n    protected _createColComponent(col: any): import(\"@angular/core\").ComponentRef<IgxColumnComponent>;\n    protected getGridsForIsland(rowIslandID: string): import(\"./hierarchical-grid.component\").IgxHierarchicalGridComponent[];\n    protected getChildGrid(path: Array<IPathSegment>): any;\n}\n"]}