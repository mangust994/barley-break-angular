{"version":3,"file":"grid-navigation.service.d.ts","sources":["grid-navigation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridType } from './common/grid.interface';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IMultiRowLayoutNode } from './selection/selection.service';\nimport { GridKeydownTargetType } from './common/enums';\nexport interface ColumnGroupsCache {\n    level: number;\n    visibleIndex: number;\n}\nexport interface IActiveNode {\n    gridID?: string;\n    row: number;\n    column?: number;\n    level?: number;\n    mchCache?: ColumnGroupsCache;\n    layout?: IMultiRowLayoutNode;\n}\n/** @hidden */\nexport declare class IgxGridNavigationService {\n    grid: IgxGridBaseDirective & GridType;\n    _activeNode: IActiveNode;\n    lastActiveNode: IActiveNode;\n    protected pendingNavigation: boolean;\n    get activeNode(): IActiveNode;\n    set activeNode(value: IActiveNode);\n    handleNavigation(event: KeyboardEvent): void;\n    dispatchEvent(event: KeyboardEvent): void;\n    summaryNav(event: KeyboardEvent): void;\n    headerNavigation(event: KeyboardEvent): void;\n    focusTbody(event: any): void;\n    focusFirstCell(header?: boolean): void;\n    isColumnFullyVisible(columnIndex: number): boolean;\n    shouldPerformHorizontalScroll(visibleColIndex: number, rowIndex?: number): boolean;\n    shouldPerformVerticalScroll(targetRowIndex: number, visibleColIndex: number): boolean;\n    performVerticalScrollToCell(rowIndex: number, visibleColIndex?: number, cb?: () => void): void;\n    performHorizontalScrollToCell(visibleColumnIndex: number, cb?: () => void): void;\n    isDataRow(rowIndex: number, includeSummary?: boolean): boolean;\n    isGroupRow(rowIndex: number): boolean;\n    setActiveNode(activeNode: IActiveNode): void;\n    isActiveNodeChanged(activeNode: IActiveNode): boolean;\n    protected getNextPosition(rowIndex: number, colIndex: number, key: string, shift: boolean, ctrl: boolean, event: KeyboardEvent): {\n        rowIndex: number;\n        colIndex: number;\n    };\n    protected horizontalNav(event: KeyboardEvent, key: string, rowIndex: number, tag: GridKeydownTargetType): void;\n    get lastColumnIndex(): number;\n    get displayContainerWidth(): number;\n    get displayContainerScrollLeft(): number;\n    get containerTopOffset(): number;\n    protected getColumnUnpinnedIndex(visibleColumnIndex: number): any;\n    protected forOfDir(): IgxForOfDirective<any>;\n    protected handleAlt(key: string, event: KeyboardEvent): void;\n    protected handleEditing(shift: boolean, event: KeyboardEvent): void;\n    protected navigateInBody(rowIndex: any, visibleColIndex: any, cb?: (arg: any) => void): void;\n    protected emitKeyDown(type: GridKeydownTargetType, rowIndex: any, event: any): true;\n    protected isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean;\n    protected findFirstDataRowIndex(): number;\n    protected findLastDataRowIndex(): number;\n    protected getRowElementByIndex(index: any): any;\n    protected isValidPosition(rowIndex: number, colIndex: number): boolean;\n    protected performHeaderKeyCombination(column: any, key: any, shift: any, ctrl: any, alt: any, event: any): void;\n    private firstVisibleNode;\n    private handleMCHeaderNav;\n    private handleMCHExpandCollapse;\n    private handleColumnSelection;\n    private getNextColumnMCH;\n    private get currentActiveColumn();\n    private isActiveNode;\n    private isToggleKey;\n    private isAddKey;\n}\n"]}