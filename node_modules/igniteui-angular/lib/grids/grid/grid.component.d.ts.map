{"version":3,"file":"grid.component.d.ts","sources":["grid.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, QueryList, ElementRef, TemplateRef, DoCheck, AfterContentInit, OnInit, AfterViewInit } from '@angular/core';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective, IgxGridDetailTemplateDirective } from './grid.directives';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGroupByRowSelectorDirective } from '../selection/row-selectors';\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n/**\n * Grid provides a way to present and manipulate tabular data.\n *\n * @igxModule IgxGridModule\n * @igxGroup Grids & Lists\n * @igxKeywords grid, table\n * @igxTheme igx-grid-theme\n * @remarks\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n * @example\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\nexport declare class IgxGridComponent extends IgxGridBaseDirective implements GridType, OnInit, DoCheck, AfterContentInit, AfterViewInit {\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     *\n     * @example\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n     */\n    onDataPreLoad: EventEmitter<IForOfState>;\n    /**\n     * @hidden\n     */\n    groupingExpressionsChange: EventEmitter<IGroupingExpression[]>;\n    /**\n     * @hidden @internal\n     */\n    groupingExpansionStateChange: EventEmitter<IGroupByExpandState[]>;\n    /**\n     * Emitted when columns are grouped/ungrouped.\n     *\n     * @remarks\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    onGroupingDone: EventEmitter<IGroupingDoneEventArgs>;\n    /**\n     * Gets/Sets whether created groups are rendered expanded or collapsed.\n     *\n     * @remarks\n     * The default rendered state is expanded.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    groupsExpanded: boolean;\n    /**\n     * Gets/Sets the template that will be rendered as a GroupBy drop area.\n     *\n     * @remarks\n     * The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * @example\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     */\n    dropAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    detailTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    defaultDropAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    groupArea: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    role: string;\n    /**\n     * Gets/Sets the value of the `id` attribute.\n     *\n     * @remarks\n     * If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    id: string;\n    /**\n     * @hidden @internal\n     */\n    protected recordTemplate: TemplateRef<any>;\n    protected detailTemplateContainer: TemplateRef<any>;\n    protected defaultGroupTemplate: TemplateRef<any>;\n    protected summaryTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n    /**\n     * @hidden @internal\n     */\n    protected gridDetailsTemplate: IgxGridDetailTemplateDirective;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected groupByRowSelectorsTemplates: QueryList<IgxGroupByRowSelectorDirective>;\n    private _groupsRowList;\n    /**\n     * Gets the hierarchical representation of the group by records.\n     *\n     * @example\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n     */\n    groupsRecords: IGroupByRecord[];\n    /**\n     * @hidden @internal\n     */\n    groupingResult: any[];\n    /**\n     * @hidden @internal\n     */\n    groupingMetadata: any[];\n    /**\n     * @hidden @internal\n     */\n    groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer: any;\n    private _data;\n    private _hideGroupedColumns;\n    private _dropAreaMessage;\n    private _showGroupArea;\n    /**\n     * Gets/Sets the array of data that populates the `IgxGridComponent`.\n     *\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get data(): any[];\n    set data(value: any[]);\n    /**\n     * Gets/Sets an array of objects containing the filtered data.\n     *\n     * @example\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * this.grid.filteredData = [...];\n     * ```\n     */\n    get filteredData(): any;\n    set filteredData(value: any);\n    /**\n     * Gets/Sets the total number of records in the data source.\n     *\n     * @remarks\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * @example\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * this.grid1.totalItemCount = 55;\n     * ```\n     */\n    set totalItemCount(count: number);\n    get totalItemCount(): number;\n    private get _gridAPI();\n    private _filteredData;\n    private childDetailTemplates;\n    /**\n     * Gets/Sets the group by state.\n     *\n     * @example\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * this.grid.groupingExpressions = [...];\n     * ```\n     * @remarks\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n     * ```\n     */\n    get groupingExpressions(): IGroupingExpression[];\n    set groupingExpressions(value: IGroupingExpression[]);\n    /**\n     * Gets/Sets a list of expansion states for group rows.\n     *\n     * @remarks\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n     * ```\n     */\n    get groupingExpansionState(): IGroupByExpandState[];\n    set groupingExpansionState(value: IGroupByExpandState[]);\n    /**\n     * Gets/Sets whether the grouped columns should be hidden.\n     *\n     * @remarks\n     * The default value is \"false\"\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    get hideGroupedColumns(): boolean;\n    set hideGroupedColumns(value: boolean);\n    /**\n     * Gets/Sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     *\n     * @remarks\n     * The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * @example\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n     */\n    set dropAreaMessage(value: string);\n    get dropAreaMessage(): string;\n    /**\n     * Gets the list of group rows.\n     *\n     * @example\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n     */\n    get groupsRowList(): QueryList<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    get groupByRowSelectorTemplate(): TemplateRef<IgxGroupByRowSelectorDirective>;\n    /**\n     * @hidden @internal\n     */\n    getDetailsContext(rowData: any, index: any): {\n        $implicit: any;\n        index: any;\n    };\n    /**\n     * @hidden @internal\n     */\n    trackChanges(index: any, rec: any): any;\n    /**\n     * @hidden @internal\n     */\n    detailsViewFocused(container: any, rowIndex: any): void;\n    /**\n     * @hidden @internal\n     */\n    get hasDetails(): boolean;\n    /**\n     * @hidden @internal\n     */\n    getRowTemplate(rowData: any): TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    isDetailRecord(record: any): boolean;\n    /**\n     * @hidden @internal\n     */\n    isDetailActive(rowIndex: any): boolean;\n    /**\n     * @hidden @internal\n     */\n    get groupAreaHostClass(): string;\n    /**\n     * Gets/Sets the template reference for the group row.\n     *\n     * @example\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * this.grid.groupRowTemplate = myRowTemplate;\n     * ```\n     */\n    get groupRowTemplate(): TemplateRef<any>;\n    set groupRowTemplate(template: TemplateRef<any>);\n    /**\n     * Gets/Sets the template reference of the `IgxGridComponent`'s group area.\n     *\n     * @example\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n     */\n    get groupAreaTemplate(): TemplateRef<any>;\n    set groupAreaTemplate(template: TemplateRef<any>);\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     *\n     * @remarks\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * @example\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n     *     { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n     *     { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n     *     { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n     * ]);\n     * ```\n     */\n    groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void;\n    /**\n     * Clears grouping for particular column, array of columns or all columns.\n     *\n     * @remarks\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * @example\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     * @param name Name of column or array of column names to be ungrouped.\n     */\n    clearGrouping(name?: string | Array<string>): void;\n    preventHeaderScroll(args: any): void;\n    /**\n     * Returns if a group is expanded or not.\n     *\n     * @param group The group record.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n     */\n    isExpandedGroup(group: IGroupByRecord): boolean;\n    /**\n     * Toggles the expansion state of a group.\n     *\n     * @param groupRow The group record to toggle.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n     */\n    toggleGroup(groupRow: IGroupByRecord): void;\n    /**\n     * Select all rows within a group.\n     *\n     * @param groupRow: The group record which rows would be selected.\n     * @param clearCurrentSelection if true clears the current selection\n     * @example\n     * ```typescript\n     * this.grid.selectRowsInGroup(this.groupRow, true);\n     * ```\n     */\n    selectRowsInGroup(groupRow: IGroupByRecord, clearPrevSelection?: boolean): void;\n    /**\n     * Deselect all rows within a group.\n     *\n     * @param groupRow The group record which rows would be deselected.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.deselectRowsInGroup(this.groupRow);\n     * ```\n     */\n    deselectRowsInGroup(groupRow: IGroupByRecord): void;\n    /**\n     * Expands the specified group and all of its parent groups.\n     *\n     * @param groupRow The group record to fully expand.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     */\n    fullyExpandGroup(groupRow: IGroupByRecord): void;\n    /**\n     * @hidden @internal\n     */\n    isGroupByRecord(record: any): boolean;\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     *\n     * @example\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n     */\n    toggleAllGroupRows(): void;\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     *\n     * @example\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n     */\n    get hasGroupableColumns(): boolean;\n    /**\n     * Returns whether the `IgxGridComponent` has group area.\n     *\n     * @example\n     * ```typescript\n     * let isGroupAreaVisible = this.grid.showGroupArea;\n     * ```\n     *\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [showGroupArea]=\"false\"></igx-grid>\n     * ```\n     */\n    get showGroupArea(): boolean;\n    set showGroupArea(value: boolean);\n    /**\n     * Gets if the grid's group by drop area is visible.\n     *\n     * @example\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n     */\n    get dropAreaVisible(): boolean;\n    /**\n     * @hidden @internal\n     */\n    isColumnGrouped(fieldName: string): boolean;\n    /**\n     * @hidden @internal\n     */\n    getContext(rowData: any, rowIndex: number, pinned?: boolean): any;\n    /**\n     * @hidden @internal\n     */\n    viewCreatedHandler(args: any): void;\n    /**\n     * @hidden @internal\n     */\n    viewMovedHandler(args: any): void;\n    /**\n     * @hidden @internal\n     */\n    onChipRemoved(event: IBaseChipEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    chipsOrderChanged(event: IChipsAreaReorderEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    chipsMovingEnded(): void;\n    /**\n     * @hidden @internal\n     */\n    onChipClicked(event: IChipClickEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    onChipKeyDown(event: IChipKeyDownEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    get dropAreaTemplateResolved(): TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    getGroupByChipTitle(expression: IGroupingExpression): string;\n    /**\n     * @hidden @internal\n     */\n    get iconTemplate(): TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    getColumnGroupable(fieldName: string): boolean;\n    /**\n     * @hidden @internal\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngDoCheck(): void;\n    /**\n     * @hidden @internal\n     */\n    dataLoading(event: any): void;\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters?: boolean, headers?: boolean): any[];\n    /**\n     * @hidden @internal\n     */\n    protected get defaultTargetBodyHeight(): number;\n    /**\n     * @hidden @internal\n     */\n    protected getGroupAreaHeight(): number;\n    /**\n     * @hidden @internal\n     */\n    protected scrollTo(row: any | number, column: any | number): void;\n    /**\n     * @hidden @internal\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState;\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord): void;\n    /**\n     * @hidden @internal\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord): void;\n    /**\n     * @hidden @internal\n     */\n    protected _applyGrouping(): void;\n    private _setupNavigationService;\n    private checkIfNoColumnField;\n    private _setGroupColsVisibility;\n}\n"]}