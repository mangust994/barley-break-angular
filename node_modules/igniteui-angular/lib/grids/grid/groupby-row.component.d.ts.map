{"version":3,"file":"groupby-row.component.d.ts","sources":["groupby-row.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, TemplateRef, OnDestroy } from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode } from '../selection/selection.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { Subject } from 'rxjs';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxGridComponent } from './grid.component';\nexport declare class IgxGridGroupByRowComponent implements OnDestroy {\n    gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>;\n    gridSelection: IgxGridSelectionService;\n    element: ElementRef;\n    cdr: ChangeDetectorRef;\n    filteringService: IgxFilteringService;\n    /**\n     * @hidden\n     */\n    hideGroupRowSelectors: boolean;\n    /**\n     * @hidden\n     */\n    rowDraggable: boolean;\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    index: number;\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    gridID: string;\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    groupRow: IGroupByRecord;\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    groupContent: ElementRef;\n    /**\n     * @hidden\n     */\n    protected isFocused: boolean;\n    /**\n     * @hidden\n     */\n    protected defaultGroupByExpandedTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected defaultGroupByCollapsedTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected destroy$: Subject<any>;\n    /**\n     * @hidden\n     */\n    protected defaultCssClass: string;\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass: string;\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean;\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, gridSelection: IgxGridSelectionService, element: ElementRef, cdr: ChangeDetectorRef, filteringService: IgxFilteringService);\n    activate(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    get expanded(): boolean;\n    /**\n     * @hidden\n     */\n    get describedBy(): string;\n    get dataRowIndex(): number;\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any;\n    get attrCellID(): string;\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    get styleClasses(): string;\n    isActive(): boolean;\n    /**\n     * @hidden @internal\n     */\n    getRowID(rowData: any): IgxGridRowComponent;\n    /**\n     * @hidden @internal\n     */\n    onGroupSelectorClick(event: any): void;\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    toggle(): void;\n    get iconTemplate(): TemplateRef<any>;\n    protected get selectionNode(): ISelectionNode;\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): IgxGridComponent;\n    /**\n     * @hidden\n     */\n    get dataType(): any;\n    /**\n     * @hidden @internal\n     */\n    get areAllRowsInTheGroupSelected(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get selectedRowsInTheGroup(): any[];\n    /**\n     * @hidden @internal\n     */\n    get groupByRowCheckboxIndeterminateState(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get groupByRowSelectorBaseAriaLabel(): string;\n    /**\n     * @hidden @internal\n     */\n    get showRowSelectors(): boolean;\n}\n"]}