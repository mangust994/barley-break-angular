import { PipeTransform } from '@angular/core';
import { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';
import { IGroupByResult } from '../../data-operations/grouping-result.interface';
import { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { ISortingExpression } from '../../data-operations/sorting-expression.interface';
import { IGroupingExpression } from '../../data-operations/grouping-expression.interface';
import { GridBaseAPIService } from '../api.service';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { GridType } from '../common/grid.interface';
import { IFilteringStrategy } from '../../data-operations/filtering-strategy';
import { IGridSortingStrategy } from '../../data-operations/sorting-strategy';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridSortingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], expressions: ISortingExpression[], sorting: IGridSortingStrategy, id: string, pipeTrigger: number, pinned?: any): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridSortingPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridSortingPipe, "gridSort">;
}
/**
 * @hidden
 */
export declare class IgxGridGroupingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[], expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean, id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridGroupingPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridGroupingPipe, "gridGroupBy">;
}
/**
 * @hidden
 */
export declare class IgxGridPagingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: IGroupByResult, page: number, perPage: number, id: string, pipeTrigger: number): IGroupByResult;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridPagingPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridPagingPipe, "gridPaging">;
}
/**
 * @hidden
 */
export declare class IgxGridFilteringPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], expressionsTree: IFilteringExpressionsTree, filterStrategy: IFilteringStrategy, advancedExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number, filteringPipeTrigger: number, pinned?: any): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridFilteringPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridFilteringPipe, "gridFiltering">;
}

//# sourceMappingURL=grid.pipes.d.ts.map