import { Subject } from 'rxjs';
import { ISortingExpression } from '../data-operations/sorting-expression.interface';
import { IgxGridCellComponent } from './cell.component';
import { IgxGridBaseDirective } from './grid-base.directive';
import { IgxRowDirective } from './row.directive';
import { IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { IgxCell, IgxRow } from './selection/selection.service';
import { GridType } from './common/grid.interface';
import { ColumnType } from './common/column.interface';
import { IGridEditEventArgs } from './common/events';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class GridBaseAPIService<T extends IgxGridBaseDirective & GridType> {
    grid: T;
    protected destroyMap: Map<string, Subject<boolean>>;
    get_column_by_name(name: string): ColumnType;
    get_summary_data(): any[];
    /**
     * @hidden
     * @internal
     */
    getRowData(rowID: any): any;
    get_row_index_in_data(rowID: any, dataCollection?: any[]): number;
    get_row_by_key(rowSelector: any): IgxRowDirective<IgxGridBaseDirective & GridType>;
    get_row_by_index(rowIndex: number): IgxRowDirective<IgxGridBaseDirective & GridType>;
    get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent;
    get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;
    get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;
    submit_value(event?: Event): true;
    submit_add_value(event?: Event): boolean;
    update_add_cell(cell: IgxCell, value: any, event?: Event): IGridEditEventArgs;
    update_cell(cell: IgxCell, value: any, event?: Event): IGridEditEventArgs;
    _update_row(row: IgxRow, value?: any): void;
    update_row(row: IgxRow, value: any, event?: Event): IGridEditEventArgs;
    sort(expression: ISortingExpression): void;
    sort_multiple(expressions: ISortingExpression[]): void;
    clear_sort(fieldName: string): void;
    clear_groupby(name?: string | Array<string>): void;
    should_apply_number_style(column: ColumnType): boolean;
    get_data(): any[];
    get_all_data(includeTransactions?: boolean): any[];
    get_filtered_data(): any[];
    addRowToData(rowData: any, parentRowID?: any): void;
    deleteRowFromData(rowID: any, index: number): void;
    deleteRowById(rowId: any): void;
    get_row_id(rowData: any): any;
    row_deleted_transaction(rowID: any): boolean;
    get_row_expansion_state(record: any): boolean;
    set_row_expansion_state(rowID: any, expanded: boolean, event?: Event): void;
    get_rec_by_id(rowID: any): any;
    allow_expansion_state_change(rowID: any, expanded: any): boolean;
    prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression): void;
    remove_grouping_expression(fieldName: any): void;
    filterDataByExpressions(expressionsTree: IFilteringExpressionsTree): any[];
    /**
     * Updates related row of provided grid's data source with provided new row value
     *
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    protected updateData(grid: any, rowID: any, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {
        [x: string]: any;
    }): void;
    protected update_row_in_array(value: any, rowID: any, index: number): void;
    protected getSortStrategyPerColumn(fieldName: string): import("../data-operations/sorting-strategy").ISortingStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridBaseAPIService<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GridBaseAPIService<any>>;
}

//# sourceMappingURL=api.service.d.ts.map