{"version":3,"file":"tree-grid.component.d.ts","sources":["tree-grid.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, TemplateRef, QueryList, AfterContentInit, DoCheck, AfterViewInit } from '@angular/core';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState } from '../../services/transaction/transaction';\nimport { HierarchicalTransactionService } from '../../services/public_api';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnComponent } from '../columns/column.component';\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid/grid)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\nexport declare class IgxTreeGridComponent extends IgxGridBaseDirective implements GridType, OnInit, AfterViewInit, DoCheck, AfterContentInit {\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    childDataKey: any;\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    foreignKey: any;\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    hasChildrenKey: any;\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    cascadeOnDelete: boolean;\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n    /**\n     * @hidden @internal\n     */\n    role: string;\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    id: string;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragIndicatorIconBase: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    protected recordTemplate: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    protected summaryTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n    /**\n     * @hidden\n     */\n    flatData: any[];\n    /**\n     * @hidden\n     */\n    processedExpandedFlatData: any[];\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    rootRecords: ITreeGridRecord[];\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    records: Map<any, ITreeGridRecord>;\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    processedRootRecords: ITreeGridRecord[];\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    processedRecords: Map<any, ITreeGridRecord>;\n    /**\n     * @hidden\n     */\n    loadingRows: Set<any>;\n    protected _transactions: HierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n    private _data;\n    private _rowLoadingIndicatorTemplate;\n    private _expansionDepth;\n    private _filteredData;\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    get data(): any[];\n    set data(value: any[]);\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    get filteredData(): any;\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value: any);\n    /**\n     * Get transactions service for the grid.\n     *\n     * @experimental @hidden\n     */\n    get transactions(): HierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    get expansionDepth(): number;\n    set expansionDepth(value: number);\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon>loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    get rowLoadingIndicatorTemplate(): TemplateRef<any>;\n    set rowLoadingIndicatorTemplate(value: TemplateRef<any>);\n    private get _gridAPI();\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    getDefaultExpandState(record: ITreeGridRecord): boolean;\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    expandAll(): void;\n    /**\n     * Collapses all rows.\n     *\n     * ```typescript\n     * this.grid.collapseAll();\n     *  ```\n     *\n     * @memberof IgxTreeGridComponent\n     */\n    collapseAll(): void;\n    /**\n     * @hidden\n     */\n    refreshGridState(args?: any): void;\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     *\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    addRow(data: any, parentRowID?: any): void;\n    /**\n     * @hidden\n     */\n    getContext(rowData: any, rowIndex: number, pinned?: boolean): any;\n    /**\n     * @hidden\n     * @internal\n     */\n    getInitialPinnedIndex(rec: any): number;\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters?: boolean, headers?: boolean): any[];\n    getEmptyRecordObjectFor(rec: any): any;\n    /** @hidden */\n    deleteRowById(rowId: any): void;\n    /** @hidden */\n    generateRowPath(rowId: any): any[];\n    protected findRecordIndexInView(rec: any): number;\n    protected getUnpinnedIndexById(id: any): number;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected _getParentRecordId(): any;\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number;\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void;\n    protected writeToData(rowIndex: number, value: any): void;\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb?: (args: any) => void): void;\n    /**\n     * @description A recursive way to deselect all selected children of a given record\n     * @param recordID ID of the record whose children to deselect\n     * @hidden\n     * @internal\n     */\n    private deselectChildren;\n    private addChildRows;\n    private loadChildrenOnRowExpansion;\n    private handleCascadeSelection;\n}\n"]}