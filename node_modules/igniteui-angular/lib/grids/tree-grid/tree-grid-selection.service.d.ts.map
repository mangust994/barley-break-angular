{"version":3,"file":"tree-grid-selection.service.d.ts","sources":["tree-grid-selection.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IgxGridSelectionService } from '../selection/selection.service';\nexport declare class IgxTreeGridSelectionService extends IgxGridSelectionService {\n    private rowsToBeSelected;\n    private rowsToBeIndeterminate;\n    /** Select specified rows. No event is emitted. */\n    selectRowsWithNoEvent(rowIDs: any[], clearPrevSelection?: any): void;\n    /** Deselect specified rows. No event is emitted. */\n    deselectRowsWithNoEvent(rowIDs: any[]): void;\n    emitRowSelectionEvent(newSelection: any, added: any, removed: any, event?: any): boolean;\n    updateCascadeSelectionOnFilterAndCRUD(parents: Set<any>, crudRowID?: any, visibleRowIDs?: any[]): void;\n    private cascadeSelectRowsWithNoEvent;\n    private cascadeDeselectRowsWithNoEvent;\n    get selectionService(): IgxGridSelectionService;\n    private emitCascadeRowSelectionEvent;\n    /**\n     * retrieve the rows which should be added/removed to/from the old selection\n     */\n    private handleAddedAndRemovedArgs;\n    /**\n     * adds to rowsToBeProcessed set all visible children of the rows which was initially within the rowsToBeProcessed set\n     *\n     * @param rowsToBeProcessed set of the rows (without their parents/children) to be selected/deselected\n     * @param visibleRowIDs list of all visible rowIds\n     * @returns a new set with all direct parents of the rows within rowsToBeProcessed set\n     */\n    private collectRowsChildrenAndDirectParents;\n    /**\n     * populates the rowsToBeSelected and rowsToBeIndeterminate sets\n     * with the rows which will be eventually in selected/indeterminate state\n     */\n    private calculateRowsNewSelectionState;\n    /**\n     * recursively handle the selection state of the direct and indirect parents\n     */\n    private handleParentSelectionState;\n    /**\n     * Handle the selection state of a given row based the selection states of its direct children\n     */\n    private handleRowSelectionState;\n    private get_all_children;\n}\n"]}