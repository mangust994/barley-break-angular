{"version":3,"file":"grid.excel-style-filtering.component.d.ts","sources":["grid.excel-style-filtering.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, TemplateRef, OnDestroy, ElementRef, EventEmitter } from '@angular/core';\nimport { IgxOverlayService } from '../../../services/public_api';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxGridBaseDirective } from '../../grid-base.directive';\nimport { GridBaseAPIService } from '../../api.service';\n/**\n * @hidden\n */\nexport declare class FilterListItem {\n    value: any;\n    label: any;\n    isSelected: boolean;\n    indeterminate: boolean;\n    isFiltered: boolean;\n    isSpecial: boolean;\n    isBlanks: boolean;\n}\nexport declare class IgxExcelStyleColumnOperationsTemplateDirective {\n    constructor();\n}\nexport declare class IgxExcelStyleFilterOperationsTemplateDirective {\n    constructor();\n}\n/**\n * A component used for presenting Excel style filtering UI for a specific column.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-grid-excel-style-filtering\n *     [column]=\"grid1.columns[0]\">\n * </igx-grid-excel-style-filtering>\n * ```\n */\nexport declare class IgxGridExcelStyleFilteringComponent implements OnDestroy {\n    private cdr;\n    element: ElementRef;\n    private gridAPI?;\n    /**\n     * @hidden @internal\n     */\n    defaultClass: boolean;\n    /**\n     * @hidden @internal\n     */\n    inline: boolean;\n    /**\n     * @hidden @internal\n     */\n    loadingStart: EventEmitter<any>;\n    /**\n     * @hidden @internal\n     */\n    loadingEnd: EventEmitter<any>;\n    /**\n     * @hidden @internal\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * @hidden @internal\n     */\n    sortingChanged: EventEmitter<any>;\n    /**\n     * @hidden @internal\n     */\n    columnChange: EventEmitter<IgxColumnComponent>;\n    /**\n     * @hidden @internal\n     */\n    listDataLoaded: EventEmitter<any>;\n    mainDropdown: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    excelColumnOperationsDirective: IgxExcelStyleColumnOperationsTemplateDirective;\n    /**\n     * @hidden @internal\n     */\n    excelFilterOperationsDirective: IgxExcelStyleFilterOperationsTemplateDirective;\n    /**\n     * @hidden @internal\n     */\n    protected defaultExcelColumnOperations: TemplateRef<any>;\n    /**\n     * @hidden @internal\n     */\n    protected defaultExcelFilterOperations: TemplateRef<any>;\n    /**\n     * An @Input property that sets the column.\n     */\n    set column(value: IgxColumnComponent);\n    /**\n     * Returns the current column.\n     */\n    get column(): IgxColumnComponent;\n    /**\n     * @hidden @internal\n     */\n    get filteringService(): IgxFilteringService;\n    /**\n     * @hidden @internal\n     */\n    expressionsList: ExpressionUI[];\n    /**\n     * @hidden @internal\n     */\n    listData: FilterListItem[];\n    /**\n     * @hidden @internal\n     */\n    uniqueValues: any[];\n    /**\n     * @hidden @internal\n     */\n    overlayService: IgxOverlayService;\n    /**\n     * @hidden @internal\n     */\n    overlayComponentId: string;\n    private _minHeight;\n    /**\n     * Gets the minimum height.\n     */\n    get minHeight(): string;\n    /**\n     * Sets the minimum height.\n     */\n    set minHeight(value: string);\n    private _maxHeight;\n    private destroy$;\n    private containsNullOrEmpty;\n    private selectAllSelected;\n    private selectAllIndeterminate;\n    private filterValues;\n    private _column;\n    private _columnPinning;\n    private _columnVisibilityChanged;\n    private _sortingChanged;\n    private _filteringChanged;\n    private _densityChanged;\n    private _columnMoved;\n    private _originalDisplay;\n    /**\n     * Gets the maximum height.\n     */\n    get maxHeight(): string;\n    /**\n     * Sets the maximum height.\n     */\n    set maxHeight(value: string);\n    /**\n     * @hidden @internal\n     */\n    get grid(): IgxGridBaseDirective;\n    /**\n     * @hidden @internal\n     */\n    get displayDensity(): string;\n    constructor(cdr: ChangeDetectorRef, element: ElementRef, gridAPI?: GridBaseAPIService<IgxGridBaseDirective>);\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden @internal\n     */\n    selectedClass(): \"igx-excel-filter__actions-selected\" | \"igx-excel-filter__actions-select\";\n    /**\n     * @hidden @internal\n     */\n    initialize(column: IgxColumnComponent, overlayService: IgxOverlayService, overlayComponentId: string): void;\n    /**\n     * @hidden @internal\n     */\n    onPin(): void;\n    /**\n     * @hidden @internal\n     */\n    onSelect(): void;\n    /**\n     * @hidden @internal\n     */\n    columnSelectable(): boolean;\n    /**\n     * @hidden @internal\n     */\n    onHideToggle(): void;\n    /**\n     * @hidden @internal\n     */\n    cancel(): void;\n    /**\n     * @hidden @internal\n     */\n    closeDropdown(): void;\n    /**\n     * @hidden @internal\n     */\n    onKeyDown(eventArgs: any): void;\n    /**\n     * @hidden @internal\n     */\n    hide(): void;\n    /**\n     * @hidden @internal\n     */\n    detectChanges(): void;\n    private init;\n    private areExpressionsSelectable;\n    private areExpressionsValuesInTheList;\n    private populateColumnData;\n    private renderColumnValuesRemotely;\n    private shouldFormatValues;\n    private renderColumnValuesFromData;\n    private renderValues;\n    private generateUniqueValues;\n    private generateFilterValues;\n    private generateListData;\n    private getColumnFilterExpressionsTree;\n    private addBooleanItems;\n    private addItems;\n    private addSelectAllItem;\n    private addBlanksItem;\n    private sortData;\n    private getFilterItemLabel;\n    private getFilterItemValue;\n    private getExpressionValue;\n}\n"]}