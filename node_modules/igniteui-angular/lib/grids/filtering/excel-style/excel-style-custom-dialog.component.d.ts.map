{"version":3,"file":"excel-style-custom-dialog.component.d.ts","sources":["excel-style-custom-dialog.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, AfterViewInit, TemplateRef, ElementRef } from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport { IgxOverlayService } from '../../../services/public_api';\nimport { ILogicOperatorChangedArgs } from './excel-style-default-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n/**\n * @hidden\n */\nexport declare class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n    private cdr;\n    expressionsList: ExpressionUI[];\n    column: IgxColumnComponent;\n    selectedOperator: string;\n    filteringService: IgxFilteringService;\n    overlayComponentId: string;\n    overlayService: IgxOverlayService;\n    displayDensity: DisplayDensity;\n    toggle: IgxToggleDirective;\n    protected defaultExpressionTemplate: TemplateRef<any>;\n    protected dateExpressionTemplate: TemplateRef<any>;\n    protected expressionsContainer: ElementRef;\n    private expressionComponents;\n    private expressionDateComponents;\n    private _customDialogPositionSettings;\n    private _customDialogOverlaySettings;\n    constructor(cdr: ChangeDetectorRef);\n    ngAfterViewInit(): void;\n    get template(): TemplateRef<any>;\n    get grid(): any;\n    onCustomDialogOpening(): void;\n    onCustomDialogOpened(): void;\n    open(esf: any): void;\n    onClearButtonClick(): void;\n    closeDialog(): void;\n    onApplyButtonClick(): void;\n    onAddButtonClick(): void;\n    onExpressionRemoved(event: ExpressionUI): void;\n    onLogicOperatorChanged(event: ILogicOperatorChangedArgs): void;\n    onKeyDown(eventArgs: any): void;\n    onApplyButtonKeyDown(eventArgs: any): void;\n    private createCondition;\n    private markChildrenForCheck;\n    private createInitialExpressionUIElement;\n    private scrollToBottom;\n}\n"]}