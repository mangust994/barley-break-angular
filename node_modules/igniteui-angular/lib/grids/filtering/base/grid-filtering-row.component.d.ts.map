{"version":3,"file":"grid-filtering-row.component.d.ts","sources":["grid-filtering-row.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, TemplateRef, QueryList, ElementRef } from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../../drop-down/public_api';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips/public_api';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxFilteringService } from '../grid-filtering.service';\n/**\n * @hidden\n */\nexport declare class IgxGridFilteringRowComponent implements AfterViewInit {\n    filteringService: IgxFilteringService;\n    element: ElementRef;\n    cdr: ChangeDetectorRef;\n    get column(): IgxColumnComponent;\n    set column(val: IgxColumnComponent);\n    get value(): any;\n    set value(val: any);\n    get displayDensity(): string;\n    protected defaultFilterUI: TemplateRef<any>;\n    protected defaultDateUI: TemplateRef<any>;\n    protected input: ElementRef;\n    protected dropDownConditions: IgxDropDownComponent;\n    protected chipsArea: IgxChipsAreaComponent;\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n    protected inputGroup: ElementRef;\n    protected inputGroupPrefix: ElementRef;\n    protected container: ElementRef;\n    protected operand: ElementRef;\n    protected closeButton: ElementRef;\n    get styleClasses(): string;\n    showArrows: boolean;\n    expression: IFilteringExpression;\n    expressionsList: Array<ExpressionUI>;\n    private _positionSettings;\n    private _conditionsOverlaySettings;\n    private _operatorsOverlaySettings;\n    private chipsAreaWidth;\n    private chipAreaScrollOffset;\n    private _column;\n    private isKeyPressed;\n    private isComposing;\n    private _cancelChipClick;\n    constructor(filteringService: IgxFilteringService, element: ElementRef, cdr: ChangeDetectorRef);\n    onKeydownHandler(evt: any): void;\n    ngAfterViewInit(): void;\n    get disabled(): boolean;\n    get template(): TemplateRef<any>;\n    get type(): \"text\" | \"number\";\n    get conditions(): any;\n    get isUnaryCondition(): boolean;\n    get placeholder(): string;\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    onPrefixKeyDown(event: KeyboardEvent): void;\n    /**\n     * Event handler for keydown on the input.\n     */\n    onInputKeyDown(event: KeyboardEvent): void;\n    /**\n     * Event handler for keyup on the input.\n     */\n    onInputKeyUp(): void;\n    /**\n     * Event handler for input on the input.\n     */\n    onInput(eventArgs: any): void;\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    onCompositionStart(): void;\n    /**\n     * Event handler for compositionend on the input.\n     */\n    onCompositionEnd(): void;\n    /**\n     * Event handler for input click event.\n     */\n    onInputClick(): void;\n    /**\n     * Event handler for datepicker's close.\n     */\n    datePickerClose(): void;\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    getCondition(value: string): IFilteringOperation;\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    translateCondition(value: string): string;\n    /**\n     * Returns the icon name of the current condition.\n     */\n    getIconName(): string;\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    isConditionSelected(conditionName: string): boolean;\n    /**\n     * Clears the current filtering.\n     */\n    clearFiltering(): void;\n    /**\n     * Commits the value of the input.\n     */\n    commitInput(): void;\n    /**\n     * Clears the value of the input.\n     */\n    clearInput(): void;\n    /**\n     * Event handler for keydown on clear button.\n     */\n    onClearKeyDown(eventArgs: KeyboardEvent): void;\n    /**\n     * Event handler for click on clear button.\n     */\n    onClearClick(): void;\n    /**\n     * Event handler for keydown on commit button.\n     */\n    onCommitKeyDown(eventArgs: KeyboardEvent): void;\n    /**\n     * Event handler for click on commit button.\n     */\n    onCommitClick(): void;\n    /**\n     * Event handler for focusout on the input group.\n     */\n    onInputGroupFocusout(): void;\n    /**\n     * Closes the filtering edit row.\n     */\n    close(): void;\n    /**\n     *  Event handler for date picker's selection.\n     */\n    onDateSelected(value: Date): void;\n    /** @hidden @internal */\n    inputGroupPrefixClick(event: MouseEvent): void;\n    /**\n     * Opens the conditions dropdown.\n     */\n    toggleConditionsDropDown(target: any): void;\n    /**\n     * Opens the logic operators dropdown.\n     */\n    toggleOperatorsDropDown(eventArgs: any, index: any): void;\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    onConditionsChanged(eventArgs: any): void;\n    onChipPointerdown(args: any, chip: IgxChipComponent): void;\n    onChipClick(args: any, item: ExpressionUI): void;\n    toggleChip(item: ExpressionUI): void;\n    /**\n     * Event handler for chip keydown event.\n     */\n    onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI): void;\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    onLeftArrowKeyDown(event: any): void;\n    /**\n     * Event handler for chip removed event.\n     */\n    onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void;\n    /**\n     * Event handler for logic operator changed event.\n     */\n    onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI): void;\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    scrollChipsOnArrowPress(arrowPosition: string): void;\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    resetChipsArea(): void;\n    private showHideArrowButtons;\n    private addExpression;\n    private removeExpression;\n    private resetExpression;\n    private scrollChipsWhenAddingExpression;\n    private transform;\n    private scrollChipsOnRemove;\n    private conditionChangedCallback;\n    private unaryConditionChangedCallback;\n    private filter;\n    private get isColumnFiltered();\n    get isNarrowWidth(): boolean;\n}\n"]}