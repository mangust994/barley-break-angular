{"version":3,"file":"advanced-filtering-dialog.component.d.ts","sources":["advanced-filtering-dialog.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, QueryList, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\nimport { OverlaySettings } from '../../../services/overlay/utilities';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { GridType } from '../../common/grid.interface';\nimport { IActiveNode } from '../../grid-navigation.service';\n/**\n * @hidden\n */\ndeclare class ExpressionItem {\n    parent: ExpressionGroupItem;\n    selected: boolean;\n    constructor(parent?: ExpressionGroupItem);\n}\n/**\n * @hidden\n */\ndeclare class ExpressionGroupItem extends ExpressionItem {\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem);\n}\n/**\n * @hidden\n */\ndeclare class ExpressionOperandItem extends ExpressionItem {\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n    columnHeader: string;\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem);\n}\n/**\n * A component used for presenting advanced filtering UI for a Grid.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-advanced-filtering-dialog\n *     [grid]=\"grid1\">\n * </igx-advanced-filtering-dialog>\n * ```\n */\nexport declare class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    cdr: ChangeDetectorRef;\n    /**\n     * @hidden @internal\n     */\n    columnSelect: IgxSelectComponent;\n    /**\n     * @hidden @internal\n     */\n    conditionSelect: IgxSelectComponent;\n    /**\n     * @hidden @internal\n     */\n    searchValueInput: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    addRootAndGroupButton: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    addConditionButton: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    set editingInputsContainer(value: ElementRef);\n    /**\n     * @hidden @internal\n     */\n    get editingInputsContainer(): ElementRef;\n    /**\n     * @hidden @internal\n     */\n    set addModeContainer(value: ElementRef);\n    /**\n     * @hidden @internal\n     */\n    get addModeContainer(): ElementRef;\n    /**\n     * @hidden @internal\n     */\n    set currentGroupButtonsContainer(value: ElementRef);\n    /**\n     * @hidden @internal\n     */\n    get currentGroupButtonsContainer(): ElementRef;\n    /**\n     * @hidden @internal\n     */\n    contextMenuToggle: IgxToggleDirective;\n    /**\n     * @hidden @internal\n     */\n    chips: QueryList<IgxChipComponent>;\n    /**\n     * @hidden @internal\n     */\n    display: string;\n    /**\n     * @hidden @internal\n     */\n    protected expressionsContainer: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    protected overlayOutlet: IgxOverlayOutletDirective;\n    /**\n     * @hidden @internal\n     */\n    inline: boolean;\n    /**\n     * @hidden @internal\n     */\n    rootGroup: ExpressionGroupItem;\n    /**\n     * @hidden @internal\n     */\n    selectedExpressions: ExpressionOperandItem[];\n    /**\n     * @hidden @internal\n     */\n    selectedGroups: ExpressionGroupItem[];\n    /**\n     * @hidden @internal\n     */\n    currentGroup: ExpressionGroupItem;\n    /**\n     * @hidden @internal\n     */\n    editedExpression: ExpressionOperandItem;\n    /**\n     * @hidden @internal\n     */\n    addModeExpression: ExpressionOperandItem;\n    /**\n     * @hidden @internal\n     */\n    contextualGroup: ExpressionGroupItem;\n    /**\n     * @hidden @internal\n     */\n    filteringLogics: any;\n    /**\n     * @hidden @internal\n     */\n    selectedCondition: string;\n    /**\n     * @hidden @internal\n     */\n    searchValue: any;\n    /**\n     * @hidden @internal\n     */\n    lastActiveNode: IActiveNode;\n    /**\n     * @hidden @internal\n     */\n    columnSelectOverlaySettings: OverlaySettings;\n    /**\n     * @hidden @internal\n     */\n    conditionSelectOverlaySettings: OverlaySettings;\n    private destroy$;\n    private _overlayComponentId;\n    private _overlayService;\n    private _selectedColumn;\n    private _clickTimer;\n    private _dblClickDelay;\n    private _preventChipClick;\n    private _editingInputsContainer;\n    private _addModeContainer;\n    private _currentGroupButtonsContainer;\n    private _grid;\n    private _filteringChange;\n    private _positionSettings;\n    private _overlaySettings;\n    constructor(cdr: ChangeDetectorRef);\n    /**\n     * @hidden @internal\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden @internal\n     */\n    get displayDensity(): string;\n    /**\n     * @hidden @internal\n     */\n    get selectedColumn(): IgxColumnComponent;\n    /**\n     * @hidden @internal\n     */\n    set selectedColumn(value: IgxColumnComponent);\n    /**\n     * An @Input property that sets the grid.\n     */\n    set grid(grid: GridType);\n    /**\n     * Returns the grid.\n     */\n    get grid(): GridType;\n    /**\n     * @hidden @internal\n     */\n    get filterableColumns(): IgxColumnComponent[];\n    /**\n     * @hidden @internal\n     */\n    dragStart(dragArgs: IDragStartEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    dragEnd(): void;\n    /**\n     * @hidden @internal\n     */\n    onDragMove(e: any): void;\n    /**\n     * @hidden @internal\n     */\n    addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem): void;\n    /**\n     * @hidden @internal\n     */\n    addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem): void;\n    /**\n     * @hidden @internal\n     */\n    addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem): void;\n    /**\n     * @hidden @internal\n     */\n    endGroup(groupItem: ExpressionGroupItem): void;\n    /**\n     * @hidden @internal\n     */\n    commitOperandEdit(): void;\n    /**\n     * @hidden @internal\n     */\n    cancelOperandAdd(): void;\n    /**\n     * @hidden @internal\n     */\n    cancelOperandEdit(): void;\n    /**\n     * @hidden @internal\n     */\n    operandCanBeCommitted(): boolean;\n    /**\n     * @hidden @internal\n     */\n    exitOperandEdit(): void;\n    /**\n     * @hidden @internal\n     */\n    isExpressionGroup(expression: ExpressionItem): boolean;\n    /**\n     * @hidden @internal\n     */\n    onChipRemove(expressionItem: ExpressionItem): void;\n    /**\n     * @hidden @internal\n     */\n    onChipClick(expressionItem: ExpressionOperandItem): void;\n    /**\n     * @hidden @internal\n     */\n    onChipDblClick(expressionItem: ExpressionOperandItem): void;\n    /**\n     * @hidden @internal\n     */\n    enterExpressionEdit(expressionItem: ExpressionOperandItem): void;\n    /**\n     * @hidden @internal\n     */\n    clearSelection(): void;\n    /**\n     * @hidden @internal\n     */\n    enterExpressionAdd(expressionItem: ExpressionOperandItem): void;\n    /**\n     * @hidden @internal\n     */\n    contextMenuClosed(): void;\n    /**\n     * @hidden @internal\n     */\n    onKeyDown(eventArgs: KeyboardEvent): void;\n    /**\n     * @hidden @internal\n     */\n    createAndGroup(): void;\n    /**\n     * @hidden @internal\n     */\n    createOrGroup(): void;\n    /**\n     * @hidden @internal\n     */\n    deleteFilters(): void;\n    /**\n     * @hidden @internal\n     */\n    onGroupClick(groupItem: ExpressionGroupItem): void;\n    /**\n     * @hidden @internal\n     */\n    ungroup(): void;\n    /**\n     * @hidden @internal\n     */\n    deleteGroup(): void;\n    /**\n     * @hidden @internal\n     */\n    selectFilteringLogic(event: IButtonGroupEventArgs): void;\n    /**\n     * @hidden @internal\n     */\n    getConditionFriendlyName(name: string): string;\n    /**\n     * @hidden @internal\n     */\n    isDate(value: any): boolean;\n    /**\n     * @hidden @internal\n     */\n    onExpressionsScrolled(): void;\n    /**\n     * @hidden @internal\n     */\n    invokeClick(eventArgs: KeyboardEvent): void;\n    /**\n     * @hidden @internal\n     */\n    onOutletPointerDown(event: any): void;\n    /**\n     * @hidden @internal\n     */\n    getConditionList(): string[];\n    /**\n     * @hidden @internal\n     */\n    initialize(grid: GridType, overlayService: IgxOverlayService, overlayComponentId: string): void;\n    /**\n     * @hidden @internal\n     */\n    getFormatter(field: string): any;\n    /**\n     * @hidden @internal\n     */\n    getFormat(field: string): any;\n    /**\n     * @hidden @internal\n     */\n    getTimezone(field: string): any;\n    /**\n     * @hidden @internal\n     */\n    setAddButtonFocus(): void;\n    /**\n     * @hidden @internal\n     */\n    context(expression: ExpressionItem, afterExpression?: ExpressionItem): {\n        $implicit: ExpressionItem;\n        afterExpression: ExpressionItem;\n    };\n    /**\n     * @hidden @internal\n     */\n    onClearButtonClick(event?: Event): void;\n    /**\n     * @hidden @internal\n     */\n    closeDialog(): void;\n    /**\n     * @hidden @internal\n     */\n    applyChanges(event?: Event): void;\n    /**\n     * @hidden @internal\n     */\n    cancelChanges(): void;\n    /**\n     * @hidden @internal\n     */\n    onApplyButtonClick(event?: Event): void;\n    /**\n     * @hidden @internal\n     */\n    onChipSelectionEnd(): void;\n    private onToggleExpression;\n    private toggleExpression;\n    private addGroup;\n    private createExpressionGroupItem;\n    private createExpressionsTreeFromGroupItem;\n    private toggleContextMenu;\n    private findSingleSelectedGroup;\n    private isInsideGroup;\n    private deleteItem;\n    private createGroup;\n    private toggleGroup;\n    private toggleGroupRecursive;\n    private deselectParentRecursive;\n    private calculateContextMenuTarget;\n    private scrollElementIntoView;\n    private init;\n}\nexport {};\n"]}