{"version":3,"file":"api.service.d.ts","sources":["api.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Subject } from 'rxjs';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxRowDirective } from './row.directive';\nimport { IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxCell, IgxRow } from './selection/selection.service';\nimport { GridType } from './common/grid.interface';\nimport { ColumnType } from './common/column.interface';\nimport { IGridEditEventArgs } from './common/events';\n/**\n * @hidden\n */\nexport declare class GridBaseAPIService<T extends IgxGridBaseDirective & GridType> {\n    grid: T;\n    protected destroyMap: Map<string, Subject<boolean>>;\n    get_column_by_name(name: string): ColumnType;\n    get_summary_data(): any[];\n    /**\n     * @hidden\n     * @internal\n     */\n    getRowData(rowID: any): any;\n    get_row_index_in_data(rowID: any, dataCollection?: any[]): number;\n    get_row_by_key(rowSelector: any): IgxRowDirective<IgxGridBaseDirective & GridType>;\n    get_row_by_index(rowIndex: number): IgxRowDirective<IgxGridBaseDirective & GridType>;\n    get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent;\n    get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;\n    get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;\n    submit_value(event?: Event): true;\n    submit_add_value(event?: Event): boolean;\n    update_add_cell(cell: IgxCell, value: any, event?: Event): IGridEditEventArgs;\n    update_cell(cell: IgxCell, value: any, event?: Event): IGridEditEventArgs;\n    _update_row(row: IgxRow, value?: any): void;\n    update_row(row: IgxRow, value: any, event?: Event): IGridEditEventArgs;\n    sort(expression: ISortingExpression): void;\n    sort_multiple(expressions: ISortingExpression[]): void;\n    clear_sort(fieldName: string): void;\n    clear_groupby(name?: string | Array<string>): void;\n    should_apply_number_style(column: ColumnType): boolean;\n    get_data(): any[];\n    get_all_data(includeTransactions?: boolean): any[];\n    get_filtered_data(): any[];\n    addRowToData(rowData: any, parentRowID?: any): void;\n    deleteRowFromData(rowID: any, index: number): void;\n    deleteRowById(rowId: any): void;\n    get_row_id(rowData: any): any;\n    row_deleted_transaction(rowID: any): boolean;\n    get_row_expansion_state(record: any): boolean;\n    set_row_expansion_state(rowID: any, expanded: boolean, event?: Event): void;\n    get_rec_by_id(rowID: any): any;\n    allow_expansion_state_change(rowID: any, expanded: any): boolean;\n    prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression): void;\n    remove_grouping_expression(fieldName: any): void;\n    filterDataByExpressions(expressionsTree: IFilteringExpressionsTree): any[];\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     *\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid: any, rowID: any, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {\n        [x: string]: any;\n    }): void;\n    protected update_row_in_array(value: any, rowID: any, index: number): void;\n    protected getSortStrategyPerColumn(fieldName: string): import(\"../data-operations/sorting-strategy\").ISortingStrategy;\n}\n"]}