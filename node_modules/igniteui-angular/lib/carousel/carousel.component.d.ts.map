{"version":3,"file":"carousel.component.d.ts","sources":["carousel.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnDestroy, QueryList, IterableDiffers, AfterContentInit, TemplateRef } from '@angular/core';\nimport { IBaseEventArgs, PlatformUtil } from '../core/utils';\nimport { AnimationBuilder, AnimationReferenceMetadata } from '@angular/animations';\nimport { IgxSlideComponent, Direction } from './slide.component';\nimport { ICarouselResourceStrings } from '../core/i18n/carousel-resources';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nexport declare const CarouselIndicatorsOrientation: {\n    bottom: \"bottom\";\n    top: \"top\";\n};\nexport declare type CarouselIndicatorsOrientation = (typeof CarouselIndicatorsOrientation)[keyof typeof CarouselIndicatorsOrientation];\nexport declare const CarouselAnimationType: {\n    none: \"none\";\n    slide: \"slide\";\n    fade: \"fade\";\n};\nexport declare type CarouselAnimationType = (typeof CarouselAnimationType)[keyof typeof CarouselAnimationType];\nexport interface CarouselAnimationSettings {\n    enterAnimation: AnimationReferenceMetadata;\n    leaveAnimation: AnimationReferenceMetadata;\n}\nexport declare class CarouselHammerConfig extends HammerGestureConfig {\n    overrides: {\n        pan: {\n            direction: 6;\n        };\n    };\n}\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\nexport declare class IgxCarouselComponent implements OnDestroy, AfterContentInit {\n    private element;\n    private iterableDiffers;\n    private builder;\n    private platformUtil;\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     *\n     * @memberof IgxCarouselComponent\n     */\n    id: string;\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     *\n     * @memberof IgxCarouselComponent\n     */\n    role: string;\n    /** @hidden */\n    roleDescription: string;\n    /** @hidden */\n    get labelId(): string;\n    /**\n     * Returns the class of the carousel component.\n     * ```typescript\n     * let class =  this.carousel.cssClass;\n     * ```\n     *\n     * @memberof IgxCarouselComponent\n     */\n    cssClass: string;\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    get touchAction(): \"auto\" | \"pan-y\";\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    loop: boolean;\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    pause: boolean;\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    navigation: boolean;\n    /**\n     * Controls whether the carousel should support keyboard navigation.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [keyboardSupport] = \"false\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    keyboardSupport: boolean;\n    /**\n     * Controls whether the carousel should support gestures.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [gesturesSupport] = \"false\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    gesturesSupport: boolean;\n    /**\n     * Controls the maximum indexes that can be shown.\n     * Default value is `5`.\n     * ```html\n     * <igx-carousel [maximumIndicatorsCount] = \"10\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    maximumIndicatorsCount: number;\n    /**\n     * Gets/sets the display mode of carousel indicators. It can be top or bottom.\n     * Default value is `bottom`.\n     * ```html\n     * <igx-carousel indicatorsOrientation='top'>\n     * <igx-carousel>\n     * ```\n     *\n     * @memberOf IgxSlideComponent\n     */\n    indicatorsOrientation: CarouselIndicatorsOrientation;\n    /**\n     * Gets/sets the animation type of carousel.\n     * Default value is `slide`.\n     * ```html\n     * <igx-carousel animationType='none'>\n     * <igx-carousel>\n     * ```\n     *\n     * @memberOf IgxSlideComponent\n     */\n    animationType: string;\n    /**\n     * The custom template, if any, that should be used when rendering carousel indicators\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.indicatorTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselIndicator let-slide>\n     *         <igx-icon *ngIf=\"slide.active\">brightness_7</igx-icon>\n     *         <igx-icon *ngIf=\"!slide.active\">brightness_5</igx-icon>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    indicatorTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering carousel next button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselNextButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon>add</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    nextButtonTemplate: TemplateRef<any>;\n    /**\n     * The custom template, if any, that should be used when rendering carousel previous button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselPrevButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon>remove</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    prevButtonTemplate: TemplateRef<any>;\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: QueryList<IgxSlideComponent> = this.carousel.slides;\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    slides: QueryList<IgxSlideComponent>;\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    onSlideChanged: EventEmitter<ISlideEventArgs>;\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    onSlideAdded: EventEmitter<ISlideEventArgs>;\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    onSlideRemoved: EventEmitter<ISlideEventArgs>;\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    onCarouselPaused: EventEmitter<IgxCarouselComponent>;\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    onCarouselPlaying: EventEmitter<IgxCarouselComponent>;\n    private defaultIndicator;\n    private defaultNextButton;\n    private defaultPrevButton;\n    /**\n     * @hidden\n     * @internal\n     */\n    stoppedByInteraction: boolean;\n    private _interval;\n    private _resourceStrings;\n    private lastInterval;\n    private playing;\n    private destroyed;\n    private destroy$;\n    private differ;\n    private enterAnimationPlayer?;\n    private leaveAnimationPlayer?;\n    private currentSlide;\n    private previousSlide;\n    private animationDuration;\n    private incomingSlide;\n    private animationPosition;\n    private newDuration;\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    set resourceStrings(value: ICarouselResourceStrings);\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): ICarouselResourceStrings;\n    /** @hidden */\n    get getIndicatorTemplate(): TemplateRef<any>;\n    /** @hidden */\n    get getNextButtonTemplate(): TemplateRef<any>;\n    /** @hidden */\n    get getPrevButtonTemplate(): TemplateRef<any>;\n    /** @hidden */\n    get indicatorsOrientationClass(): string;\n    /** @hidden */\n    get showIndicators(): boolean;\n    /** @hidden */\n    get showIndicatorsLabel(): boolean;\n    /** @hidden */\n    get getCarouselLabel(): string;\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    get total(): number;\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    get current(): number;\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    get isPlaying(): boolean;\n    /**\n     * Returns а boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    get isDestroyed(): boolean;\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     *\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any;\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     *\n     * @memberof IgxCarouselComponent\n     */\n    get interval(): number;\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></igx-carousel>\n     * ```\n     *\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number);\n    constructor(element: ElementRef, iterableDiffers: IterableDiffers, builder: AnimationBuilder, platformUtil: PlatformUtil);\n    /** @hidden */\n    onKeydownArrowRight(event: any): void;\n    /** @hidden */\n    onKeydownArrowLeft(event: any): void;\n    /** @hidden */\n    onTap(event: any): void;\n    /** @hidden */\n    onKeydownHome(event: any): void;\n    /** @hidden */\n    onKeydownEnd(event: any): void;\n    /** @hidden */\n    onMouseEnter(): void;\n    /** @hidden */\n    onMouseLeave(): void;\n    /** @hidden */\n    onPanLeft(event: any): void;\n    /** @hidden */\n    onPanRight(event: any): void;\n    /**\n     * @hidden\n     */\n    onPanEnd(event: any): void;\n    /** @hidden */\n    ngAfterContentInit(): void;\n    /** @hidden */\n    ngOnDestroy(): void;\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    get(index: number): IgxSlideComponent;\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    add(slide: IgxSlideComponent): void;\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    remove(slide: IgxSlideComponent): void;\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    select(slide: IgxSlideComponent, direction?: Direction): void;\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    next(): void;\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    prev(): void;\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    play(): void;\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     *\n     * @memberOf IgxCarouselComponent\n     */\n    stop(): void;\n    private resetInterval;\n    private restartInterval;\n    /** @hidden */\n    get nextButtonDisabled(): boolean;\n    /** @hidden */\n    get prevButtonDisabled(): boolean;\n    private getNextIndex;\n    private getPrevIndex;\n    private resetSlideStyles;\n    private pan;\n    private unsubscriber;\n    private onSlideActivated;\n    private playAnimations;\n    private finishAnimations;\n    private resetAnimations;\n    private animationStarted;\n    private getAnimation;\n    private playEnterAnimation;\n    private playLeaveAnimation;\n    private initSlides;\n    private updateSlidesSelection;\n}\nexport interface ISlideEventArgs extends IBaseEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n/**\n * @hidden\n */\nexport declare class IgxCarouselModule {\n}\n"]}