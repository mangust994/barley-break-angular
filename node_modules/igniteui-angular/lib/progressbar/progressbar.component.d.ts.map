{"version":3,"file":"progressbar.component.d.ts","sources":["progressbar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, Renderer2, AfterViewInit, AfterContentInit } from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective, IgxProgressBarGradientDirective } from './progressbar.common';\nimport { IBaseEventArgs } from '../core/utils';\nimport { IgxDirectionality } from '../services/direction/directionality';\nexport declare const IgxTextAlign: {\n    START: \"start\";\n    CENTER: \"center\";\n    END: \"end\";\n};\nexport declare type IgxTextAlign = (typeof IgxTextAlign)[keyof typeof IgxTextAlign];\nexport declare const IgxProgressType: {\n    ERROR: \"error\";\n    INFO: \"info\";\n    WARNING: \"warning\";\n    SUCCESS: \"success\";\n};\nexport declare type IgxProgressType = (typeof IgxProgressType)[keyof typeof IgxProgressType];\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n/**\n * @hidden\n */\nexport declare abstract class BaseProgressDirective {\n    /**\n     * An event, which is triggered after a progress is changed.\n     * ```typescript\n     * public progressChange(event) {\n     *     alert(\"Progress made!\");\n     * }\n     *  //...\n     * ```\n     * ```html\n     * <igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     * <igx-linear-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-linear-bar>\n     * ```\n     */\n    onProgressChanged: EventEmitter<IChangeProgressEventArgs>;\n    protected _initValue: number;\n    protected _contentInit: boolean;\n    protected _valueInPercent: number;\n    protected _max: number;\n    protected _value: number;\n    protected _newVal: number;\n    protected _animate: boolean;\n    protected _step: any;\n    private requestAnimationId;\n    /**\n     * Returns the value which update the progress indicator of the `progress bar`.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;\n     * public stepValue(event) {\n     *     let step = this.progressBar.step;\n     *     alert(step);\n     * }\n     * ```\n     */\n    get step(): number;\n    /**\n     * Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     * ```html\n     * <igx-linear-bar [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     * <igx-circular-bar [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     * ```\n     */\n    set step(val: number);\n    /**\n     * Animating the progress. By default it is set to true.\n     * ```html\n     * <igx-linear-bar [animate]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * <igx-circular-bar [animate]=\"false\" [max]=\"200\" [value]=\"50\"></igx-circular-bar>\n     * ```\n     */\n    set animate(animate: boolean);\n    /**\n     * Returns whether the `progress bar` has animation true/false.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;\n     * public animationStatus(event) {\n     *     let animationStatus = this.progressBar.animate;\n     *     alert(animationStatus);\n     * }\n     * ```\n     */\n    get animate(): boolean;\n    /**\n     * Set maximum value that can be passed. By default it is set to 100.\n     * ```html\n     * <igx-linear-bar [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     * <igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     * ```\n     */\n    set max(maxNum: number);\n    /**\n     * Returns the the maximum progress value of the `progress bar`.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;\n     * public maxValue(event) {\n     *     let max = this.progressBar.max;\n     *     alert(max);\n     * }\n     * ```\n     */\n    get max(): number;\n    /**\n     * Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *     public setValue(event){\n     *     this.progressBar.valueInPercent = 56;\n     * }\n     * ```\n     */\n    set valueInPercent(value: number);\n    /**\n     * Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     * public valuePercent(event){\n     *     let percentValue = this.progressBar.valueInPercent;\n     *     alert(percentValue);\n     * }\n     * ```\n     */\n    get valueInPercent(): number;\n    protected triggerProgressTransition(oldVal: any, newVal: any): void;\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number): void;\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number): void;\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number): void;\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number): number;\n    /**\n     * @hidden\n     */\n    private isInLimitRange;\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit;\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit;\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress;\n}\nexport declare class IgxLinearProgressBarComponent extends BaseProgressDirective implements AfterContentInit {\n    valueMin: number;\n    cssClass: string;\n    /**\n     * Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     * ```html\n     * <igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    striped: boolean;\n    /**\n     * Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     * ```html\n     * <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    indeterminate: boolean;\n    /**\n     * An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     * <igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    role: string;\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    id: string;\n    /**\n     * Set the position that defines where the text is aligned.\n     * Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     * ```typescript\n     * public positionCenter: IgxTextAlign;\n     * public ngOnInit() {\n     *     this.positionCenter = IgxTextAlign.CENTER;\n     * }\n     *  //...\n     * ```\n     *  ```html\n     * <igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    textAlign: IgxTextAlign;\n    /**\n     * Set the text to be visible. By default it is set to true.\n     * ```html\n     *  <igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     * ```\n     */\n    textVisibility: boolean;\n    /**\n     * Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     * ```html\n     *  <igx-linear-bar type=\"error\" [textTop]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    textTop: boolean;\n    /**\n     * Set a custom text that is displayed according to the defined position.\n     *  ```html\n     * <igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    text: string;\n    /**\n     * Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `error`.\n     * ```html\n     * <igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"error\"></igx-linear-bar>\n     * ```\n     */\n    type: string;\n    constructor();\n    /**\n     * Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent;\n     * public getValue(event) {\n     *     let value = this.progressBar.value;\n     *     alert(value);\n     * }\n     * ```\n     */\n    get value(): number;\n    /**\n     * Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     * ```html\n     * <igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    set value(val: number);\n    /**\n     * @hidden\n     */\n    get error(): boolean;\n    /**\n     * @hidden\n     */\n    get info(): boolean;\n    /**\n     * @hidden\n     */\n    get warning(): boolean;\n    /**\n     * @hidden\n     */\n    get success(): boolean;\n    ngAfterContentInit(): void;\n}\nexport declare class IgxCircularProgressBarComponent extends BaseProgressDirective implements AfterViewInit, AfterContentInit {\n    private renderer;\n    private _directionality;\n    /** @hidden */\n    cssClass: string;\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     * ```\n     */\n    id: string;\n    /**\n     * An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     * ```html\n     * <igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     * ```\n     */\n    indeterminate: boolean;\n    /**\n     * Sets the text visibility. By default it is set to true.\n     * ```html\n     * <igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     * ```\n     */\n    textVisibility: boolean;\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     * ```html\n     * <igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     * ```\n     * ```typescript\n     * let text = this.circularBar.text;\n     * ```\n     */\n    text: string;\n    textTemplate: IgxProcessBarTextTemplateDirective;\n    gradientTemplate: IgxProgressBarGradientDirective;\n    private _svgCircle;\n    /**\n     * @hidden\n     */\n    gradientId: string;\n    /**\n     * @hidden\n     */\n    get context(): any;\n    /**\n     * Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxCircularProgressBarComponent;\n     * public getValue(event) {\n     *     let value = this.progressBar.value;\n     *     alert(value);\n     * }\n     * ```\n     * ```html\n     * <button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     * ```\n     */\n    get value(): number;\n    /**\n     * Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     * ```html\n     * <igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     * ```\n     */\n    set value(val: number);\n    private _circleRadius;\n    private _circumference;\n    private readonly STROKE_OPACITY_DVIDER;\n    private readonly STROKE_OPACITY_ADDITION;\n    constructor(renderer: Renderer2, _directionality: IgxDirectionality);\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    updateProgressSmoothly(val: number, step: number): void;\n    /**\n     * @hidden\n     */\n    get textContent(): string;\n    /**\n     * @hidden\n     */\n    updateProgressDirectly(val: number): void;\n    private getProgress;\n}\nexport declare const valueInRange: (value: number, max: number, min?: number) => number;\nexport declare const toPercent: (value: number, max: number) => number;\n/**\n * @hidden\n */\nexport declare class IgxProgressBarModule {\n}\n"]}