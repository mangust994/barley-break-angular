{"version":3,"file":"toast.component.d.ts","sources":["toast.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, IgxOverlayService } from '../services/public_api';\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport declare const IgxToastPosition: {\n    Bottom: \"bottom\";\n    Middle: \"middle\";\n    Top: \"top\";\n};\nexport declare type IgxToastPosition = (typeof IgxToastPosition)[keyof typeof IgxToastPosition];\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\nexport declare class IgxToastComponent extends IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    private _element;\n    /**\n     * @hidden\n     */\n    cssClass: string;\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    id: string;\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (showing)=\"handleShowing($event)\"></igx-toast>\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    showing: EventEmitter<IgxToastComponent>;\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (shown)=\"handleShown($event)\"></igx-toast>\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    shown: EventEmitter<IgxToastComponent>;\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (hiding)=\"handleHiding($event)\"></igx-toast>\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    hiding: EventEmitter<IgxToastComponent>;\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (hidden)=\"handleHidden($event)\"></igx-toast>\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    hidden: EventEmitter<IgxToastComponent>;\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    role: string;\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    autoHide: boolean;\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    displayTime: number;\n    /**\n     * Gets/Sets the container used for the toast element.\n     *\n     * @remarks\n     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     * @example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-toast [outlet]=\"outlet\"></igx-toast>\n     * //..\n     * ```\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible]=\"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-toast [(isVisible)]=\"model.isVisible\"></igx-toast>\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    get isVisible(): boolean;\n    set isVisible(value: boolean);\n    /**\n     * @hidden\n     */\n    isVisibleChange: EventEmitter<boolean>;\n    /**\n     * @deprecated Place your message in the toast content instead.\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message]=\"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    set message(value: string | OverlaySettings);\n    get message(): string | OverlaySettings;\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position]=\"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    position: IgxToastPosition;\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    get element(): any;\n    /**\n     * @hidden\n     * @internal\n     */\n    toastMessage: string | OverlaySettings;\n    /**\n     * @hidden\n     */\n    private timeoutId;\n    private d$;\n    constructor(_element: ElementRef, cdr: ChangeDetectorRef, navService: IgxNavigationService, overlayService: IgxOverlayService);\n    /**\n     * @deprecated\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     *\n     * ```typescript\n     * this.toast.show();\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    show(message?: string): void;\n    /**\n     * @deprecated\n     * Hides the toast.\n     *\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    hide(): void;\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     *\n     * ```typescript\n     * this.toast.open();\n     * ```\n     */\n    open(message?: string | OverlaySettings): void;\n    /**\n     * Hides the toast.\n     *\n     * ```typescript\n     * this.toast.close();\n     * ```\n     */\n    close(): void;\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     *\n     * @memberof IgxToastComponent\n     */\n    toggle(): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n}\n/**\n * @hidden\n */\nexport declare class IgxToastModule {\n}\n"]}