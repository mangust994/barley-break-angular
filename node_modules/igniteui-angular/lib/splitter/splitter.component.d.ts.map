{"version":3,"file":"splitter.component.d.ts","sources":["splitter.component.d.ts"],"names":[],"mappingssourcesContent":["import { QueryList, AfterContentInit, ElementRef, EventEmitter } from '@angular/core';\nimport { IgxSplitterPaneComponent } from './splitter-pane/splitter-pane.component';\n/**\n * An enumeration that defines the `SplitterComponent` panes orientation.\n */\nexport declare enum SplitterType {\n    Horizontal = 0,\n    Vertical = 1\n}\nexport declare interface ISplitterBarResizeEventArgs {\n    pane: IgxSplitterPaneComponent;\n    sibling: IgxSplitterPaneComponent;\n}\n/**\n * Provides a framework for a simple layout, splitting the view horizontally or vertically\n * into multiple smaller resizable and collapsible areas.\n *\n * @igxModule IgxSplitterModule\n *\n * @igxParent Layouts\n *\n * @igxTheme igx-splitter-theme\n *\n * @igxKeywords splitter panes layout\n *\n * @igxGroup presentation\n *\n * @example\n * ```html\n * <igx-splitter>\n *  <igx-splitter-pane>\n *      ...\n *  </igx-splitter-pane>\n *  <igx-splitter-pane>\n *      ...\n *  </igx-splitter-pane>\n * </igx-splitter>\n * ```\n */\nexport declare class IgxSplitterComponent implements AfterContentInit {\n    document: any;\n    private elementRef;\n    /**\n     * Gets the list of splitter panes.\n     *\n     * @example\n     * ```typescript\n     * const panes = this.splitter.panes;\n     * ```\n     */\n    panes: QueryList<IgxSplitterPaneComponent>;\n    /**\n     * @hidden @internal\n     * Gets/Sets the `overflow` property of the current splitter.\n     */\n    overflow: string;\n    /**\n     * @hidden @internal\n     * Sets/Gets the `display` property of the current splitter.\n     */\n    display: string;\n    /**\n     * Event fired when resizing of panes starts.\n     *\n     * @example\n     * ```html\n     * <igx-splitter (resizeStart)='resizeStart($event)'>\n     *  <igx-splitter-pane>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     */\n    resizeStart: EventEmitter<ISplitterBarResizeEventArgs>;\n    /**\n     * Event fired when resizing of panes is in progress.\n     *\n     * @example\n     * ```html\n     * <igx-splitter (resizing)='resizing($event)'>\n     *  <igx-splitter-pane>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     */\n    resizing: EventEmitter<ISplitterBarResizeEventArgs>;\n    /**\n     * Event fired when resizing of panes ends.\n     *\n     * @example\n     * ```html\n     * <igx-splitter (resizeEnd)='resizeEnd($event)'>\n     *  <igx-splitter-pane>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     */\n    resizeEnd: EventEmitter<ISplitterBarResizeEventArgs>;\n    private _type;\n    /**\n     * @hidden @internal\n     * A field that holds the initial size of the main `IgxSplitterPaneComponent` in each pair of panes divided by a splitter bar.\n     */\n    private initialPaneSize;\n    /**\n     * @hidden @internal\n     * A field that holds the initial size of the sibling pane in each pair of panes divided by a gripper.\n     * @memberof SplitterComponent\n     */\n    private initialSiblingSize;\n    /**\n     * @hidden @internal\n     * The main pane in each pair of panes divided by a gripper.\n     */\n    private pane;\n    /**\n     * The sibling pane in each pair of panes divided by a splitter bar.\n     */\n    private sibling;\n    constructor(document: any, elementRef: ElementRef);\n    /**\n     * Gets/Sets the splitter orientation.\n     *\n     * @example\n     * ```html\n     * <igx-splitter [type]=\"type\">...</igx-splitter>\n     * ```\n     */\n    get type(): SplitterType;\n    set type(value: SplitterType);\n    /**\n     * @hidden @internal\n     * Gets the `flex-direction` property of the current `SplitterComponent`.\n     */\n    get direction(): string;\n    /** @hidden @internal */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden @internal\n     * This method performs  initialization logic when the user starts dragging the splitter bar between each pair of panes.\n     * @param pane - the main pane associated with the currently dragged bar.\n     */\n    onMoveStart(pane: IgxSplitterPaneComponent): void;\n    /**\n     * @hidden @internal\n     * This method performs calculations concerning the sizes of each pair of panes when the bar between them is dragged.\n     * @param delta - The difference along the X (or Y) axis between the initial and the current point when dragging the bar.\n     */\n    onMoving(delta: number): void;\n    onMoveEnd(delta: number): void;\n    /** @hidden @internal */\n    getPaneSiblingsByOrder(order: number, barIndex: number): Array<IgxSplitterPaneComponent>;\n    private getTotalSize;\n    /**\n     * @hidden @internal\n     * This method assigns the order of each pane.\n     */\n    private assignFlexOrder;\n}\n"]}