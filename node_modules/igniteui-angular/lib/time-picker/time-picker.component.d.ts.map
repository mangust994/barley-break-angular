{"version":3,"file":"time-picker.component.d.ts","sources":["time-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef, AfterViewInit, Injector, ChangeDetectorRef, AfterViewChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxTimePickerTemplateDirective, IgxTimePickerActionsDirective } from './time-picker.directives';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase } from './time-picker.common';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { IBaseEventArgs, IBaseCancelableBrowserEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nexport declare class TimePickerHammerConfig extends HammerGestureConfig {\n    overrides: {\n        pan: {\n            direction: 24;\n            threshold: number;\n        };\n    };\n}\nexport interface IgxTimePickerValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\nexport declare class IgxTimePickerComponent implements IgxTimePickerBase, ControlValueAccessor, EditorProvider, OnInit, OnDestroy, AfterViewInit, AfterViewChecked {\n    private _injector;\n    private _cdr;\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    id: string;\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     * ```html\n     * public min: string = \"09:00\";\n     *  //..\n     * <igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     * ```\n     */\n    minValue: string;\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     * ```html\n     * public max: string = \"18:00\";\n     *  //..\n     * <igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     * ```\n     */\n    maxValue: string;\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     * The seconds, minutes and hour spinning will wrap around by default.\n     * ```html\n     * <igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    isSpinLoop: boolean;\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     * <igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    vertical: boolean;\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     *\n     * @memberof IgxTimePickerComponent\n     */\n    promptChar: string;\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     * ```html\n     * public mode = InteractionMode.DROPDOWN;\n     *  //..\n     * <igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     * ```\n     *\n     * @memberof IgxTimePickerComponent\n     */\n    mode: InteractionMode;\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     * ```typescript\n     *  @ViewChild(\"toast\")\n     * private toast: IgxToastComponent;\n     * public onValueChanged(timepicker){\n     *     this.toast.open()\n     * }\n     *  //...\n     *  ```\n     *  ```html\n     * <igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     * <igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     * ```\n     */\n    onValueChanged: EventEmitter<IgxTimePickerValueChangedEventArgs>;\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     * public min: string = \"09:00\";\n     * public max: string = \"18:00\";\n     *  @ViewChild(\"toast\")\n     * private toast: IgxToastComponent;\n     * public onValidationFailed(timepicker){\n     *     this.toast.open();\n     * }\n     *  //...\n     *  ```\n     *  ```html\n     * <igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     * <igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    onValidationFailed: EventEmitter<IgxTimePickerValidationFailedEventArgs>;\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    onOpened: EventEmitter<IgxTimePickerComponent>;\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    onClosed: EventEmitter<IgxTimePickerComponent>;\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    onClosing: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * @hidden\n     */\n    hourList: ElementRef;\n    /**\n     * @hidden\n     */\n    minuteList: ElementRef;\n    /**\n     * @hidden\n     */\n    secondsList: ElementRef;\n    /**\n     * @hidden\n     */\n    ampmList: ElementRef;\n    /**\n     * @hidden\n     */\n    timePickerActionsDirective: IgxTimePickerActionsDirective;\n    /**\n     * @hidden @internal\n     */\n    labelDirective: IgxLabelDirective;\n    /**\n     * @hidden\n     */\n    toggleRef: IgxToggleDirective;\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n    private dropdownInputTemplate;\n    private _inputElementRef;\n    private _inputDirective;\n    private _inputDirectiveUserTemplate;\n    private _inputGroup;\n    /**\n     * @hidden @internal\n     */\n    timeParts: any;\n    /**\n     * @hidden\n     */\n    _hourItems: any[];\n    /**\n     * @hidden\n     */\n    _minuteItems: any[];\n    /**\n     * @hidden\n     */\n    _secondsItems: any[];\n    /**\n     * @hidden\n     */\n    _ampmItems: any[];\n    /**\n     * @hidden\n     */\n    cleared: boolean;\n    /**\n     * @hidden\n     */\n    isNotEmpty: boolean;\n    /**\n     * @hidden\n     */\n    displayFormat: TimeDisplayFormatPipe;\n    /**\n     * @hidden\n     */\n    inputFormat: TimeInputFormatPipe;\n    /**\n     * @hidden\n     */\n    selectedHour: string;\n    /**\n     * @hidden\n     */\n    selectedMinute: string;\n    /**\n     * @hidden\n     */\n    selectedSeconds: string;\n    /**\n     * @hidden\n     */\n    selectedAmPm: string;\n    /**\n     * @hidden\n     */\n    get mask(): string;\n    set mask(val: string);\n    /**\n     * @hidden\n     */\n    get displayValue(): string;\n    set displayValue(value: string);\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     * ```typescript\n     * @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     * }\n     * ```\n     */\n    get displayTime(): string;\n    /**\n     * @hidden\n     */\n    get hourView(): string[];\n    /**\n     * @hidden\n     */\n    get minuteView(): string[];\n    /**\n     * @hidden\n     */\n    get secondsView(): string[];\n    /**\n     * @hidden\n     */\n    get ampmView(): string[];\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean;\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean;\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean;\n    /**\n     * @hidden\n     */\n    get showSecondsList(): boolean;\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean;\n    /**\n     * @hidden\n     */\n    get validSecondsEntries(): any[];\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[];\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[];\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     *\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any>;\n    /**\n     * Gets the context passed to the input group template.\n     *\n     * @memberof IgxTimePickerComponent\n     */\n    get context(): {\n        value: Date;\n        displayTime: string;\n        displayValue: string;\n        openDialog: (target?: HTMLElement) => void;\n    };\n    private get required();\n    /** @hidden @internal */\n    private _value;\n    private _overlaySettings;\n    private _resourceStrings;\n    private _okButtonLabel;\n    private _cancelButtonLabel;\n    private _format;\n    private _mask;\n    private _displayValue;\n    private _itemsDelta;\n    private _isHourListLoop;\n    private _isMinuteListLoop;\n    private _isSecondsListLoop;\n    private _hourView;\n    private _minuteView;\n    private _secondsView;\n    private _ampmView;\n    private _dateFromModel;\n    private _destroy$;\n    private _statusChanges$;\n    private _dropDownOverlaySettings;\n    private _dialogOverlaySettings;\n    private _prevSelectedHour;\n    private _prevSelectedMinute;\n    private _prevSelectedSeconds;\n    private _prevSelectedAmPm;\n    private _onOpen;\n    private _onClose;\n    private _hoursPos;\n    private _minutesPos;\n    private _secondsPos;\n    private _amPmPos;\n    private _ngControl;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     * public date: Date = new Date(Date.now());\n     *  //...\n     * <igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    set value(value: Date);\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     * @ViewChild(\"MyPick\")\n     * public pick: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date;\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    set resourceStrings(value: ITimePickerResourceStrings);\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): ITimePickerResourceStrings;\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    set okButtonLabel(value: string);\n    /**\n     * An accessor that returns the label of ok button.\n     */\n    get okButtonLabel(): string;\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    set cancelButtonLabel(value: string);\n    /**\n     * An accessor that returns the label of cancel button.\n     */\n    get cancelButtonLabel(): string;\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes: 1, seconds: 1}`\n     * ```html\n     * <igx-time-picker [itemsDelta]=\"{hours:3, minutes:5, seconds:10}\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    set itemsDelta(value: {\n        hours: number;\n        minutes: number;\n        seconds: number;\n    });\n    get itemsDelta(): {\n        hours: number;\n        minutes: number;\n        seconds: number;\n    };\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `s` : seconds field without leading zero <br>\n     * `ss` : seconds field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     * <igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    get format(): string;\n    set format(formatValue: string);\n    /**\n     * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: true,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n     * ```\n     *\n     * @memberof IgxTimePickerComponent\n     */\n    set overlaySettings(value: OverlaySettings);\n    get overlaySettings(): OverlaySettings;\n    constructor(_injector: Injector, _cdr: ChangeDetectorRef);\n    /**\n     * @hidden\n     */\n    onKeydownSpace(event: any): void;\n    /**\n     * @hidden\n     */\n    onAltArrowDown(): void;\n    /** @hidden @internal */\n    writeValue(value: Date): void;\n    /** @hidden @internal */\n    applyDisabledStyleForItem(period: string, value: string): boolean;\n    /** @hidden @internal */\n    registerOnChange(fn: (_: Date) => void): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: () => void): void;\n    /** @hidden @internal */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /** @hidden @internal */\n    convertMinMaxValue(value: string): Date;\n    /**\n     * @hidden\n     */\n    getEditElement(): any;\n    /**\n     * @hidden\n     */\n    getInputGroupElement(): HTMLElement;\n    /**\n     * opens the dialog.\n     *\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    openDialog(target?: HTMLElement): void;\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     * scrhintoView(picker) {\n     * picker.scrollHourIntoView('2');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrhintoView(picker)\"></igx-time-picker>\n     * ```\n     *\n     * @param item to be scrolled in view.\n     */\n    scrollHourIntoView(item: string): void;\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     * scrMintoView(picker) {\n     * picker.scrollMinuteIntoView('3');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrMintoView(picker)\"></igx-time-picker>\n     * ```\n     *\n     * @param item to be scrolled in view.\n     */\n    scrollMinuteIntoView(item: string): void;\n    /**\n     * Scrolls a seconds item into view.\n     * ```typescript\n     * scrMintoView(picker) {\n     * picker.scrollSecondsIntoView('4');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrMintoView(picker)\"></igx-time-picker>\n     * ```\n     *\n     * @param item to be scrolled in view.\n     */\n    scrollSecondsIntoView(item: string): void;\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     * scrAmPmIntoView(picker) {\n     * picker.scrollAmPmIntoView('PM');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     * ```\n     *\n     * @param item to be scrolled in view.\n     */\n    scrollAmPmIntoView(item: string): void;\n    /**\n     * @hidden\n     */\n    nextHour(): void;\n    /**\n     * @hidden\n     */\n    prevHour(): void;\n    /**\n     * @hidden\n     */\n    nextMinute(): void;\n    /**\n     * @hidden\n     */\n    prevMinute(): void;\n    /**\n     * @hidden\n     */\n    nextSeconds(): void;\n    /**\n     * @hidden\n     */\n    prevSeconds(): void;\n    /**\n     * @hidden\n     */\n    nextAmPm(): void;\n    /**\n     * @hidden\n     */\n    prevAmPm(): void;\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    okButtonClick(): boolean;\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    cancelButtonClick(): void;\n    /**\n     * Returns an array of the hours currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let hInView = this.picker.hoursInView;\n     * }\n     * ```\n     */\n    hoursInView(): string[];\n    /**\n     * Returns an array of the minutes currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let minInView = this.picker.minutesInView;\n     * }\n     * ```\n     */\n    minutesInView(): string[];\n    /**\n     * Returns an array of the seconds currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let minInView = this.picker.secondsInView;\n     * }\n     * ```\n     */\n    secondsInView(): string[];\n    /**\n     * Returns an array of the AM/PM currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let ApInView = this.picker.ampmInView;\n     * }\n     * ```\n     */\n    ampmInView(): string[];\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     * <igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    close(): void;\n    /**\n     * @hidden\n     */\n    parseMask(preserveAmPm?: boolean): string;\n    /**\n     * @hidden\n     */\n    clear(): void;\n    /**\n     * @hidden\n     */\n    onInput(event: any): void;\n    /**\n     * @hidden\n     */\n    onFocus(event: any): void;\n    /**\n     * @hidden\n     */\n    onBlur(event: any): void;\n    mouseDown(event: MouseEvent): void;\n    /**\n     * @hidden\n     */\n    spinOnEdit(event: any): void;\n    protected onStatusChanged(): void;\n    private trimMask;\n    private determineCursorPos;\n    private clearCursorPos;\n    private _scrollItemIntoView;\n    private _viewToString;\n    private _itemToString;\n    private _prevItem;\n    private _nextItem;\n    private _formatTime;\n    private _updateHourView;\n    private _updateMinuteView;\n    private _updateSecondsView;\n    private _updateAmPmView;\n    private _addEmptyItems;\n    private _generateHours;\n    private _generateMinutes;\n    private _generateSeconds;\n    private _generateAmPm;\n    private _getSelectedTime;\n    private _isValueValid;\n    private _isEntryValid;\n    private _getCursorPosition;\n    private _setCursorPosition;\n    private _updateEditableInput;\n    private _spinHours;\n    private _spinMinutes;\n    private _spinSeconds;\n    private _initializeContainer;\n    private _onDropDownClosed;\n    private cursorOnHours;\n    private cursorOnMinutes;\n    private cursorOnSeconds;\n    private cursorOnAmPm;\n    private _updateValidityOnBlur;\n    private isReset;\n}\n/**\n * @hidden\n */\nexport declare class IgxTimePickerModule {\n}\n"]}