import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { DeprecateMethod, DeprecateProperty } from '../core/deprecateDecorators';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Inject, Input, NgModule, Optional, Output, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { IgxNavigationService } from '../core/navigation';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxOverlayService, HorizontalAlignment, VerticalAlignment, GlobalPositionStrategy, } from '../services/public_api';
import { mkenum } from '../core/utils';
let NEXT_ID = 0;
/**
 * Enumeration for toast position
 * Can be:
 * Bottom
 * Middle
 * Top
 */
export const IgxToastPosition = mkenum({
    Bottom: 'bottom',
    Middle: 'middle',
    Top: 'top'
});
/**
 * **Ignite UI for Angular Toast** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast)
 *
 * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot
 * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.
 *
 * Example:
 * ```html
 * <button (click)="toast.show()">Show notification</button>
 * <igx-toast #toast
 *           message="Notification displayed"
 *           displayTime="1000">
 * </igx-toast>
 * ```
 */
export class IgxToastComponent extends IgxToggleDirective {
    constructor(_element, cdr, navService, overlayService) {
        super(_element, cdr, overlayService, navService);
        this._element = _element;
        /**
         * @hidden
         */
        this.cssClass = 'igx-toast';
        /**
         * Sets/gets the `id` of the toast.
         * If not set, the `id` will have value `"igx-toast-0"`.
         * ```html
         * <igx-toast id = "my-first-toast"></igx-toast>
         * ```
         * ```typescript
         * let toastId = this.toast.id;
         * ```
         */
        this.id = `igx-toast-${NEXT_ID++}`;
        /**
         * Emits an event prior the toast is shown.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (showing)="handleShowing($event)"></igx-toast>
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.showing = new EventEmitter();
        /**
         * Emits an event when the toast is shown.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (shown)="handleShown($event)"></igx-toast>
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.shown = new EventEmitter();
        /**
         * Emits an event prior the toast is hidden.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (hiding)="handleHiding($event)"></igx-toast>
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.hiding = new EventEmitter();
        /**
         *  Emits an event when the toast is hidden.
         *  Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (hidden)="handleHidden($event)"></igx-toast>
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.hidden = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         * If not set, `role` will have value `"alert"`.
         * ```html
         * <igx-toast [role] = "'notify'"></igx-toast>
         * ```
         * ```typescript
         * let toastRole = this.toast.role;
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.role = 'alert';
        /**
         * Sets/gets whether the toast will be hidden after the `displayTime` is over.
         * Default value is `true`.
         * ```html
         * <igx-toast [autoHide] = "false"></igx-toast>
         * ```
         * ```typescript
         * let autoHide = this.toast.autoHide;
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.autoHide = true;
        /**
         * Sets/gets the duration of time span(in milliseconds) which the toast will be visible
         * after it is being shown.
         * Default value is `4000`.
         * ```html
         * <igx-toast [displayTime] = "2500"></igx-toast>
         * ```
         * ```typescript
         * let displayTime = this.toast.displayTime;
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.displayTime = 4000;
        /**
         * @hidden
         */
        this.isVisibleChange = new EventEmitter();
        /**
         * Sets/gets the position of the toast.
         * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.
         * ```html
         * <igx-toast [position]="top"></igx-toast>
         * ```
         * ```typescript
         * let toastPosition = this.toast.position;
         * ```
         *
         * @memberof IgxToastComponent
         */
        this.position = 'bottom';
        /**
         * @hidden
         * @internal
         */
        this.toastMessage = '';
        this.d$ = new Subject();
    }
    /**
     * Enables/Disables the visibility of the toast.
     * If not set, the `isVisible` attribute will have value `false`.
     * ```html
     * <igx-toast [isVisible]="true"></igx-toast>
     * ```
     * ```typescript
     * let isVisible = this.toast.isVisible;
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-toast [(isVisible)]="model.isVisible"></igx-toast>
     * ```
     *
     * @memberof IgxToastComponent
     */
    get isVisible() {
        return !this.collapsed;
    }
    set isVisible(value) {
        if (value !== this.isVisible) {
            if (value) {
                requestAnimationFrame(() => {
                    this.open();
                });
            }
            else {
                this.close();
            }
        }
    }
    /**
     * @deprecated Place your message in the toast content instead.
     * Sets/gets the message that will be shown by the toast.
     * ```html
     * <igx-toast [message]="Notification"></igx-toast>
     * ```
     * ```typescript
     * let toastMessage = this.toast.message;
     * ```
     * @memberof IgxToastComponent
     */
    set message(value) {
        this.toastMessage = value;
    }
    get message() {
        return this.toastMessage;
    }
    /**
     * Gets the nativeElement of the toast.
     * ```typescript
     * let nativeElement = this.toast.element;
     * ```
     *
     * @memberof IgxToastComponent
     */
    get element() {
        return this._element.nativeElement;
    }
    /**
     * @deprecated
     * Shows the toast.
     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.
     *
     * ```typescript
     * this.toast.show();
     * ```
     *
     * @memberof IgxToastComponent
     */
    show(message) {
        this.open(message);
    }
    /**
     * @deprecated
     * Hides the toast.
     *
     * ```typescript
     * this.toast.hide();
     * ```
     *
     * @memberof IgxToastComponent
     */
    hide() {
        this.close();
    }
    /**
     * Shows the toast.
     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.
     *
     * ```typescript
     * this.toast.open();
     * ```
     */
    open(message) {
        clearInterval(this.timeoutId);
        const overlaySettings = {
            positionStrategy: new GlobalPositionStrategy({
                horizontalDirection: HorizontalAlignment.Center,
                verticalDirection: this.position === 'bottom'
                    ? VerticalAlignment.Bottom
                    : this.position === 'middle'
                        ? VerticalAlignment.Middle
                        : VerticalAlignment.Top,
            }),
            closeOnEscape: false,
            closeOnOutsideClick: false,
            modal: false,
            outlet: this.outlet,
        };
        if (message !== undefined) {
            this.toastMessage = message;
        }
        this.showing.emit(this);
        super.open(overlaySettings);
        if (this.autoHide) {
            this.timeoutId = window.setTimeout(() => {
                this.close();
            }, this.displayTime);
        }
    }
    /**
     * Hides the toast.
     *
     * ```typescript
     * this.toast.close();
     * ```
     */
    close() {
        clearInterval(this.timeoutId);
        this.hiding.emit(this);
        super.close();
    }
    /**
     * Toggles the visible state of the toast.
     * ```typescript
     * this.toast.toggle();
     * ```
     *
     * @memberof IgxToastComponent
     */
    toggle() {
        super.toggle();
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.onOpened.pipe(takeUntil(this.d$)).subscribe(() => {
            this.isVisibleChange.emit(true);
            this.shown.emit(this);
        });
        this.onClosed.pipe(takeUntil(this.d$)).subscribe(() => {
            this.isVisibleChange.emit(false);
            this.hidden.emit(this);
        });
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.d$.next(true);
        this.d$.complete();
    }
}
IgxToastComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-toast',
                template: "<ng-content></ng-content>\n<span>{{ toastMessage }}</span>\n\n"
            },] }
];
IgxToastComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: IgxNavigationService, decorators: [{ type: Optional }] },
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] }
];
IgxToastComponent.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-toast',] }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    showing: [{ type: Output }],
    shown: [{ type: Output }],
    hiding: [{ type: Output }],
    hidden: [{ type: Output }],
    role: [{ type: Input }],
    autoHide: [{ type: Input }],
    displayTime: [{ type: Input }],
    outlet: [{ type: Input }],
    isVisible: [{ type: Input }],
    isVisibleChange: [{ type: Output }],
    message: [{ type: Input }],
    position: [{ type: Input }]
};
__decorate([
    DeprecateProperty(`'showing' property is deprecated. You can use 'onOpening' instead.`)
], IgxToastComponent.prototype, "showing", void 0);
__decorate([
    DeprecateProperty(`'shown' property is deprecated. You can use 'onOpened' instead.`)
], IgxToastComponent.prototype, "shown", void 0);
__decorate([
    DeprecateProperty(`'hiding' property is deprecated. You can use 'onClosing' instead.`)
], IgxToastComponent.prototype, "hiding", void 0);
__decorate([
    DeprecateProperty(`'hidden' property is deprecated. You can use 'onClosed' instead.`)
], IgxToastComponent.prototype, "hidden", void 0);
__decorate([
    DeprecateProperty(`'message' property is deprecated.
        You can use place the message in the toast content or pass it as parameter to the show method instead.`)
], IgxToastComponent.prototype, "message", null);
__decorate([
    DeprecateMethod(`'show' is deprecated. Use 'open' method instead.`)
], IgxToastComponent.prototype, "show", null);
__decorate([
    DeprecateMethod(`'hide' is deprecated. Use 'close' method instead.`)
], IgxToastComponent.prototype, "hide", null);
/**
 * @hidden
 */
export class IgxToastModule {
}
IgxToastModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxToastComponent],
                exports: [IgxToastComponent],
                imports: [CommonModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,