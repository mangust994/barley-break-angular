import { Directive } from '@angular/core';
import { mkenum } from '../core/utils';
/**
 * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbFromTemplateDirective {
}
IgxThumbFromTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbFrom]'
            },] }
];
/**
 * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbToTemplateDirective {
}
IgxThumbToTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbTo]'
            },] }
];
/**
 * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}
 *
 * @context {@link IgxTicksComponent.context}
 */
export class IgxTickLabelTemplateDirective {
}
IgxTickLabelTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderTickLabel]'
            },] }
];
export const IgxSliderType = mkenum({
    /**
     * Slider with single thumb.
     */
    SLIDER: 'slider',
    /**
     *  Range slider with multiple thumbs, that can mark the range.
     */
    RANGE: 'range'
});
export const SliderHandle = mkenum({
    FROM: 'from',
    TO: 'to'
});
/**
 * Slider Tick labels Orientation
 */
export const TickLabelsOrientation = mkenum({
    Horizontal: 'horizontal',
    TopToBottom: 'toptobottom',
    BottomToTop: 'bottomtotop'
});
/**
 * Slider Ticks orientation
 */
export const TicksOrientation = mkenum({
    Top: 'top',
    Bottom: 'bottom',
    Mirror: 'mirror'
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zbGlkZXIvc2xpZGVyLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBa0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZEOzs7Ozs7Ozs7O0dBVUc7QUFJSCxNQUFNLE9BQU8sNkJBQTZCOzs7WUFIekMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7YUFDbkM7O0FBR0Q7Ozs7Ozs7Ozs7R0FVRztBQUlILE1BQU0sT0FBTywyQkFBMkI7OztZQUh2QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjthQUNqQzs7QUFHRDs7OztHQUlHO0FBSUgsTUFBTSxPQUFPLDZCQUE2Qjs7O1lBSHpDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOztBQWFELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDaEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0NBQ2pCLENBQUMsQ0FBQztBQUdILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUM7SUFDL0IsSUFBSSxFQUFFLE1BQU07SUFDWixFQUFFLEVBQUUsSUFBSTtDQUNYLENBQUMsQ0FBQztBQUdIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxDQUFDO0lBQ3hDLFVBQVUsRUFBRSxZQUFZO0lBQ3hCLFdBQVcsRUFBRSxhQUFhO0lBQzFCLFdBQVcsRUFBRSxhQUFhO0NBQzdCLENBQUMsQ0FBQztBQUdIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO0lBQ25DLEdBQUcsRUFBRSxLQUFLO0lBQ1YsTUFBTSxFQUFFLFFBQVE7SUFDaEIsTUFBTSxFQUFFLFFBQVE7Q0FDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncywgbWtlbnVtIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbi8qKlxuICogVGVtcGxhdGUgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHlvdSB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGUgcmVwcmVzZW50aW5nIHRoZSBsb3dlciBsYWJlbCB2YWx1ZSBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBgYGBodG1sXG4gKiA8aWd4LXNsaWRlcj5cbiAqICA8bmctdGVtcGxhdGUgaWd4U2xpZGVyVGh1bWJGcm9tIGxldC12YWx1ZSBsZXQtbGFiZWxzPnt7dmFsdWV9fTwvbmctdGVtcGxhdGU+XG4gKiA8L2lneC1zbGlkZXI+XG4gKiBgYGBcbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50LmNvbnRleHR9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFNsaWRlclRodW1iRnJvbV0nXG59KVxuZXhwb3J0IGNsYXNzIElneFRodW1iRnJvbVRlbXBsYXRlRGlyZWN0aXZlIHt9XG5cbi8qKlxuICogVGVtcGxhdGUgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHlvdSB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGUgcmVwcmVzZW50aW5nIHRoZSB1cHBlciBsYWJlbCB2YWx1ZSBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBgYGBodG1sXG4gKiA8aWd4LXNsaWRlcj5cbiAqICA8bmctdGVtcGxhdGUgaWd4U2xpZGVyVGh1bWJUbyBsZXQtdmFsdWUgbGV0LWxhYmVscz57e3ZhbHVlfX08L25nLXRlbXBsYXRlPlxuICogPC9pZ3gtc2xpZGVyPlxuICogYGBgXG4gKlxuICogQGNvbnRleHQge0BsaW5rIElneFNsaWRlckNvbXBvbmVudC5jb250ZXh0fVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hTbGlkZXJUaHVtYlRvXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGh1bWJUb1RlbXBsYXRlRGlyZWN0aXZlIHt9XG5cbi8qKlxuICogVGVtcGxhdGUgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHlvdSB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGUsIHJlcHJlc2V0aW5nIHByaW1hcnkvc2Vjb25kYXJ5IHRpY2sgbGFiZWxzIG9mIHRoZSB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50fVxuICpcbiAqIEBjb250ZXh0IHtAbGluayBJZ3hUaWNrc0NvbXBvbmVudC5jb250ZXh0fVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hTbGlkZXJUaWNrTGFiZWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hUaWNrTGFiZWxUZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIElSYW5nZVNsaWRlclZhbHVlIHtcbiAgICBsb3dlcjogbnVtYmVyO1xuICAgIHVwcGVyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNsaWRlclZhbHVlQ2hhbmdlRXZlbnRBcmdzIHtcbiAgICBvbGRWYWx1ZTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWU7XG4gICAgdmFsdWU6IG51bWJlciB8IElSYW5nZVNsaWRlclZhbHVlO1xufVxuXG5leHBvcnQgY29uc3QgSWd4U2xpZGVyVHlwZSA9IG1rZW51bSh7XG4gICAgLyoqXG4gICAgICogU2xpZGVyIHdpdGggc2luZ2xlIHRodW1iLlxuICAgICAqL1xuICAgIFNMSURFUjogJ3NsaWRlcicsXG4gICAgLyoqXG4gICAgICogIFJhbmdlIHNsaWRlciB3aXRoIG11bHRpcGxlIHRodW1icywgdGhhdCBjYW4gbWFyayB0aGUgcmFuZ2UuXG4gICAgICovXG4gICAgUkFOR0U6ICdyYW5nZSdcbn0pO1xuZXhwb3J0IHR5cGUgSWd4U2xpZGVyVHlwZSA9ICh0eXBlb2YgSWd4U2xpZGVyVHlwZSlba2V5b2YgdHlwZW9mIElneFNsaWRlclR5cGVdO1xuXG5leHBvcnQgY29uc3QgU2xpZGVySGFuZGxlID0gbWtlbnVtKHtcbiAgICBGUk9NOiAnZnJvbScsXG4gICAgVE86ICd0bydcbn0pO1xuZXhwb3J0IHR5cGUgU2xpZGVySGFuZGxlID0gKHR5cGVvZiBTbGlkZXJIYW5kbGUpW2tleW9mIHR5cGVvZiBTbGlkZXJIYW5kbGVdO1xuXG4vKipcbiAqIFNsaWRlciBUaWNrIGxhYmVscyBPcmllbnRhdGlvblxuICovXG5leHBvcnQgY29uc3QgVGlja0xhYmVsc09yaWVudGF0aW9uID0gbWtlbnVtKHtcbiAgICBIb3Jpem9udGFsOiAnaG9yaXpvbnRhbCcsXG4gICAgVG9wVG9Cb3R0b206ICd0b3B0b2JvdHRvbScsXG4gICAgQm90dG9tVG9Ub3A6ICdib3R0b210b3RvcCdcbn0pO1xuZXhwb3J0IHR5cGUgVGlja0xhYmVsc09yaWVudGF0aW9uID0gKHR5cGVvZiBUaWNrTGFiZWxzT3JpZW50YXRpb24pW2tleW9mIHR5cGVvZiBUaWNrTGFiZWxzT3JpZW50YXRpb25dO1xuXG4vKipcbiAqIFNsaWRlciBUaWNrcyBvcmllbnRhdGlvblxuICovXG5leHBvcnQgY29uc3QgVGlja3NPcmllbnRhdGlvbiA9IG1rZW51bSh7XG4gICAgVG9wOiAndG9wJyxcbiAgICBCb3R0b206ICdib3R0b20nLFxuICAgIE1pcnJvcjogJ21pcnJvcidcbn0pO1xuZXhwb3J0IHR5cGUgVGlja3NPcmllbnRhdGlvbiA9ICh0eXBlb2YgVGlja3NPcmllbnRhdGlvbilba2V5b2YgdHlwZW9mIFRpY2tzT3JpZW50YXRpb25dO1xuIl19