import { Component, HostBinding } from '@angular/core';
import { IgxGridActionsBaseDirective } from './grid-actions-base.directive';
import { pinLeft, unpinLeft, jumpDown, jumpUp } from '@igniteui/material-icons-extended';
export class IgxGridPinningActionsComponent extends IgxGridActionsBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Host `class.igx-action-strip` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-action-strip__pinning-actions';
        this.iconsRendered = false;
    }
    /**
     * Getter to know if the row is pinned
     *
     * @hidden
     * @internal
     */
    get pinned() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        if (context && !this.iconsRendered) {
            this.registerSVGIcons();
            this.iconsRendered = true;
        }
        return context && context.pinned;
    }
    /**
     * Getter to know if the row is in pinned and ghost
     *
     * @hidden
     * @internal
     */
    get inPinnedArea() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        return this.pinned && !context.disabled;
    }
    /**
     * Getter to know if the row pinning is set to top or bottom
     *
     * @hidden
     * @internal
     */
    get pinnedTop() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        return this.strip.context.grid.isRowPinningToTop;
    }
    /**
     * Pin the row according to the context.
     *
     * @example
     * ```typescript
     * this.gridPinningActions.pin();
     * ```
     */
    pin(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const grid = row.grid;
        grid.pinRow(row.rowID);
        this.strip.hide();
    }
    /**
     * Unpin the row according to the context.
     *
     * @example
     * ```typescript
     * this.gridPinningActions.unpin();
     * ```
     */
    unpin(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const grid = row.grid;
        grid.unpinRow(row.rowID);
        this.strip.hide();
    }
    scrollToRow(event) {
        if (event) {
            event.stopPropagation();
        }
        const context = this.strip.context;
        const grid = context.grid;
        grid.scrollTo(context.rowData, 0);
        this.strip.hide();
    }
    registerSVGIcons() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        const grid = context.grid;
        if (grid) {
            this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');
            this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');
            this.iconService.addSvgIconFromText(jumpDown.name, jumpDown.value, 'imx-icons');
            this.iconService.addSvgIconFromText(jumpUp.name, jumpDown.value, 'imx-icons');
        }
    }
}
IgxGridPinningActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-grid-pinning-actions',
                template: "<ng-container *ngIf=\"isRowContext\">\n    <igx-grid-action-button *ngIf=\"inPinnedArea && pinnedTop\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"jump-down\" [labelText]=\"grid.resourceStrings.igx_grid_actions_jumpDown_label\" (actionClick)=\"scrollToRow($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"inPinnedArea && !pinnedTop\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"jump-up\" [labelText]=\"grid.resourceStrings.igx_grid_actions_jumpUp_label\" (actionClick)=\"scrollToRow($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"!pinned\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"pin-left\" [labelText]=\"grid.resourceStrings.igx_grid_actions_pin_label\" (actionClick)=\"pin($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"pinned\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"unpin-left\" [labelText]=\"grid.resourceStrings.igx_grid_actions_unpin_label\" (actionClick)=\"unpin($event)\"></igx-grid-action-button>\n</ng-container>",
                providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridPinningActionsComponent }]
            },] }
];
IgxGridPinningActionsComponent.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-action-strip__pinning-actions',] }]
};
//# sourceMappingURL=data:application/json;base64,