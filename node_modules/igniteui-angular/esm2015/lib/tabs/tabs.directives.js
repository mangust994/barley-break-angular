import { Directive, HostBinding, TemplateRef } from '@angular/core';
import { IgxTabsBase } from './tabs.common';
var TabScrollButtonStyle;
(function (TabScrollButtonStyle) {
    TabScrollButtonStyle["Visible"] = "visible";
    TabScrollButtonStyle["Hidden"] = "hidden";
    TabScrollButtonStyle["NotDisplayed"] = "not_displayed";
})(TabScrollButtonStyle || (TabScrollButtonStyle = {}));
export class IgxRightButtonStyleDirective {
    constructor(tabs) {
        this.tabs = tabs;
    }
    get visibleCSS() {
        return (this.getRightButtonStyle() === TabScrollButtonStyle.Visible) ? true : false;
    }
    get hiddenCSS() {
        return (this.getRightButtonStyle() === TabScrollButtonStyle.Hidden) ? true : false;
    }
    get notDisplayedCSS() {
        return (this.getRightButtonStyle() === TabScrollButtonStyle.NotDisplayed) ? true : false;
    }
    getRightButtonStyle() {
        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        let itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const offset = this.tabs.offset;
        const total = offset + viewPortWidth;
        // Fix for IE 11, a difference is accumulated from the widths calculations.
        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {
            return TabScrollButtonStyle.NotDisplayed;
        }
        if (itemsContainerWidth > total) {
            return TabScrollButtonStyle.Visible;
        }
        else {
            return TabScrollButtonStyle.Hidden;
        }
    }
}
IgxRightButtonStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRightButtonStyle]'
            },] }
];
IgxRightButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsBase }
];
IgxRightButtonStyleDirective.propDecorators = {
    visibleCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button',] }],
    hiddenCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] }],
    notDisplayedCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] }]
};
export class IgxLeftButtonStyleDirective {
    constructor(tabs) {
        this.tabs = tabs;
    }
    get visibleCSS() {
        return (this.getLeftButtonStyle() === TabScrollButtonStyle.Visible) ? true : false;
    }
    get hiddenCSS() {
        return (this.getLeftButtonStyle() === TabScrollButtonStyle.Hidden) ? true : false;
    }
    get notDisplayedCSS() {
        return (this.getLeftButtonStyle() === TabScrollButtonStyle.NotDisplayed) ? true : false;
    }
    getLeftButtonStyle() {
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        let itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const offset = this.tabs.offset;
        if (offset === 0) {
            // Fix for IE 11, a difference is accumulated from the widths calculations.
            if (itemsContainerWidth - headerContainerWidth <= 1) {
                return TabScrollButtonStyle.NotDisplayed;
            }
            return TabScrollButtonStyle.Hidden;
        }
        else {
            return TabScrollButtonStyle.Visible;
        }
    }
}
IgxLeftButtonStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxLeftButtonStyle]'
            },] }
];
IgxLeftButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsBase }
];
IgxLeftButtonStyleDirective.propDecorators = {
    visibleCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button',] }],
    hiddenCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] }],
    notDisplayedCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] }]
};
export class IgxTabItemTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxTabItemTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxTab]'
            },] }
];
IgxTabItemTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
//# sourceMappingURL=data:application/json;base64,