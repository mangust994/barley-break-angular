import { CommonModule } from '@angular/common';
import { Component, EventEmitter, HostBinding, Input, NgModule, Output, Directive, ContentChild } from '@angular/core';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxIconModule } from '../icon/public_api';
/**
 * IgxActionIcon is a container for the action nav icon of the IgxNavbar.
 */
export class IgxNavbarActionDirective {
}
IgxNavbarActionDirective.decorators = [
    { type: Directive, args: [{
                selector: 'igx-navbar-action,[igxNavbarAction]'
            },] }
];
export class IgxNavbarTitleDirective {
}
IgxNavbarTitleDirective.decorators = [
    { type: Directive, args: [{
                selector: 'igx-navbar-title,[igxNavbarTitle]'
            },] }
];
let NEXT_ID = 0;
/**
 * **Ignite UI for Angular Navbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)
 *
 * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation
 * state such as a "Go Back" button. It also supports other actions represented by icons.
 *
 * Example:
 * ```html
 * <igx-navbar title="Sample App" actionButtonIcon="menu">
 *   <igx-icon>search</igx-icon>
 *   <igx-icon>favorite</igx-icon>
 *   <igx-icon>more_vert</igx-icon>
 * </igx-navbar>
 * ```
 */
export class IgxNavbarComponent {
    constructor() {
        /**
         * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-navbar [id]="'igx-navbar-12'" title="Sample App" actionButtonIcon="menu">
         * ```
         */
        this.id = `igx-navbar-${NEXT_ID++}`;
        /**
         * The event that will be thrown when the action is executed,
         * provides reference to the `IgxNavbar` component as argument
         * ```typescript
         * public actionExc(event){
         *     alert("Action Execute!");
         * }
         *  //..
         * ```
         * ```html
         * <igx-navbar (action)="actionExc($event)" title="Sample App" actionButtonIcon="menu">
         * ```
         */
        this.action = new EventEmitter();
        /**
         * An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.
         * ```html
         * <igx-navbar [titleId]="'igx-navbar-7'" title="Sample App" actionButtonIcon="menu">
         * ```
         */
        this.titleId = `igx-navbar-title-${NEXT_ID++}`;
        this.isVisible = true;
    }
    /**
     * Sets whether the action button of the `IgxNavbarComponent` is visible.
     * ```html
     * <igx-navbar [title]="currentView" [isActionButtonVisible]="'false'"></igx-navbar>
     * ```
     */
    set isActionButtonVisible(value) {
        this.isVisible = value;
    }
    /**
     * Returns whether the `IgxNavbarComponent` action button is visible, true/false.
     * ```typescript
     *  @ViewChild("MyChild")
     * public navBar: IgxNavbarComponent;
     * ngAfterViewInit(){
     *     let actionButtonVisibile = this.navBar.isActionButtonVisible;
     * }
     * ```
     */
    get isActionButtonVisible() {
        if (this.actionIconTemplate || !this.actionButtonIcon) {
            return false;
        }
        return this.isVisible;
    }
    get isTitleContentVisible() {
        return this.titleContent ? true : false;
    }
    /**
     * @hidden
     */
    _triggerAction() {
        this.action.emit(this);
    }
}
IgxNavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-navbar',
                template: "<nav class=\"igx-navbar\" role=\"navigation\" [attr.aria-labelledby]=\"titleId\">\n    <div class=\"igx-navbar__left\">\n        <igx-icon\n            (click)=\"_triggerAction()\"\n            *ngIf=\"isActionButtonVisible\">\n            {{actionButtonIcon}}\n        </igx-icon>\n        <ng-content select=\"igx-navbar-action, [igxNavbarAction]\"></ng-content>\n        <h1\n            *ngIf=\"!isTitleContentVisible\"\n            class=\"igx-navbar__title\"\n            [attr.id]=\"titleId\">\n            {{ title }}\n        </h1>\n        <ng-content select=\"igx-navbar-title, [igxNavbarTitle]\"></ng-content>\n    </div>\n    <div class=\"igx-navbar__right\">\n        <ng-content></ng-content>\n    </div>\n</nav>\n",
                styles: [`
        :host {
            display: block;
        }
    `]
            },] }
];
IgxNavbarComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    actionButtonIcon: [{ type: Input }],
    title: [{ type: Input }],
    action: [{ type: Output }],
    titleId: [{ type: Input }],
    actionIconTemplate: [{ type: ContentChild, args: [IgxNavbarActionDirective, { read: IgxNavbarActionDirective },] }],
    titleContent: [{ type: ContentChild, args: [IgxNavbarTitleDirective, { read: IgxNavbarTitleDirective },] }],
    isActionButtonVisible: [{ type: Input }]
};
/**
 * @hidden
 */
export class IgxNavbarModule {
}
IgxNavbarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxNavbarComponent, IgxNavbarActionDirective, IgxNavbarTitleDirective],
                exports: [IgxNavbarComponent, IgxNavbarActionDirective, IgxNavbarTitleDirective],
                imports: [IgxButtonModule, IgxIconModule, CommonModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,