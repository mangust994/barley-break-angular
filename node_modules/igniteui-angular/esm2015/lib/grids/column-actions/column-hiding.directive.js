import { Directive, Inject } from '@angular/core';
import { IgxColumnActionsBaseDirective } from './column-actions-base.directive';
import { IgxColumnActionsComponent } from './column-actions.component';
export class IgxColumnHidingDirective extends IgxColumnActionsBaseDirective {
    constructor(columnActions) {
        super();
        this.columnActions = columnActions;
        /**
         * @hidden @internal
         */
        this.actionEnabledColumnsFilter = c => !c.disableHiding;
        columnActions.actionsDirective = this;
    }
    /**
     * @hidden @internal
     */
    get checkAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_hiding_check_all_label) !== null && _b !== void 0 ? _b : 'Show All';
    }
    /**
     * @hidden @internal
     */
    get uncheckAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_hiding_uncheck_all_label) !== null && _b !== void 0 ? _b : 'Hide All';
    }
    /**
     * @hidden @internal
     */
    checkAll() {
        this.columnActions.filteredColumns.forEach(c => c.toggleVisibility(false));
    }
    /**
     * @hidden @internal
     */
    uncheckAll() {
        this.columnActions.filteredColumns.forEach(c => c.toggleVisibility(true));
    }
    /**
     * @hidden @internal
     */
    columnChecked(column) {
        return !column.hidden;
    }
    /**
     * @hidden @internal
     */
    toggleColumn(column) {
        column.toggleVisibility();
    }
    get allChecked() {
        return this.columnActions.filteredColumns.every(col => !this.columnChecked(col));
    }
    get allUnchecked() {
        return this.columnActions.filteredColumns.every(col => this.columnChecked(col));
    }
}
IgxColumnHidingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxColumnHiding]'
            },] }
];
IgxColumnHidingDirective.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWhpZGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29sdW1uLWFjdGlvbnMvY29sdW1uLWhpZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFaEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFLdkUsTUFBTSxPQUFPLHdCQUF5QixTQUFRLDZCQUE2QjtJQUV2RSxZQUNpRCxhQUF3QztRQUVyRixLQUFLLEVBQUUsQ0FBQztRQUZxQyxrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7UUFrQ3pGOztXQUVHO1FBQ0ksK0JBQTBCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFsQ3RELGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxhQUFhOztRQUNwQixtQkFBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksMENBQUUsZUFBZSxDQUFDLCtCQUErQixtQ0FBSSxVQUFVLENBQUM7SUFDbEcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxlQUFlOztRQUN0QixtQkFBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksMENBQUUsZUFBZSxDQUFDLGlDQUFpQyxtQ0FBSSxVQUFVLENBQUM7SUFDcEcsQ0FBQztJQUNEOztPQUVHO0lBQ0ksUUFBUTtRQUNYLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRS9FLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVU7UUFDYixJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBT0Q7O09BRUc7SUFDSSxhQUFhLENBQUMsTUFBMEI7UUFDM0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksWUFBWSxDQUFDLE1BQTBCO1FBQzFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7OztZQWpFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjthQUNoQzs7O1lBSlEseUJBQXlCLHVCQVF6QixNQUFNLFNBQUMseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkFjdGlvbnNCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tYWN0aW9ucy1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vY29sdW1uLWFjdGlvbnMuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q29sdW1uSGlkaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q29sdW1uSGlkaW5nRGlyZWN0aXZlIGV4dGVuZHMgSWd4Q29sdW1uQWN0aW9uc0Jhc2VEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCkgcHJvdGVjdGVkIGNvbHVtbkFjdGlvbnM6IElneENvbHVtbkFjdGlvbnNDb21wb25lbnRcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29sdW1uQWN0aW9ucy5hY3Rpb25zRGlyZWN0aXZlID0gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY2hlY2tBbGxMYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5BY3Rpb25zLmdyaWQ/LnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9oaWRpbmdfY2hlY2tfYWxsX2xhYmVsID8/ICdTaG93IEFsbCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHVuY2hlY2tBbGxMYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5BY3Rpb25zLmdyaWQ/LnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9oaWRpbmdfdW5jaGVja19hbGxfbGFiZWwgPz8gJ0hpZGUgQWxsJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgY2hlY2tBbGwoKSB7XG4gICAgICAgIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJlZENvbHVtbnMuZm9yRWFjaChjID0+IGMudG9nZ2xlVmlzaWJpbGl0eShmYWxzZSkpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdW5jaGVja0FsbCgpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5BY3Rpb25zLmZpbHRlcmVkQ29sdW1ucy5mb3JFYWNoKGMgPT4gYy50b2dnbGVWaXNpYmlsaXR5KHRydWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBhY3Rpb25FbmFibGVkQ29sdW1uc0ZpbHRlciA9IGMgPT4gIWMuZGlzYWJsZUhpZGluZztcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGNvbHVtbkNoZWNrZWQoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICFjb2x1bW4uaGlkZGVuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIHRvZ2dsZUNvbHVtbihjb2x1bW46IElneENvbHVtbkNvbXBvbmVudCkge1xuICAgICAgICBjb2x1bW4udG9nZ2xlVmlzaWJpbGl0eSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYWxsQ2hlY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJlZENvbHVtbnMuZXZlcnkoY29sID0+ICF0aGlzLmNvbHVtbkNoZWNrZWQoY29sKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhbGxVbmNoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyZWRDb2x1bW5zLmV2ZXJ5KGNvbCA9PiB0aGlzLmNvbHVtbkNoZWNrZWQoY29sKSk7XG4gICAgfVxufVxuIl19