import { Component, HostBinding } from '@angular/core';
import { IgxColumnGroupComponent } from '../../columns/column-group.component';
import { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';
/**
 * A component used for presenting Excel style column moving UI.
 */
export class IgxExcelStyleMovingComponent {
    constructor(esf) {
        this.esf = esf;
        /**
         * @hidden @internal
         */
        this.defaultClass = true;
    }
    get visibleColumns() {
        return this.esf.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));
    }
    /**
     * @hidden @internal
     */
    get canNotMoveLeft() {
        return this.esf.column.visibleIndex === 0 ||
            (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === 0 && this.esf.column.disablePinning) ||
            (this.esf.column.level !== 0 && !this.findColumn(0, this.visibleColumns));
    }
    /**
     * @hidden @internal
     */
    get canNotMoveRight() {
        return this.esf.column.visibleIndex === this.visibleColumns.length - 1 ||
            (this.esf.column.level !== 0 && !this.findColumn(1, this.visibleColumns));
    }
    /**
     * @hidden @internal
     */
    onMoveButtonClicked(moveDirection) {
        let targetColumn;
        if (this.esf.column.pinned) {
            if (this.esf.column.isLastPinned && moveDirection === 1 && this.esf.grid.isPinningToStart) {
                targetColumn = this.esf.grid.unpinnedColumns[0];
                moveDirection = 0;
            }
            else if (this.esf.column.isFirstPinned && moveDirection === 0 && !this.esf.grid.isPinningToStart) {
                targetColumn = this.esf.grid.unpinnedColumns[this.esf.grid.unpinnedColumns.length - 1];
                moveDirection = 1;
            }
            else {
                targetColumn = this.findColumn(moveDirection, this.esf.grid.pinnedColumns);
            }
        }
        else if (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === 0 && moveDirection === 0 &&
            this.esf.grid.isPinningToStart) {
            targetColumn = this.esf.grid.pinnedColumns[this.esf.grid.pinnedColumns.length - 1];
            if (targetColumn.parent) {
                targetColumn = targetColumn.topLevelParent;
            }
            moveDirection = 1;
        }
        else if (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === this.esf.grid.unpinnedColumns.length - 1 &&
            moveDirection === 1 && !this.esf.grid.isPinningToStart) {
            targetColumn = this.esf.grid.pinnedColumns[0];
            moveDirection = 0;
        }
        else {
            targetColumn = this.findColumn(moveDirection, this.esf.grid.unpinnedColumns);
        }
        this.esf.grid.moveColumn(this.esf.column, targetColumn, moveDirection);
    }
    findColumn(moveDirection, columns) {
        let index = columns.indexOf(this.esf.column);
        if (moveDirection === 0) {
            while (index > 0) {
                index--;
                if (columns[index].level === this.esf.column.level && columns[index].parent === this.esf.column.parent) {
                    return columns[index];
                }
            }
        }
        else {
            while (index < columns.length - 1) {
                index++;
                if (columns[index].level === this.esf.column.level && columns[index].parent === this.esf.column.parent) {
                    return columns[index];
                }
            }
        }
    }
}
IgxExcelStyleMovingComponent.decorators = [
    { type: Component, args: [{
                preserveWhitespaces: false,
                selector: 'igx-excel-style-moving',
                template: "<ng-container *ngIf=\"esf.column\">\n<header>\n    {{ esf.grid.resourceStrings.igx_grid_excel_filter_moving_header }}\n</header>\n<section class=\"igx-excel-filter__move-buttons\">\n    <button [displayDensity]=\"esf.grid.displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveLeft\"\n        (click)=\"onMoveButtonClicked(0)\">\n        <igx-icon>arrow_back</igx-icon>\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_left_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_left }}\n        </span>\n    </button>\n    <button [displayDensity]=\"esf.grid.displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveRight\"\n        (click)=\"onMoveButtonClicked(1)\">\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_right_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_right }}\n        </span>\n        <igx-icon>arrow_forwards</igx-icon>\n    </button>\n</section>\n</ng-container>\n"
            },] }
];
IgxExcelStyleMovingComponent.ctorParameters = () => [
    { type: IgxGridExcelStyleFilteringComponent }
];
IgxExcelStyleMovingComponent.propDecorators = {
    defaultClass: [{ type: HostBinding, args: ['class.igx-excel-filter__move',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtbW92aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9maWx0ZXJpbmcvZXhjZWwtc3R5bGUvZXhjZWwtc3R5bGUtbW92aW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUU3Rjs7R0FFRztBQU1ILE1BQU0sT0FBTyw0QkFBNEI7SUFPckMsWUFBbUIsR0FBd0M7UUFBeEMsUUFBRyxHQUFILEdBQUcsQ0FBcUM7UUFOM0Q7O1dBRUc7UUFFSSxpQkFBWSxHQUFHLElBQUksQ0FBQztJQUVvQyxDQUFDO0lBRWhFLElBQVksY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGNBQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEtBQUssQ0FBQztZQUNyQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1lBQ2hHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxN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WUFwRkosU0FBUyxTQUFDO2dCQUNQLG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLFFBQVEsRUFBRSx3QkFBd0I7Z0JBQ2xDLHduQ0FBa0Q7YUFDckQ7OztZQVRRLG1DQUFtQzs7OzJCQWN2QyxXQUFXLFNBQUMsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IElneENvbHVtbkdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29sdW1ucy9jb2x1bW4tZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRFeGNlbFN0eWxlRmlsdGVyaW5nQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLmV4Y2VsLXN0eWxlLWZpbHRlcmluZy5jb21wb25lbnQnO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHVzZWQgZm9yIHByZXNlbnRpbmcgRXhjZWwgc3R5bGUgY29sdW1uIG1vdmluZyBVSS5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdpZ3gtZXhjZWwtc3R5bGUtbW92aW5nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXhjZWwtc3R5bGUtbW92aW5nLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hFeGNlbFN0eWxlTW92aW5nQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWV4Y2VsLWZpbHRlcl9fbW92ZScpXG4gICAgcHVibGljIGRlZmF1bHRDbGFzcyA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZXNmOiBJZ3hHcmlkRXhjZWxTdHlsZUZpbHRlcmluZ0NvbXBvbmVudCkgeyB9XG5cbiAgICBwcml2YXRlIGdldCB2aXNpYmxlQ29sdW1ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXNmLmdyaWQudmlzaWJsZUNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhKGNvbCBpbnN0YW5jZW9mIElneENvbHVtbkdyb3VwQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGNhbk5vdE1vdmVMZWZ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lc2YuY29sdW1uLnZpc2libGVJbmRleCA9PT0gMCB8fFxuICAgICAgICAgICAgKHRoaXMuZXNmLmdyaWQudW5waW5uZWRDb2x1bW5zLmluZGV4T2YodGhpcy5lc2YuY29sdW1uKSA9PT0gMCAmJiB0aGlzLmVzZi5jb2x1bW4uZGlzYWJsZVBpbm5pbmcpIHx8XG4gICAgICAgICAgICAodGhpcy5lc2YuY29sdW1uLmxldmVsICE9PSAwICYmICF0aGlzLmZpbmRDb2x1bW4oMCwgdGhpcy52aXNpYmxlQ29sdW1ucykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBjYW5Ob3RNb3ZlUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVzZi5jb2x1bW4udmlzaWJsZUluZGV4ID09PSB0aGlzLnZpc2libGVDb2x1bW5zLmxlbmd0aCAtIDEgfHxcbiAgICAgICAgICAgICh0aGlzLmVzZi5jb2x1bW4ubGV2ZWwgIT09IDAgJiYgIXRoaXMuZmluZENvbHVtbigxLCB0aGlzLnZpc2libGVDb2x1bW5zKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgb25Nb3ZlQnV0dG9uQ2xpY2tlZChtb3ZlRGlyZWN0aW9uKSB7XG4gICAgICAgIGxldCB0YXJnZXRDb2x1bW47XG4gICAgICAgIGlmICh0aGlzLmVzZi5jb2x1bW4ucGlubmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lc2YuY29sdW1uLmlzTGFzdFBpbm5lZCAmJiBtb3ZlRGlyZWN0aW9uID09PSAxICYmIHRoaXMuZXNmLmdyaWQuaXNQaW5uaW5nVG9TdGFydCkge1xuICAgICAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZXNmLmdyaWQudW5waW5uZWRDb2x1bW5zWzBdO1xuICAgICAgICAgICAgICAgIG1vdmVEaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVzZi5jb2x1bW4uaXNGaXJzdFBpbm5lZCAmJiBtb3ZlRGlyZWN0aW9uID09PSAwICYmICF0aGlzLmVzZi5ncmlkLmlzUGlubmluZ1RvU3RhcnQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0aGlzLmVzZi5ncmlkLnVucGlubmVkQ29sdW1uc1t0aGlzLmVzZi5ncmlkLnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBtb3ZlRGlyZWN0aW9uID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gdGhpcy5maW5kQ29sdW1uKG1vdmVEaXJlY3Rpb24sIHRoaXMuZXNmLmdyaWQucGlubmVkQ29sdW1ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lc2YuZ3JpZC51bnBpbm5lZENvbHVtbnMuaW5kZXhPZih0aGlzLmVzZi5jb2x1bW4pID09PSAwICYmIG1vdmVEaXJlY3Rpb24gPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lc2YuZ3JpZC5pc1Bpbm5pbmdUb1N0YXJ0KSB7XG4gICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0aGlzLmVzZi5ncmlkLnBpbm5lZENvbHVtbnNbdGhpcy5lc2YuZ3JpZC5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHRhcmdldENvbHVtbi5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0YXJnZXRDb2x1bW4udG9wTGV2ZWxQYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtb3ZlRGlyZWN0aW9uID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVzZi5ncmlkLnVucGlubmVkQ29sdW1ucy5pbmRleE9mKHRoaXMuZXNmLmNvbHVtbikgPT09IHRoaXMuZXNmLmdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgIG1vdmVEaXJlY3Rpb24gPT09IDEgJiYgIXRoaXMuZXNmLmdyaWQuaXNQaW5uaW5nVG9TdGFydCkge1xuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gdGhpcy5lc2YuZ3JpZC5waW5uZWRDb2x1bW5zWzBdO1xuICAgICAgICAgICAgbW92ZURpcmVjdGlvbiA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0aGlzLmZpbmRDb2x1bW4obW92ZURpcmVjdGlvbiwgdGhpcy5lc2YuZ3JpZC51bnBpbm5lZENvbHVtbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXNmLmdyaWQubW92ZUNvbHVtbih0aGlzLmVzZi5jb2x1bW4sIHRhcmdldENvbHVtbiwgbW92ZURpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaW5kQ29sdW1uKG1vdmVEaXJlY3Rpb246IG51bWJlciwgY29sdW1uczogSWd4Q29sdW1uQ29tcG9uZW50W10pIHtcbiAgICAgICAgbGV0IGluZGV4ID0gY29sdW1ucy5pbmRleE9mKHRoaXMuZXNmLmNvbHVtbik7XG4gICAgICAgIGlmIChtb3ZlRGlyZWN0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc1tpbmRleF0ubGV2ZWwgPT09IHRoaXMuZXNmLmNvbHVtbi5sZXZlbCAmJiBjb2x1bW5zW2luZGV4XS5wYXJlbnQgPT09IHRoaXMuZXNmLmNvbHVtbi5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChpbmRleCA8IGNvbHVtbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbnNbaW5kZXhdLmxldmVsID09PSB0aGlzLmVzZi5jb2x1bW4ubGV2ZWwgJiYgY29sdW1uc1tpbmRleF0ucGFyZW50ID09PSB0aGlzLmVzZi5jb2x1bW4ucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW5zW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=