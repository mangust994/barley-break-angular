import { Injectable, Inject, InjectionToken, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
export function DIR_DOCUMENT_FACTORY() {
    return inject(DOCUMENT);
}
/**
 * Injection token is used to inject the document into Directionality
 * which factory could be faked for testing purposes.
 *
 * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule
 * allows override of the default providers, directive, pipes, modules of the test injector
 * which causes errors.
 *
 * @hidden
 */
export const DIR_DOCUMENT = new InjectionToken('dir-doc', {
    providedIn: 'root',
    factory: DIR_DOCUMENT_FACTORY
});
/**
 * @hidden
 *
 * Bidirectional service that extracts the value of the direction attribute on the body or html elements.
 *
 * The dir attribute over the body element takes precedence.
 */
export class IgxDirectionality {
    constructor(document) {
        this._document = document;
        const bodyDir = this._document.body ? this._document.body.dir : null;
        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;
        const extractedDir = bodyDir || htmlDir;
        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';
    }
    get value() {
        return this._dir;
    }
    get document() {
        return this._document;
    }
    get rtl() {
        return this._dir === 'rtl';
    }
}
IgxDirectionality.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxDirectionality_Factory() { return new IgxDirectionality(i0.ɵɵinject(DIR_DOCUMENT)); }, token: IgxDirectionality, providedIn: "root" });
IgxDirectionality.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IgxDirectionality.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DIR_DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uYWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvZGlyZWN0aW9uL2RpcmVjdGlvbmFsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQU8zQzs7R0FFRztBQUNILCtEQUErRDtBQUMvRCxNQUFNLFVBQVUsb0JBQW9CO0lBQ2hDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQVcsU0FBUyxFQUFFO0lBQ2hFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxvQkFBb0I7Q0FDaEMsQ0FBQyxDQUFDO0FBRUg7Ozs7OztHQU1HO0FBSUgsTUFBTSxPQUFPLGlCQUFpQjtJQWdCMUIsWUFBa0MsUUFBUTtRQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzNGLE1BQU0sWUFBWSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFlBQVksS0FBSyxLQUFLLElBQUksWUFBWSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMxRixDQUFDO0lBbEJELElBQVcsS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0lBQy9CLENBQUM7Ozs7WUFqQkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7NENBaUJnQixNQUFNLFNBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHR5cGUgRGlyZWN0aW9uID0gJ2x0cicgfCAncnRsJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItYXJyb3cvcHJlZmVyLWFycm93LWZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIERJUl9ET0NVTUVOVF9GQUNUT1JZKCk6IERvY3VtZW50IHtcbiAgICByZXR1cm4gaW5qZWN0KERPQ1VNRU5UKTtcbn1cblxuLyoqXG4gKiBJbmplY3Rpb24gdG9rZW4gaXMgdXNlZCB0byBpbmplY3QgdGhlIGRvY3VtZW50IGludG8gRGlyZWN0aW9uYWxpdHlcbiAqIHdoaWNoIGZhY3RvcnkgY291bGQgYmUgZmFrZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKlxuICogV2UgY2FuJ3QgcHJvdmlkZSBhbmQgbW9jayB0aGUgRE9DVU1FTlQgdG9rZW4gZnJvbSBwbGF0Zm9ybS1icm93c2VyIGJlY2F1c2UgY29uZmlndXJlVGVzdGluZ01vZHVsZVxuICogYWxsb3dzIG92ZXJyaWRlIG9mIHRoZSBkZWZhdWx0IHByb3ZpZGVycywgZGlyZWN0aXZlLCBwaXBlcywgbW9kdWxlcyBvZiB0aGUgdGVzdCBpbmplY3RvclxuICogd2hpY2ggY2F1c2VzIGVycm9ycy5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjb25zdCBESVJfRE9DVU1FTlQgPSBuZXcgSW5qZWN0aW9uVG9rZW48RG9jdW1lbnQ+KCdkaXItZG9jJywge1xuICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICBmYWN0b3J5OiBESVJfRE9DVU1FTlRfRkFDVE9SWVxufSk7XG5cbi8qKlxuICogQGhpZGRlblxuICpcbiAqIEJpZGlyZWN0aW9uYWwgc2VydmljZSB0aGF0IGV4dHJhY3RzIHRoZSB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uIGF0dHJpYnV0ZSBvbiB0aGUgYm9keSBvciBodG1sIGVsZW1lbnRzLlxuICpcbiAqIFRoZSBkaXIgYXR0cmlidXRlIG92ZXIgdGhlIGJvZHkgZWxlbWVudCB0YWtlcyBwcmVjZWRlbmNlLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIElneERpcmVjdGlvbmFsaXR5IHtcbiAgICBwcml2YXRlIF9kaXI6IERpcmVjdGlvbjtcbiAgICBwcml2YXRlIF9kb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IERpcmVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcnRsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlyID09PSAncnRsJztcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KERJUl9ET0NVTUVOVCkgZG9jdW1lbnQpIHtcbiAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgY29uc3QgYm9keURpciA9IHRoaXMuX2RvY3VtZW50LmJvZHkgPyB0aGlzLl9kb2N1bWVudC5ib2R5LmRpciA6IG51bGw7XG4gICAgICAgIGNvbnN0IGh0bWxEaXIgPSB0aGlzLl9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyB0aGlzLl9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGlyIDogbnVsbDtcbiAgICAgICAgY29uc3QgZXh0cmFjdGVkRGlyID0gYm9keURpciB8fCBodG1sRGlyO1xuICAgICAgICB0aGlzLl9kaXIgPSAoZXh0cmFjdGVkRGlyID09PSAnbHRyJyB8fCBleHRyYWN0ZWREaXIgPT09ICdydGwnKSA/IGV4dHJhY3RlZERpciA6ICdsdHInO1xuICAgIH1cbn1cbiJdfQ==