import { EventEmitter, Injectable } from '@angular/core';
import { isObject, mergeObjects, cloneValue } from '../../core/utils';
export class IgxBaseTransactionService {
    constructor() {
        /**
         * @inheritdoc
         */
        this.onStateUpdate = new EventEmitter();
        this._isPending = false;
        this._pendingTransactions = [];
        this._pendingStates = new Map();
    }
    /**
     * @inheritdoc
     */
    get canRedo() {
        return false;
    }
    /**
     * @inheritdoc
     */
    get canUndo() {
        return false;
    }
    /**
     * @inheritdoc
     */
    get enabled() {
        return this._isPending;
    }
    /**
     * @inheritdoc
     */
    add(transaction, recordRef) {
        if (this._isPending) {
            this.updateState(this._pendingStates, transaction, recordRef);
            this._pendingTransactions.push(transaction);
        }
    }
    /**
     * @inheritdoc
     */
    getTransactionLog(id) {
        return [];
    }
    /**
     * @inheritdoc
     */
    undo() { }
    /**
     * @inheritdoc
     */
    redo() { }
    /**
     * @inheritdoc
     */
    getAggregatedChanges(mergeChanges) {
        const result = [];
        this._pendingStates.forEach((state, key) => {
            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;
            result.push({ id: key, newValue: value, type: state.type });
        });
        return result;
    }
    /**
     * @inheritdoc
     */
    getState(id) {
        return this._pendingStates.get(id);
    }
    /**
     * @inheritdoc
     */
    getAggregatedValue(id, mergeChanges) {
        const state = this._pendingStates.get(id);
        if (!state) {
            return null;
        }
        if (mergeChanges) {
            return this.updateValue(state);
        }
        return state.value;
    }
    /**
     * @inheritdoc
     */
    commit(data, id) { }
    /**
     * @inheritdoc
     */
    clear(id) {
        this._pendingStates.clear();
        this._pendingTransactions = [];
    }
    /**
     * @inheritdoc
     */
    startPending() {
        this._isPending = true;
    }
    /**
     * @inheritdoc
     */
    endPending(commit) {
        this._isPending = false;
        this._pendingStates.clear();
        this._pendingTransactions = [];
    }
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     *
     * @param states States collection to apply the update to
     * @param transaction Transaction to apply to the current state
     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     */
    updateState(states, transaction, recordRef) {
        let state = states.get(transaction.id);
        if (state) {
            if (isObject(state.value)) {
                mergeObjects(state.value, transaction.newValue);
            }
            else {
                state.value = transaction.newValue;
            }
        }
        else {
            state = { value: cloneValue(transaction.newValue), recordRef, type: transaction.type };
            states.set(transaction.id, state);
        }
    }
    /**
     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types
     *
     * @param state State to update value for
     * @returns updated value including all the changes in provided state
     */
    updateValue(state) {
        return this.mergeValues(state.recordRef, state.value);
    }
    /**
     * Merges second values in first value and the result in empty object. If values are primitive type
     * returns second value if exists, or first value.
     *
     * @param first Value to merge into
     * @param second Value to merge
     */
    mergeValues(first, second) {
        if (isObject(first) || isObject(second)) {
            return mergeObjects(cloneValue(first), second);
        }
        else {
            return second ? second : first;
        }
    }
}
IgxBaseTransactionService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,