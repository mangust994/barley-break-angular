import { Component, Input, HostBinding } from '@angular/core';
let NEXT_ID = 0;
/**
 * The `<igx-drop-down-item>` is a container intended for row items in
 * a `<igx-drop-down>` container.
 */
export class IgxDropDownGroupComponent {
    constructor() {
        /**
         * @hidden @internal
         */
        this.role = 'group';
        /** @hidden @internal */
        this.groupClass = true;
        /**
         * Sets/gets if the item group is disabled
         *
         * ```typescript
         * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;
         * // get
         * ...
         * const groupState: boolean = myDropDownGroup.disabled;
         * ...
         * //set
         * ...
         * myDropDownGroup,disabled = false;
         * ...
         * ```
         *
         * ```html
         * <igx-drop-down-item-group [label]="'My Items'" [disabled]="true">
         *     <igx-drop-down-item *ngFor="let item of items[index]" [value]="item.value">
         *         {{ item.text }}
         *     </igx-drop-down-item>
         * </igx-drop-down-item-group>
         * ```
         *
         * **NOTE:** All items inside of a disabled drop down group will be treated as disabled
         */
        this.disabled = false;
        this._id = NEXT_ID++;
    }
    /**
     * @hidden @internal
     */
    get labelId() {
        return `igx-item-group-label-${this._id}`;
    }
    get labelledBy() {
        return this.labelId;
    }
}
IgxDropDownGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-drop-down-item-group',
                template: `
        <label id="{{labelId}}">{{ label }}</label>
        <ng-content select="igx-drop-down-item"></ng-content>
    `
            },] }
];
IgxDropDownGroupComponent.propDecorators = {
    labelledBy: [{ type: HostBinding, args: [`attr.aria-labelledby`,] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    groupClass: [{ type: HostBinding, args: ['class.igx-drop-down__group',] }],
    disabled: [{ type: Input }, { type: HostBinding, args: [`attr.aria-disabled`,] }, { type: HostBinding, args: ['class.igx-drop-down__group--disabled',] }],
    label: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC1kb3duLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kcm9wLWRvd24vZHJvcC1kb3duLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCOzs7R0FHRztBQVFILE1BQU0sT0FBTyx5QkFBeUI7SUFQdEM7UUFvQkk7O1dBRUc7UUFFSSxTQUFJLEdBQUcsT0FBTyxDQUFDO1FBRXRCLHdCQUF3QjtRQUVqQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0F3Qkc7UUFJSSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBMEJoQixRQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQTVFRzs7T0FFRztJQUNILElBQVcsT0FBTztRQUNkLE9BQU8sd0JBQXdCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFDVyxVQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDOzs7WUFsQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLFFBQVEsRUFBRTs7O0tBR1Q7YUFDSjs7O3lCQVNJLFdBQVcsU0FBQyxzQkFBc0I7bUJBUWxDLFdBQVcsU0FBQyxXQUFXO3lCQUl2QixXQUFXLFNBQUMsNEJBQTRCO3VCQTJCeEMsS0FBSyxZQUNMLFdBQVcsU0FBQyxvQkFBb0IsY0FDaEMsV0FBVyxTQUFDLHNDQUFzQztvQkF3QmxELEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5sZXQgTkVYVF9JRCA9IDA7XG4vKipcbiAqIFRoZSBgPGlneC1kcm9wLWRvd24taXRlbT5gIGlzIGEgY29udGFpbmVyIGludGVuZGVkIGZvciByb3cgaXRlbXMgaW5cbiAqIGEgYDxpZ3gtZHJvcC1kb3duPmAgY29udGFpbmVyLlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1kcm9wLWRvd24taXRlbS1ncm91cCcsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGxhYmVsIGlkPVwie3tsYWJlbElkfX1cIj57eyBsYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImlneC1kcm9wLWRvd24taXRlbVwiPjwvbmctY29udGVudD5cbiAgICBgXG59KVxuZXhwb3J0IGNsYXNzIElneERyb3BEb3duR3JvdXBDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBsYWJlbElkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgaWd4LWl0ZW0tZ3JvdXAtbGFiZWwtJHt0aGlzLl9pZH1gO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZyhgYXR0ci5hcmlhLWxhYmVsbGVkYnlgKVxuICAgIHB1YmxpYyBnZXQgbGFiZWxsZWRCeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIHB1YmxpYyByb2xlID0gJ2dyb3VwJztcblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRyb3AtZG93bl9fZ3JvdXAnKVxuICAgIHB1YmxpYyBncm91cENsYXNzID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgaWYgdGhlIGl0ZW0gZ3JvdXAgaXMgZGlzYWJsZWRcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBteURyb3BEb3duR3JvdXA6IElneERyb3BEb3duR3JvdXBDb21wb25lbnQgPSB0aGlzLmRyb3Bkb3duR3JvdXA7XG4gICAgICogLy8gZ2V0XG4gICAgICogLi4uXG4gICAgICogY29uc3QgZ3JvdXBTdGF0ZTogYm9vbGVhbiA9IG15RHJvcERvd25Hcm91cC5kaXNhYmxlZDtcbiAgICAgKiAuLi5cbiAgICAgKiAvL3NldFxuICAgICAqIC4uLlxuICAgICAqIG15RHJvcERvd25Hcm91cCxkaXNhYmxlZCA9IGZhbHNlO1xuICAgICAqIC4uLlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXAgW2xhYmVsXT1cIidNeSBJdGVtcydcIiBbZGlzYWJsZWRdPVwidHJ1ZVwiPlxuICAgICAqICAgICA8aWd4LWRyb3AtZG93bi1pdGVtICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zW2luZGV4XVwiIFt2YWx1ZV09XCJpdGVtLnZhbHVlXCI+XG4gICAgICogICAgICAgICB7eyBpdGVtLnRleHQgfX1cbiAgICAgKiAgICAgPC9pZ3gtZHJvcC1kb3duLWl0ZW0+XG4gICAgICogPC9pZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXA+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAqKk5PVEU6KiogQWxsIGl0ZW1zIGluc2lkZSBvZiBhIGRpc2FibGVkIGRyb3AgZG93biBncm91cCB3aWxsIGJlIHRyZWF0ZWQgYXMgZGlzYWJsZWRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZyhgYXR0ci5hcmlhLWRpc2FibGVkYClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kcm9wLWRvd25fX2dyb3VwLS1kaXNhYmxlZCcpXG4gICAgcHVibGljIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIGxhYmVsIG9mIHRoZSBpdGVtIGdyb3VwXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbXlEcm9wRG93bkdyb3VwOiBJZ3hEcm9wRG93bkdyb3VwQ29tcG9uZW50ID0gdGhpcy5kcm9wZG93bkdyb3VwO1xuICAgICAqIC8vIGdldFxuICAgICAqIC4uLlxuICAgICAqIGNvbnN0IG15TGFiZWw6IHN0cmluZyA9IG15RHJvcERvd25Hcm91cC5sYWJlbDtcbiAgICAgKiAuLi5cbiAgICAgKiAvLyBzZXRcbiAgICAgKiAuLi5cbiAgICAgKiBteURyb3BEb3duR3JvdXAubGFiZWwgPSAnTXkgTmV3IExhYmVsJztcbiAgICAgKiAuLi5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRyb3AtZG93bi1pdGVtLWdyb3VwIFtsYWJlbF09XCInTXkgbmV3IExhYmVsJ1wiPlxuICAgICAqICAgICAgLi4uXG4gICAgICogPC9pZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXA+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbGFiZWw6IHN0cmluZztcblxuICAgIHByaXZhdGUgX2lkID0gTkVYVF9JRCsrO1xufVxuIl19