import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class IgxForOfSyncService {
    constructor() {
        this._master = new Map();
    }
    /**
     * @hidden
     */
    isMaster(directive) {
        return this._master.get(directive.igxForScrollOrientation) === directive;
    }
    /**
     * @hidden
     */
    setMaster(directive, forced = false) {
        const orientation = directive.igxForScrollOrientation;
        if (orientation && (forced || !this._master.has(orientation))) {
            this._master.set(orientation, directive);
        }
    }
    /**
     * @hidden
     */
    resetMaster() {
        this._master.clear();
    }
    /**
     * @hidden
     */
    sizesCache(dir) {
        return this._master.get(dir).sizesCache;
    }
    /**
     * @hidden
     */
    chunkSize(dir) {
        return this._master.get(dir).state.chunkSize;
    }
}
IgxForOfSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxForOfSyncService_Factory() { return new IgxForOfSyncService(); }, token: IgxForOfSyncService, providedIn: "root" });
IgxForOfSyncService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
export class IgxForOfScrollSyncService {
    constructor() {
        this._masterScroll = new Map();
    }
    setScrollMaster(dir, scroll) {
        this._masterScroll.set(dir, scroll);
    }
    getScrollMaster(dir) {
        return this._masterScroll.get(dir);
    }
}
IgxForOfScrollSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxForOfScrollSyncService_Factory() { return new IgxForOfScrollSyncService(); }, token: IgxForOfScrollSyncService, providedIn: "root" });
IgxForOfScrollSyncService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yX29mLnN5bmMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL2Zvci1vZi9mb3Jfb2Yuc3luYy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzNDLE1BQU0sT0FBTyxtQkFBbUI7SUFIaEM7UUFLWSxZQUFPLEdBQTRDLElBQUksR0FBRyxFQUFzQyxDQUFDO0tBdUM1RztJQXJDRzs7T0FFRztJQUNJLFFBQVEsQ0FBQyxTQUFxQztRQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxTQUFTLENBQUMsU0FBcUMsRUFBRSxNQUFNLEdBQUcsS0FBSztRQUNsRSxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsdUJBQXVCLENBQUM7UUFDdEQsSUFBSSxXQUFXLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFO1lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVc7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVUsQ0FBQyxHQUFXO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQzVDLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNqRCxDQUFDOzs7O1lBM0NKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7QUErQ0QsTUFBTSxPQUFPLHlCQUF5QjtJQUh0QztRQUlZLGtCQUFhLEdBQTRDLElBQUksR0FBRyxFQUFlLENBQUM7S0FRM0Y7SUFQVSxlQUFlLENBQUMsR0FBVyxFQUFFLE1BQWtDO1FBQ2xFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sZUFBZSxDQUFDLEdBQVc7UUFDOUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7O1lBWEosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4R3JpZEZvck9mRGlyZWN0aXZlIH0gZnJvbSAnLi9mb3Jfb2YuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmhlbHBlci5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb3JPZlN5bmNTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX21hc3RlcjogTWFwPHN0cmluZywgSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT4+ID0gbmV3IE1hcDxzdHJpbmcsIElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+PigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpc01hc3RlcihkaXJlY3RpdmU6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXN0ZXIuZ2V0KGRpcmVjdGl2ZS5pZ3hGb3JTY3JvbGxPcmllbnRhdGlvbikgPT09IGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHNldE1hc3RlcihkaXJlY3RpdmU6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+LCBmb3JjZWQgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IGRpcmVjdGl2ZS5pZ3hGb3JTY3JvbGxPcmllbnRhdGlvbjtcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uICYmIChmb3JjZWQgfHwgIXRoaXMuX21hc3Rlci5oYXMob3JpZW50YXRpb24pKSkge1xuICAgICAgICAgICAgdGhpcy5fbWFzdGVyLnNldChvcmllbnRhdGlvbiwgZGlyZWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRNYXN0ZXIoKSB7XG4gICAgICAgIHRoaXMuX21hc3Rlci5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2l6ZXNDYWNoZShkaXI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3Rlci5nZXQoZGlyKS5zaXplc0NhY2hlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2h1bmtTaXplKGRpcjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3Rlci5nZXQoZGlyKS5zdGF0ZS5jaHVua1NpemU7XG4gICAgfVxufVxuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb3JPZlNjcm9sbFN5bmNTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9tYXN0ZXJTY3JvbGw6IE1hcDxzdHJpbmcsIFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlPiA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG4gICAgcHVibGljIHNldFNjcm9sbE1hc3RlcihkaXI6IHN0cmluZywgc2Nyb2xsOiBWaXJ0dWFsSGVscGVyQmFzZURpcmVjdGl2ZSkge1xuICAgICAgICB0aGlzLl9tYXN0ZXJTY3JvbGwuc2V0KGRpciwgc2Nyb2xsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2Nyb2xsTWFzdGVyKGRpcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXN0ZXJTY3JvbGwuZ2V0KGRpcik7XG4gICAgfVxufVxuIl19