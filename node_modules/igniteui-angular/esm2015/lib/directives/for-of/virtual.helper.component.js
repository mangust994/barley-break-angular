import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, Inject, NgZone } from '@angular/core';
import { VirtualHelperBaseDirective } from './base.helper.component';
import { DOCUMENT } from '@angular/common';
import { PlatformUtil } from '../../core/utils';
export class VirtualHelperComponent extends VirtualHelperBaseDirective {
    constructor(elementRef, cdr, zone, document, platformUtil) {
        super(elementRef, cdr, zone, document, platformUtil);
        this.cssClasses = 'igx-vhelper--vertical';
    }
    ngOnInit() {
        this.scrollWidth = this.scrollNativeSize;
    }
    restoreScroll() {
        this.nativeElement.scrollTop = this.scrollAmount;
    }
}
VirtualHelperComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-virtual-helper',
                template: '<div #container class="igx-vhelper__placeholder-content" [style.height.px]="size"></div>'
            },] }
];
VirtualHelperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: PlatformUtil }
];
VirtualHelperComponent.propDecorators = {
    scrollTop: [{ type: HostBinding, args: ['scrollTop',] }],
    scrollWidth: [{ type: HostBinding, args: ['style.width.px',] }],
    _vcr: [{ type: ViewChild, args: ['container', { read: ViewContainerRef, static: true },] }],
    itemsLength: [{ type: Input }],
    cssClasses: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC5oZWxwZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvZm9yLW9mL3ZpcnR1YWwuaGVscGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFDMUUsaUJBQWlCLEVBQXFCLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQU1oRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsMEJBQTBCO0lBY2xFLFlBQVksVUFBc0IsRUFBRSxHQUFzQixFQUFFLElBQVksRUFBb0IsUUFBUSxFQUFFLFlBQTBCO1FBQzVILEtBQUssQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFIbEQsZUFBVSxHQUFHLHVCQUF1QixDQUFDO0lBSTVDLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDN0MsQ0FBQztJQUVTLGFBQWE7UUFDbkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUNyRCxDQUFDOzs7WUE1QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLFFBQVEsRUFBRSwwRkFBMEY7YUFDdkc7OztZQVRtQixVQUFVO1lBQ3pCLGlCQUFpQjtZQUE2QixNQUFNOzRDQXVCc0IsTUFBTSxTQUFDLFFBQVE7WUFwQnJGLFlBQVk7Ozt3QkFPaEIsV0FBVyxTQUFDLFdBQVc7MEJBR3ZCLFdBQVcsU0FBQyxnQkFBZ0I7bUJBRzVCLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTswQkFDL0QsS0FBSzt5QkFHTCxXQUFXLFNBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYsXG4gICAgIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCwgSW5qZWN0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmhlbHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LXZpcnR1YWwtaGVscGVyJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgI2NvbnRhaW5lciBjbGFzcz1cImlneC12aGVscGVyX19wbGFjZWhvbGRlci1jb250ZW50XCIgW3N0eWxlLmhlaWdodC5weF09XCJzaXplXCI+PC9kaXY+J1xufSlcbmV4cG9ydCBjbGFzcyBWaXJ0dWFsSGVscGVyQ29tcG9uZW50IGV4dGVuZHMgVmlydHVhbEhlbHBlckJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSAge1xuICAgIEBIb3N0QmluZGluZygnc2Nyb2xsVG9wJylcbiAgICBwdWJsaWMgc2Nyb2xsVG9wO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS53aWR0aC5weCcpXG4gICAgcHVibGljIHNjcm9sbFdpZHRoO1xuXG4gICAgQFZpZXdDaGlsZCgnY29udGFpbmVyJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmLCBzdGF0aWM6IHRydWUgfSkgcHVibGljIF92Y3I7XG4gICAgQElucHV0KCkgcHVibGljIGl0ZW1zTGVuZ3RoOiBudW1iZXI7XG5cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICAgIHB1YmxpYyBjc3NDbGFzc2VzID0gJ2lneC12aGVscGVyLS12ZXJ0aWNhbCc7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCB6b25lOiBOZ1pvbmUsIEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50LCBwbGF0Zm9ybVV0aWw6IFBsYXRmb3JtVXRpbCkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCBjZHIsIHpvbmUsIGRvY3VtZW50LCBwbGF0Zm9ybVV0aWwpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnNjcm9sbFdpZHRoID0gdGhpcy5zY3JvbGxOYXRpdmVTaXplO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZXN0b3JlU2Nyb2xsKCkge1xuICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxBbW91bnQ7XG4gICAgfVxufVxuIl19