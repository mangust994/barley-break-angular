import { Directive, TemplateRef, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
/** @hidden */
export class IgxListBaseDirective extends DisplayDensityBase {
    constructor(_displayDensityOptions) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
    }
}
IgxListBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListBase]'
            },] }
];
IgxListBaseDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
export class IgxEmptyListTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxEmptyListTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxEmptyList]'
            },] }
];
IgxEmptyListTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxDataLoadingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxDataLoadingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDataLoading]'
            },] }
];
IgxDataLoadingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemLeftPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemLeftPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemLeftPanning]'
            },] }
];
IgxListItemLeftPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemRightPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemRightPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemRightPanning]'
            },] }
];
IgxListItemRightPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvbGlzdC9saXN0LmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBMkIsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsa0JBQWtCLEVBQTBCLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNbEcsY0FBYztBQUlkLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxrQkFBa0I7SUFZeEQsWUFBK0Qsc0JBQThDO1FBQ3pHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRDZCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7SUFFN0csQ0FBQzs7O1lBakJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZUFBZTthQUM1Qjs7OzRDQWFnQixRQUFRLFlBQUksTUFBTSxTQUFDLG1CQUFtQjs7QUFLdkQsTUFBTSxDQUFOLElBQVksZUFBcUM7QUFBakQsV0FBWSxlQUFlO0lBQUcscURBQUksQ0FBQTtJQUFFLHFEQUFJLENBQUE7SUFBRSx1REFBSyxDQUFBO0FBQUMsQ0FBQyxFQUFyQyxlQUFlLEtBQWYsZUFBZSxRQUFzQjtBQUtqRCxNQUFNLE9BQU8sNkJBQTZCO0lBQ3RDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzdCOzs7WUFoQ21CLFdBQVc7O0FBd0MvQixNQUFNLE9BQU8sK0JBQStCO0lBQ3hDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2FBQy9COzs7WUF2Q21CLFdBQVc7O0FBK0MvQixNQUFNLE9BQU8sdUNBQXVDO0lBQ2hELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2FBQ3ZDOzs7WUE5Q21CLFdBQVc7O0FBc0QvQixNQUFNLE9BQU8sd0NBQXdDO0lBQ2pELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMkJBQTJCO2FBQ3hDOzs7WUFyRG1CLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlzcGxheURlbnNpdHlCYXNlLCBJRGlzcGxheURlbnNpdHlPcHRpb25zLCBEaXNwbGF5RGVuc2l0eVRva2VuIH0gZnJvbSAnLi4vY29yZS9kZW5zaXR5JztcblxuZXhwb3J0IGludGVyZmFjZSBJTGlzdENoaWxkIHtcbiAgICBpbmRleDogbnVtYmVyO1xufVxuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEJhc2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0QmFzZURpcmVjdGl2ZSBleHRlbmRzIERpc3BsYXlEZW5zaXR5QmFzZSB7XG4gICAgcHVibGljIGl0ZW1DbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwdWJsaWMgYWxsb3dMZWZ0UGFubmluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgYWxsb3dSaWdodFBhbm5pbmc6IGJvb2xlYW47XG4gICAgcHVibGljIHBhbkVuZFRyaWdnZXJpbmdUaHJlc2hvbGQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbGVmdFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHVibGljIHJpZ2h0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwdWJsaWMgcGFuU3RhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHB1YmxpYyBjaGlsZHJlbjogUXVlcnlMaXN0PGFueT47XG4gICAgcHVibGljIGxpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZTogSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlO1xuICAgIHB1YmxpYyBsaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlOiBJZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChEaXNwbGF5RGVuc2l0eVRva2VuKSBwcm90ZWN0ZWQgX2Rpc3BsYXlEZW5zaXR5T3B0aW9uczogSURpc3BsYXlEZW5zaXR5T3B0aW9ucykge1xuICAgICAgICBzdXBlcihfZGlzcGxheURlbnNpdHlPcHRpb25zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBlbnVtIElneExpc3RQYW5TdGF0ZSB7IE5PTkUsIExFRlQsIFJJR0hUIH1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RW1wdHlMaXN0XSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RW1wdHlMaXN0VGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneERhdGFMb2FkaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RGF0YUxvYWRpbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEl0ZW1MZWZ0UGFubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEl0ZW1SaWdodFBhbm5pbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuIl19