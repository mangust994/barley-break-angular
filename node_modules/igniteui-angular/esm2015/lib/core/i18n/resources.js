import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';
import { GridResourceStringsEN } from './grid-resources';
import { TimePickerResourceStringsEN } from './time-picker-resources';
import { PaginatorResourceStringsEN } from './paginator-resources';
import { cloneValue } from '../utils';
import { CarouselResourceStringsEN } from './carousel-resources';
import { ListResourceStringsEN } from './list-resources';
import { CalendarResourceStringsEN } from './calendar-resources';
import { InputResourceStringsEN } from './input-resources';
/**
 * @hidden
 */
export const CurrentResourceStrings = {
    GridResStrings: cloneValue(GridResourceStringsEN),
    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),
    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),
    CalendarResStrings: cloneValue(CalendarResourceStringsEN),
    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),
    CarouselResStrings: cloneValue(CarouselResourceStringsEN),
    ListResStrings: cloneValue(ListResourceStringsEN),
    InputResStrings: cloneValue(InputResourceStringsEN),
};
const updateResourceStrings = (currentStrings, newStrings) => {
    for (const key of Object.keys(newStrings)) {
        if (key in currentStrings) {
            currentStrings[key] = newStrings[key];
        }
    }
};
const ɵ0 = updateResourceStrings;
/**
 * Changes the resource strings for all components in the application
 * ```
 * @param resourceStrings to be applied
 */
export const changei18n = (resourceStrings) => {
    for (const key of Object.keys(CurrentResourceStrings)) {
        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);
    }
};
/**
 * Returns current resource strings for all components
 */
export const getCurrentResourceStrings = () => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, CurrentResourceStrings.CalendarResStrings), CurrentResourceStrings.CarouselResStrings), CurrentResourceStrings.DateRangePickerResStrings), CurrentResourceStrings.GridResStrings), CurrentResourceStrings.InputResStrings), CurrentResourceStrings.ListResStrings), CurrentResourceStrings.PaginatorResStrings), CurrentResourceStrings.TimePickerResStrings));
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NvcmUvaTE4bi9yZXNvdXJjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdDQUFnQyxFQUFtQyxNQUFNLCtCQUErQixDQUFDO0FBQ2xILE9BQU8sRUFBd0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQThCLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEcsT0FBTyxFQUE2QiwwQkFBMEIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUE0Qix5QkFBeUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNGLE9BQU8sRUFBd0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUseUJBQXlCLEVBQTRCLE1BQU0sc0JBQXNCLENBQUM7QUFDM0YsT0FBTyxFQUF5QixzQkFBc0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS2xGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDbEMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQztJQUNqRCxtQkFBbUIsRUFBRSxVQUFVLENBQUMsMEJBQTBCLENBQUM7SUFDM0Qsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLDJCQUEyQixDQUFDO0lBQzdELGtCQUFrQixFQUFFLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztJQUN6RCx5QkFBeUIsRUFBRSxVQUFVLENBQUMsZ0NBQWdDLENBQUM7SUFDdkUsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ3pELGNBQWMsRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUM7SUFDakQsZUFBZSxFQUFFLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQztDQUN0RCxDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLGNBQWdDLEVBQUUsVUFBNEIsRUFBRSxFQUFFO0lBQzdGLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN2QyxJQUFJLEdBQUcsSUFBSSxjQUFjLEVBQUU7WUFDdkIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QztLQUNKO0FBQ0wsQ0FBQyxDQUFDOztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxlQUFpQyxFQUFFLEVBQUU7SUFDNUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEVBQUU7UUFDbkQscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDdkU7QUFDTCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEdBQXFCLEVBQUUsQ0FBQyxxSEFDMUQsc0JBQXNCLENBQUMsa0JBQWtCLEdBQ3pDLHNCQUFzQixDQUFDLGtCQUFrQixHQUN6QyxzQkFBc0IsQ0FBQyx5QkFBeUIsR0FDaEQsc0JBQXNCLENBQUMsY0FBYyxHQUNyQyxzQkFBc0IsQ0FBQyxlQUFlLEdBQ3RDLHNCQUFzQixDQUFDLGNBQWMsR0FDckMsc0JBQXNCLENBQUMsbUJBQW1CLEdBQzFDLHNCQUFzQixDQUFDLG9CQUFvQixFQUNoRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4sIElEYXRlUmFuZ2VQaWNrZXJSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2RhdGUtcmFuZ2UtcGlja2VyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJR3JpZFJlc291cmNlU3RyaW5ncywgR3JpZFJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9ncmlkLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJVGltZVBpY2tlclJlc291cmNlU3RyaW5ncywgVGltZVBpY2tlclJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi90aW1lLXBpY2tlci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSVBhZ2luYXRvclJlc291cmNlU3RyaW5ncywgUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL3BhZ2luYXRvci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgY2xvbmVWYWx1ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IElDYXJvdXNlbFJlc291cmNlU3RyaW5ncywgQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vY2Fyb3VzZWwtcmVzb3VyY2VzJztcbmltcG9ydCB7IElMaXN0UmVzb3VyY2VTdHJpbmdzLCBMaXN0UmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL2xpc3QtcmVzb3VyY2VzJztcbmltcG9ydCB7IENhbGVuZGFyUmVzb3VyY2VTdHJpbmdzRU4sIElDYWxlbmRhclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vY2FsZW5kYXItcmVzb3VyY2VzJztcbmltcG9ydCB7IElJbnB1dFJlc291cmNlU3RyaW5ncywgSW5wdXRSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vaW5wdXQtcmVzb3VyY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBJUmVzb3VyY2VTdHJpbmdzIGV4dGVuZHMgSUdyaWRSZXNvdXJjZVN0cmluZ3MsIElUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzLCBJQ2FsZW5kYXJSZXNvdXJjZVN0cmluZ3MsXG4gICAgSUNhcm91c2VsUmVzb3VyY2VTdHJpbmdzLCBJSW5wdXRSZXNvdXJjZVN0cmluZ3MsIElEYXRlUmFuZ2VQaWNrZXJSZXNvdXJjZVN0cmluZ3MsIElMaXN0UmVzb3VyY2VTdHJpbmdzLCBJUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzIHsgfVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNvbnN0IEN1cnJlbnRSZXNvdXJjZVN0cmluZ3MgPSB7XG4gICAgR3JpZFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoR3JpZFJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBQYWdpbmF0b3JSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKFBhZ2luYXRvclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBUaW1lUGlja2VyUmVzU3RyaW5nczogY2xvbmVWYWx1ZShUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIENhbGVuZGFyUmVzU3RyaW5nczogY2xvbmVWYWx1ZShDYWxlbmRhclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKERhdGVSYW5nZVBpY2tlclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBDYXJvdXNlbFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgTGlzdFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoTGlzdFJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBJbnB1dFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoSW5wdXRSZXNvdXJjZVN0cmluZ3NFTiksXG59O1xuXG5jb25zdCB1cGRhdGVSZXNvdXJjZVN0cmluZ3MgPSAoY3VycmVudFN0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MsIG5ld1N0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhuZXdTdHJpbmdzKSkge1xuICAgICAgICBpZiAoa2V5IGluIGN1cnJlbnRTdHJpbmdzKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RyaW5nc1trZXldID0gbmV3U3RyaW5nc1trZXldO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSByZXNvdXJjZSBzdHJpbmdzIGZvciBhbGwgY29tcG9uZW50cyBpbiB0aGUgYXBwbGljYXRpb25cbiAqIGBgYFxuICogQHBhcmFtIHJlc291cmNlU3RyaW5ncyB0byBiZSBhcHBsaWVkXG4gKi9cbmV4cG9ydCBjb25zdCBjaGFuZ2VpMThuID0gKHJlc291cmNlU3RyaW5nczogSVJlc291cmNlU3RyaW5ncykgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKEN1cnJlbnRSZXNvdXJjZVN0cmluZ3MpKSB7XG4gICAgICAgIHVwZGF0ZVJlc291cmNlU3RyaW5ncyhDdXJyZW50UmVzb3VyY2VTdHJpbmdzW2tleV0sIHJlc291cmNlU3RyaW5ncyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGN1cnJlbnQgcmVzb3VyY2Ugc3RyaW5ncyBmb3IgYWxsIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRSZXNvdXJjZVN0cmluZ3MgPSAoKTogSVJlc291cmNlU3RyaW5ncyA9PiAoe1xuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuQ2FsZW5kYXJSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuQ2Fyb3VzZWxSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuRGF0ZVJhbmdlUGlja2VyUmVzU3RyaW5ncyxcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLkdyaWRSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuSW5wdXRSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuTGlzdFJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5QYWdpbmF0b3JSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuVGltZVBpY2tlclJlc1N0cmluZ3Ncbn0pO1xuIl19