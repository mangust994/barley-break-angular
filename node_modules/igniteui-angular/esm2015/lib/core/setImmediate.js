/* Copyright (c) 2014-2020 Denis Pushkarev
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE
 */
// Note: Originally copied from core-js-pure package and modified. (https://github.com/zloirock/core-js)
const queue = {};
let counter = 0;
let eventListenerAdded = false;
const run = (id) => {
    if (queue.hasOwnProperty(id)) {
        const fn = queue[id];
        delete queue[id];
        fn();
    }
};
const ɵ0 = run;
const listener = (event) => run(event.data);
const ɵ1 = listener;
// Use function instead of arrow function to workaround an issue in codesandbox
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
export function setImmediate(cb, ...args) {
    if (window.setImmediate) {
        return window.setImmediate(cb);
    }
    if (!eventListenerAdded) {
        eventListenerAdded = true;
        window.addEventListener('message', listener, false);
    }
    queue[++counter] = () => {
        cb.apply(undefined, args);
    };
    const windowLocation = window.location;
    window.postMessage(counter + '', windowLocation.protocol + '//' + windowLocation.host);
    return counter;
}
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
export function clearImmediate(id) {
    if (window.clearImmediate) {
        return window.clearImmediate(id);
    }
    delete queue[id];
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0SW1tZWRpYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NvcmUvc2V0SW1tZWRpYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBRUgsd0dBQXdHO0FBRXhHLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDaEIsSUFBSSxrQkFBa0IsR0FBRyxLQUFLLENBQUM7QUFFL0IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNmLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMxQixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakIsRUFBRSxFQUFFLENBQUM7S0FDUjtBQUNMLENBQUMsQ0FBQzs7QUFFRixNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFNUMsK0VBQStFO0FBQy9FLCtEQUErRDtBQUMvRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQWMsRUFBRSxHQUFHLElBQUk7SUFDaEQsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQ3JCLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNsQztJQUVELElBQUksQ0FBQyxrQkFBa0IsRUFBRTtRQUNyQixrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDMUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDdkQ7SUFFRCxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUU7UUFDcEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxFQUFFLEVBQUUsY0FBYyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXZGLE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUM7QUFFRCwrREFBK0Q7QUFDL0QsTUFBTSxVQUFVLGNBQWMsQ0FBQyxFQUFPO0lBQ2xDLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtRQUN2QixPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEM7SUFFRCxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDE0LTIwMjAgRGVuaXMgUHVzaGthcmV2XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRVxuICovXG5cbi8vIE5vdGU6IE9yaWdpbmFsbHkgY29waWVkIGZyb20gY29yZS1qcy1wdXJlIHBhY2thZ2UgYW5kIG1vZGlmaWVkLiAoaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMpXG5cbmNvbnN0IHF1ZXVlID0ge307XG5sZXQgY291bnRlciA9IDA7XG5sZXQgZXZlbnRMaXN0ZW5lckFkZGVkID0gZmFsc2U7XG5cbmNvbnN0IHJ1biA9IChpZCkgPT4ge1xuICAgIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgY29uc3QgZm4gPSBxdWV1ZVtpZF07XG4gICAgICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgICAgIGZuKCk7XG4gICAgfVxufTtcblxuY29uc3QgbGlzdGVuZXIgPSAoZXZlbnQpID0+IHJ1bihldmVudC5kYXRhKTtcblxuLy8gVXNlIGZ1bmN0aW9uIGluc3RlYWQgb2YgYXJyb3cgZnVuY3Rpb24gdG8gd29ya2Fyb3VuZCBhbiBpc3N1ZSBpbiBjb2Rlc2FuZGJveFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1hcnJvdy9wcmVmZXItYXJyb3ctZnVuY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNiOiAoKSA9PiB2b2lkLCAuLi5hcmdzKSB7XG4gICAgaWYgKHdpbmRvdy5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoY2IpO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRMaXN0ZW5lckFkZGVkKSB7XG4gICAgICAgIGV2ZW50TGlzdGVuZXJBZGRlZCA9IHRydWU7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gKCkgPT4ge1xuICAgICAgICBjYi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBjb25zdCB3aW5kb3dMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB3aW5kb3cucG9zdE1lc3NhZ2UoY291bnRlciArICcnLCB3aW5kb3dMb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3dMb2NhdGlvbi5ob3N0KTtcblxuICAgIHJldHVybiBjb3VudGVyO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWFycm93L3ByZWZlci1hcnJvdy1mdW5jdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZDogYW55KSB7XG4gICAgaWYgKHdpbmRvdy5jbGVhckltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gd2luZG93LmNsZWFySW1tZWRpYXRlKGlkKTtcbiAgICB9XG5cbiAgICBkZWxldGUgcXVldWVbaWRdO1xufVxuIl19